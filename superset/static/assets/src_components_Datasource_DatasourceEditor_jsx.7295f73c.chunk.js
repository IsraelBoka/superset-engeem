"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunksuperset"] = globalThis["webpackChunksuperset"] || []).push([["src_components_Datasource_DatasourceEditor_jsx"],{

/***/ "./src/components/Datasource/DatasourceEditor.jsx":
/*!********************************************************!*\
  !*** ./src/components/Datasource/DatasourceEditor.jsx ***!
  \********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var rison__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rison */ \"./node_modules/rison/js/rison.js\");\n/* harmony import */ var rison__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rison__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_32__);\n/* harmony import */ var src_components_Radio__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/components/Radio */ \"./src/components/Radio/index.tsx\");\n/* harmony import */ var src_components_Card__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/components/Card */ \"./src/components/Card/index.tsx\");\n/* harmony import */ var src_components_Alert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/components/Alert */ \"./src/components/Alert/index.tsx\");\n/* harmony import */ var src_components_Badge__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/components/Badge */ \"./src/components/Badge/index.tsx\");\n/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! shortid */ \"./node_modules/shortid/index.js\");\n/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(shortid__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/style/index.tsx\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/translation/TranslatorSingleton.ts\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/utils/featureFlags.ts\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/connection/SupersetClient.ts\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/utils/ensureIsArray.ts\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/currency-format/CurrencyFormatter.ts\");\n/* harmony import */ var src_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/components */ \"./src/components/index.ts\");\n/* harmony import */ var src_components_Form__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/components/Form */ \"./src/components/Form/index.tsx\");\n/* harmony import */ var src_components_Button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/components/Button */ \"./src/components/Button/index.tsx\");\n/* harmony import */ var src_components_Tabs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/components/Tabs */ \"./src/components/Tabs/index.ts\");\n/* harmony import */ var src_components_CertifiedBadge__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/components/CertifiedBadge */ \"./src/components/CertifiedBadge/index.tsx\");\n/* harmony import */ var src_components_WarningIconWithTooltip__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/components/WarningIconWithTooltip */ \"./src/components/WarningIconWithTooltip/index.tsx\");\n/* harmony import */ var src_components_DatabaseSelector__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/components/DatabaseSelector */ \"./src/components/DatabaseSelector/index.tsx\");\n/* harmony import */ var src_components_Label__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! src/components/Label */ \"./src/components/Label/index.tsx\");\n/* harmony import */ var src_components_Loading__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! src/components/Loading */ \"./src/components/Loading/index.tsx\");\n/* harmony import */ var src_components_TableSelector__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! src/components/TableSelector */ \"./src/components/TableSelector/index.tsx\");\n/* harmony import */ var src_components_EditableTitle__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! src/components/EditableTitle */ \"./src/components/EditableTitle/index.tsx\");\n/* harmony import */ var src_utils_getClientErrorObject__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! src/utils/getClientErrorObject */ \"./src/utils/getClientErrorObject.ts\");\n/* harmony import */ var src_explore_components_controls_CheckboxControl__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! src/explore/components/controls/CheckboxControl */ \"./src/explore/components/controls/CheckboxControl.jsx\");\n/* harmony import */ var src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! src/explore/components/controls/TextControl */ \"./src/explore/components/controls/TextControl/index.tsx\");\n/* harmony import */ var src_explore_components_controls_TextAreaControl__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! src/explore/components/controls/TextAreaControl */ \"./src/explore/components/controls/TextAreaControl.jsx\");\n/* harmony import */ var src_explore_components_controls_SpatialControl__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! src/explore/components/controls/SpatialControl */ \"./src/explore/components/controls/SpatialControl.jsx\");\n/* harmony import */ var src_components_MessageToasts_withToasts__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! src/components/MessageToasts/withToasts */ \"./src/components/MessageToasts/withToasts.tsx\");\n/* harmony import */ var src_components_Icons__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! src/components/Icons */ \"./src/components/Icons/index.tsx\");\n/* harmony import */ var src_explore_components_controls_CurrencyControl__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! src/explore/components/controls/CurrencyControl */ \"./src/explore/components/controls/CurrencyControl/index.ts\");\n/* harmony import */ var _CollectionTable__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./CollectionTable */ \"./src/components/Datasource/CollectionTable.tsx\");\n/* harmony import */ var _Fieldset__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./Fieldset */ \"./src/components/Datasource/Fieldset.tsx\");\n/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./Field */ \"./src/components/Datasource/Field.tsx\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst DatasourceContainer = _superset_ui_core__WEBPACK_IMPORTED_MODULE_29__.styled.div`\n  .change-warning {\n    margin: 16px 10px 0;\n    color: ${(_ref) => {let { theme } = _ref;return theme.colors.warning.base;}};\n  }\n\n  .change-warning .bold {\n    font-weight: ${(_ref2) => {let { theme } = _ref2;return theme.typography.weights.bold;}};\n  }\n\n  .form-group.has-feedback > .help-block {\n    margin-top: 8px;\n  }\n\n  .form-group.form-group-md {\n    margin-bottom: 8px;\n  }\n`;\n\nconst FlexRowContainer = _superset_ui_core__WEBPACK_IMPORTED_MODULE_29__.styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${(_ref3) => {let { theme } = _ref3;return theme.gridUnit;}}px;\n  }\n`;\n\nconst StyledTableTabs = (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_29__.styled)((0,src_components_Tabs__WEBPACK_IMPORTED_MODULE_10__[\"default\"]))`\n  overflow: visible;\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n`;\n\nconst StyledBadge = (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_29__.styled)((0,src_components_Badge__WEBPACK_IMPORTED_MODULE_5__[\"default\"]))`\n  .ant-badge-count {\n    line-height: ${(_ref4) => {let { theme } = _ref4;return theme.gridUnit * 4;}}px;\n    height: ${(_ref5) => {let { theme } = _ref5;return theme.gridUnit * 4;}}px;\n    margin-left: ${(_ref6) => {let { theme } = _ref6;return theme.gridUnit;}}px;\n  }\n`;\n\nconst EditLockContainer = _superset_ui_core__WEBPACK_IMPORTED_MODULE_29__.styled.div`\n  font-size: ${(_ref7) => {let { theme } = _ref7;return theme.typography.sizes.s;}}px;\n  display: flex;\n  align-items: center;\n  a {\n    padding: 0 10px;\n  }\n`;\n\nconst ColumnButtonWrapper = _superset_ui_core__WEBPACK_IMPORTED_MODULE_29__.styled.div`\n  text-align: right;\n  ${(_ref8) => {let { theme } = _ref8;return `margin-bottom: ${theme.gridUnit * 2}px`;}}\n`;\n\nconst StyledLabelWrapper = _superset_ui_core__WEBPACK_IMPORTED_MODULE_29__.styled.div`\n  display: flex;\n  align-items: center;\n  span {\n    margin-right: ${(_ref9) => {let { theme } = _ref9;return theme.gridUnit;}}px;\n  }\n`;\n\nconst StyledColumnsTabWrapper = _superset_ui_core__WEBPACK_IMPORTED_MODULE_29__.styled.div`\n  .table > tbody > tr > td {\n    vertical-align: middle;\n  }\n\n  .ant-tag {\n    margin-top: ${(_ref10) => {let { theme } = _ref10;return theme.gridUnit;}}px;\n  }\n`;\n\nconst StyledButtonWrapper = _superset_ui_core__WEBPACK_IMPORTED_MODULE_29__.styled.span`\n  ${(_ref11) => {let { theme } = _ref11;return `\n    margin-top: ${theme.gridUnit * 3}px;\n    margin-left: ${theme.gridUnit * 3}px;\n  `;}}\n`;\n\nconst checkboxGenerator = (d, onChange) =>\n(0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_CheckboxControl__WEBPACK_IMPORTED_MODULE_19__[\"default\"], { value: d, onChange: onChange });\n\nconst DATA_TYPES = [\n{ value: 'STRING', label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('STRING') },\n{ value: 'NUMERIC', label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('NUMERIC') },\n{ value: 'DATETIME', label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('DATETIME') },\n{ value: 'BOOLEAN', label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('BOOLEAN') }];\n\n\nconst DATASOURCE_TYPES_ARR = [\n{ key: 'physical', label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Physical (table or view)') },\n{ key: 'virtual', label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Virtual (SQL)') }];\n\nconst DATASOURCE_TYPES = {};\nDATASOURCE_TYPES_ARR.forEach((o) => {\n  DATASOURCE_TYPES[o.key] = o;\n});var _ref13 =  false ? 0 : { name: \"l0hchv-CollectionTabTitle\", styles: \"display:flex;align-items:center;label:CollectionTabTitle;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nfunction CollectionTabTitle(_ref12) {let { title, collection } = _ref12;\n  return (\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", {\n      css: _ref13,\n      \"data-test\": `collection-tab-${title}` },\n\n    title, ' ',\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(StyledBadge, { count: collection ? collection.length : 0, showZero: true })\n    ));\n\n}\n\nCollectionTabTitle.propTypes = {\n  title: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().string),\n  collection: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().array)\n};\n\nfunction ColumnCollectionTable(_ref14)\n\n\n\n\n\n\n\n\n\n\n{let { columns, datasource, onColumnsChange, onDatasourceChange, editableColumnName, showExpression, allowAddItem, allowEditDataType, itemGenerator, columnLabelTooltips } = _ref14;\n  return (\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_CollectionTable__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n      tableColumns:\n      (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_33__.isFeatureEnabled)(_superset_ui_core__WEBPACK_IMPORTED_MODULE_33__.FeatureFlag.ENABLE_ADVANCED_DATA_TYPES) ?\n      [\n      'column_name',\n      'advanced_data_type',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'] :\n\n      [\n      'column_name',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'],\n\n\n      sortColumns:\n      (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_33__.isFeatureEnabled)(_superset_ui_core__WEBPACK_IMPORTED_MODULE_33__.FeatureFlag.ENABLE_ADVANCED_DATA_TYPES) ?\n      [\n      'column_name',\n      'advanced_data_type',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'] :\n\n      [\n      'column_name',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'],\n\n\n      allowDeletes: true,\n      allowAddItem: allowAddItem,\n      itemGenerator: itemGenerator,\n      collection: columns,\n      columnLabelTooltips: columnLabelTooltips,\n      stickyHeader: true,\n      expandFieldset:\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(FormContainer, null,\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Fieldset__WEBPACK_IMPORTED_MODULE_27__[\"default\"], { compact: true },\n      showExpression &&\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"expression\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('SQL expression'),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextAreaControl__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n          language: \"markdown\",\n          offerEditInModal: false,\n          resize: \"vertical\" }\n        ) }\n\n      ),\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"verbose_name\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Label'),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n          controlId: \"verbose_name\",\n          placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Label') }\n        ) }\n\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"description\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Description'),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n          controlId: \"description\",\n          placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Description') }\n        ) }\n\n      ),\n      allowEditDataType &&\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"type\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Data type'),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components__WEBPACK_IMPORTED_MODULE_7__.Select, {\n          ariaLabel: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Data type'),\n          options: DATA_TYPES,\n          name: \"type\",\n          allowNewOptions: true,\n          allowClear: true }\n        ) }\n\n      ),\n\n      (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_33__.isFeatureEnabled)(_superset_ui_core__WEBPACK_IMPORTED_MODULE_33__.FeatureFlag.ENABLE_ADVANCED_DATA_TYPES) ?\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"advanced_data_type\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Advanced data type'),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n          controlId: \"advanced_data_type\",\n          placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Advanced Data type') }\n        ) }\n\n      ) :\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null),\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"python_date_format\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Datetime format'),\n        description:\n        /* Note the fragmented translations may not work. */\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", null,\n        (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('The pattern of timestamp format. For strings use '),\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"a\", { href: \"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\" },\n        (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Python datetime string pattern')\n        ),\n        (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(' expression which needs to adhere to the '),\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"a\", { href: \"https://en.wikipedia.org/wiki/ISO_8601\" },\n        (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('ISO 8601')\n        ),\n        (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(` standard to ensure that the lexicographical ordering\n                      coincides with the chronological ordering. If the\n                      timestamp format does not adhere to the ISO 8601 standard\n                      you will need to define an expression and type for\n                      transforming the string into a date or timestamp. Note\n                      currently time zones are not supported. If time is stored\n                      in epoch format, put \\`epoch_s\\` or \\`epoch_ms\\`. If no pattern\n                      is specified we fall back to using the optional defaults on a per\n                      database/column name level via the extra parameter.`)\n        ),\n\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n          controlId: \"python_date_format\",\n          placeholder: \"%Y/%m/%d\" }\n        ) }\n\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"certified_by\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Certified By'),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Person or group that has certified this metric'),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n          controlId: \"certified\",\n          placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Certified by') }\n        ) }\n\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"certification_details\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Certification details'),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Details of the certification'),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n          controlId: \"certificationDetails\",\n          placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Certification details') }\n        ) }\n\n      )\n      )\n      ),\n\n      columnLabels:\n      (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_33__.isFeatureEnabled)(_superset_ui_core__WEBPACK_IMPORTED_MODULE_33__.FeatureFlag.ENABLE_ADVANCED_DATA_TYPES) ?\n      {\n        column_name: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Column'),\n        advanced_data_type: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Advanced data type'),\n        type: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Data type'),\n        groupby: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Is dimension'),\n        is_dttm: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Is temporal'),\n        main_dttm_col: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Default datetime'),\n        filterable: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Is filterable')\n      } :\n      {\n        column_name: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Column'),\n        type: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Data type'),\n        groupby: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Is dimension'),\n        is_dttm: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Is temporal'),\n        main_dttm_col: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Default datetime'),\n        filterable: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Is filterable')\n      },\n\n      onChange: onColumnsChange,\n      itemRenderers:\n      (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_33__.isFeatureEnabled)(_superset_ui_core__WEBPACK_IMPORTED_MODULE_33__.FeatureFlag.ENABLE_ADVANCED_DATA_TYPES) ?\n      {\n        column_name: (v, onItemChange, _, record) =>\n        editableColumnName ?\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(StyledLabelWrapper, null,\n        record.is_certified &&\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_CertifiedBadge__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }\n        ),\n\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_EditableTitle__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {\n          canEdit: true,\n          title: v,\n          onSaveTitle: onItemChange }\n        )\n        ) :\n\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(StyledLabelWrapper, null,\n        record.is_certified &&\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_CertifiedBadge__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }\n        ),\n\n        v\n        ),\n\n        main_dttm_col: (value, _onItemChange, _label, record) => {\n          const checked = datasource.main_dttm_col === record.column_name;\n          const disabled = !columns.find(\n            (column) => column.column_name === record.column_name\n          ).is_dttm;\n          return (\n            (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Radio__WEBPACK_IMPORTED_MODULE_2__.Radio, {\n              \"data-test\": `radio-default-dttm-${record.column_name}`,\n              checked: checked,\n              disabled: disabled,\n              onChange: () =>\n              onDatasourceChange({\n                ...datasource,\n                main_dttm_col: record.column_name\n              }) }\n\n            ));\n\n        },\n        type: (d) => d ? (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Label__WEBPACK_IMPORTED_MODULE_14__[\"default\"], null, d) : null,\n        advanced_data_type: (d) =>\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Label__WEBPACK_IMPORTED_MODULE_14__[\"default\"], { onChange: onColumnsChange }, d),\n\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator\n      } :\n      {\n        column_name: (v, onItemChange, _, record) =>\n        editableColumnName ?\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(StyledLabelWrapper, null,\n        record.is_certified &&\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_CertifiedBadge__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }\n        ),\n\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], { value: v, onChange: onItemChange })\n        ) :\n\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(StyledLabelWrapper, null,\n        record.is_certified &&\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_CertifiedBadge__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }\n        ),\n\n        v\n        ),\n\n        main_dttm_col: (value, _onItemChange, _label, record) => {\n          const checked = datasource.main_dttm_col === record.column_name;\n          const disabled = !columns.find(\n            (column) => column.column_name === record.column_name\n          ).is_dttm;\n          return (\n            (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Radio__WEBPACK_IMPORTED_MODULE_2__.Radio, {\n              \"data-test\": `radio-default-dttm-${record.column_name}`,\n              checked: checked,\n              disabled: disabled,\n              onChange: () =>\n              onDatasourceChange({\n                ...datasource,\n                main_dttm_col: record.column_name\n              }) }\n\n            ));\n\n        },\n        type: (d) => d ? (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Label__WEBPACK_IMPORTED_MODULE_14__[\"default\"], null, d) : null,\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator\n      } }\n\n    ));\n\n}\nColumnCollectionTable.propTypes = {\n  columns: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().array).isRequired,\n  datasource: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().object).isRequired,\n  onColumnsChange: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().func).isRequired,\n  onDatasourceChange: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().func).isRequired,\n  editableColumnName: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().bool),\n  showExpression: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().bool),\n  allowAddItem: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().bool),\n  allowEditDataType: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().bool),\n  itemGenerator: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().func)\n};\nColumnCollectionTable.defaultProps = {\n  editableColumnName: false,\n  showExpression: false,\n  allowAddItem: false,\n  allowEditDataType: false,\n  itemGenerator: () => ({\n    column_name: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('<new column>'),\n    filterable: true,\n    groupby: true\n  })\n};\n\nfunction StackedField(_ref15) {let { label, formElement } = _ref15;\n  return (\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", null,\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", null,\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"strong\", null, label)\n    ),\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", null, formElement)\n    ));\n\n}\n\nStackedField.propTypes = {\n  label: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().string),\n  formElement: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().node)\n};\n\nfunction FormContainer(_ref16) {let { children } = _ref16;\n  return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Card__WEBPACK_IMPORTED_MODULE_3__[\"default\"], { padded: true }, children);\n}\n\nFormContainer.propTypes = {\n  children: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().node)\n};\n\nconst propTypes = {\n  datasource: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().object).isRequired,\n  onChange: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().func),\n  addSuccessToast: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().func).isRequired,\n  addDangerToast: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().func).isRequired,\n  setIsEditing: (prop_types__WEBPACK_IMPORTED_MODULE_32___default().func)\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  setIsEditing: () => {}\n};\n\nfunction OwnersSelector(_ref17) {let { datasource, onChange } = _ref17;\n  const loadOptions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function (search, page, pageSize) {if (search === void 0) {search = '';}\n    const query = rison__WEBPACK_IMPORTED_MODULE_0___default().encode({ filter: search, page, page_size: pageSize });\n    return _superset_ui_core__WEBPACK_IMPORTED_MODULE_34__[\"default\"].get({\n      endpoint: `/api/v1/dataset/related/owners?q=${query}`\n    }).then((response) => ({\n      data: response.json.result.\n      filter((item) => item.extra.active).\n      map((item) => ({\n        value: item.value,\n        label: item.text\n      })),\n      totalCount: response.json.count\n    }));\n  }, []);\n\n  return (\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components__WEBPACK_IMPORTED_MODULE_7__.AsyncSelect, {\n      ariaLabel: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Select owners'),\n      mode: \"multiple\",\n      name: \"owners\",\n      value: datasource.owners,\n      options: loadOptions,\n      onChange: onChange,\n      header: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Form__WEBPACK_IMPORTED_MODULE_8__.FormLabel, null, (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Owners')),\n      allowClear: true }\n    ));\n\n}__signature__(OwnersSelector, \"useCallback{loadOptions}\");var _ref23 =  false ? 0 : { name: \"17jm38f-DatasourceEditor\", styles: \"margin-top:8px;label:DatasourceEditor;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };var _ref24 =  false ? 0 : { name: \"17jm38f-DatasourceEditor\", styles: \"margin-top:8px;label:DatasourceEditor;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nclass DatasourceEditor extends react__WEBPACK_IMPORTED_MODULE_1__.PureComponent {\n  constructor(props) {var _props$datasource$met;\n    super(props);\n    this.state = {\n      datasource: {\n        ...props.datasource,\n        owners: props.datasource.owners.map((owner) => ({\n          value: owner.value || owner.id,\n          label: owner.label || `${owner.first_name} ${owner.last_name}`\n        })),\n        metrics: (_props$datasource$met = props.datasource.metrics) == null ? void 0 : _props$datasource$met.map((metric) => {\n          const {\n            certified_by: certifiedByMetric,\n            certification_details: certificationDetails\n          } = metric;\n          const {\n            certification: { details, certified_by: certifiedBy } = {},\n            warning_markdown: warningMarkdown\n          } = JSON.parse(metric.extra || '{}') || {};\n          return {\n            ...metric,\n            certification_details: certificationDetails || details,\n            warning_markdown: warningMarkdown || '',\n            certified_by: certifiedBy || certifiedByMetric\n          };\n        })\n      },\n      errors: [],\n      isSqla:\n      props.datasource.datasource_type === 'table' ||\n      props.datasource.type === 'table',\n      isEditMode: false,\n      databaseColumns: props.datasource.columns.filter((col) => !col.expression),\n      calculatedColumns: props.datasource.columns.filter(\n        (col) => !!col.expression\n      ),\n      metadataLoading: false,\n      activeTabKey: 0,\n      datasourceType: props.datasource.sql ?\n      DATASOURCE_TYPES.virtual.key :\n      DATASOURCE_TYPES.physical.key\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onChangeEditMode = this.onChangeEditMode.bind(this);\n    this.onDatasourcePropChange = this.onDatasourcePropChange.bind(this);\n    this.onDatasourceChange = this.onDatasourceChange.bind(this);\n    this.tableChangeAndSyncMetadata =\n    this.tableChangeAndSyncMetadata.bind(this);\n    this.syncMetadata = this.syncMetadata.bind(this);\n    this.setColumns = this.setColumns.bind(this);\n    this.validateAndChange = this.validateAndChange.bind(this);\n    this.handleTabSelect = this.handleTabSelect.bind(this);\n    this.currencies = (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_35__[\"default\"])(props.currencies).map((currencyCode) => ({\n      value: currencyCode,\n      label: `${(0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_36__.getCurrencySymbol)({\n        symbol: currencyCode\n      })} (${currencyCode})`\n    }));\n  }\n\n  onChange() {\n    // Emptying SQL if \"Physical\" radio button is selected\n    // Currently the logic to know whether the source is\n    // physical or virtual is based on whether SQL is empty or not.\n    const { datasourceType, datasource } = this.state;\n    const sql =\n    datasourceType === DATASOURCE_TYPES.physical.key ? '' : datasource.sql;\n    const newDatasource = {\n      ...this.state.datasource,\n      sql,\n      columns: [...this.state.databaseColumns, ...this.state.calculatedColumns]\n    };\n    this.props.onChange(newDatasource, this.state.errors);\n  }\n\n  onChangeEditMode() {\n    this.props.setIsEditing(!this.state.isEditMode);\n    this.setState((prevState) => ({ isEditMode: !prevState.isEditMode }));\n  }\n\n  onDatasourceChange(datasource, callback) {if (callback === void 0) {callback = this.validateAndChange;}\n    this.setState({ datasource }, callback);\n  }\n\n  onDatasourcePropChange(attr, value) {\n    if (value === undefined) return; // if value is undefined do not update state\n    const datasource = { ...this.state.datasource, [attr]: value };\n    this.setState(\n      (prevState) => ({\n        datasource: { ...prevState.datasource, [attr]: value }\n      }),\n      attr === 'table_name' ?\n      this.onDatasourceChange(datasource, this.tableChangeAndSyncMetadata) :\n      this.onDatasourceChange(datasource, this.validateAndChange)\n    );\n  }\n\n  onDatasourceTypeChange(datasourceType) {\n    this.setState({ datasourceType });\n  }\n\n  setColumns(obj) {\n    // update calculatedColumns or databaseColumns\n    this.setState(obj, this.validateAndChange);\n  }\n\n  validateAndChange() {\n    this.validate(this.onChange);\n  }\n\n  tableChangeAndSyncMetadata() {\n    this.validate(() => {\n      this.syncMetadata();\n      this.onChange();\n    });\n  }\n\n  updateColumns(cols) {\n    // cols: Array<{column_name: string; is_dttm: boolean; type: string;}>\n    const { databaseColumns } = this.state;\n    const databaseColumnNames = cols.map((col) => col.column_name);\n    const currentCols = databaseColumns.reduce(\n      (agg, col) => ({\n        ...agg,\n        [col.column_name]: col\n      }),\n      {}\n    );\n    const finalColumns = [];\n    const results = {\n      added: [],\n      modified: [],\n      removed: databaseColumns.\n      map((col) => col.column_name).\n      filter((col) => !databaseColumnNames.includes(col))\n    };\n    cols.forEach((col) => {\n      const currentCol = currentCols[col.column_name];\n      if (!currentCol) {\n        // new column\n        finalColumns.push({\n          id: shortid__WEBPACK_IMPORTED_MODULE_6___default().generate(),\n          column_name: col.column_name,\n          type: col.type,\n          groupby: true,\n          filterable: true,\n          is_dttm: col.is_dttm\n        });\n        results.added.push(col.column_name);\n      } else if (\n      currentCol.type !== col.type ||\n      !currentCol.is_dttm && col.is_dttm)\n      {\n        // modified column\n        finalColumns.push({\n          ...currentCol,\n          type: col.type,\n          is_dttm: currentCol.is_dttm || col.is_dttm\n        });\n        results.modified.push(col.column_name);\n      } else {\n        // unchanged\n        finalColumns.push(currentCol);\n      }\n    });\n    if (\n    results.added.length ||\n    results.modified.length ||\n    results.removed.length)\n    {\n      this.setColumns({ databaseColumns: finalColumns });\n    }\n    return results;\n  }\n\n  syncMetadata() {\n    const { datasource } = this.state;\n    const params = {\n      datasource_type: datasource.type || datasource.datasource_type,\n      database_name:\n      datasource.database.database_name || datasource.database.name,\n      schema_name: datasource.schema,\n      table_name: datasource.table_name,\n      normalize_columns: datasource.normalize_columns,\n      always_filter_main_dttm: datasource.always_filter_main_dttm\n    };\n    Object.entries(params).forEach((_ref18) => {let [key, value] = _ref18;\n      // rison can't encode the undefined value\n      if (value === undefined) {\n        params[key] = null;\n      }\n    });\n    const endpoint = `/datasource/external_metadata_by_name/?q=${rison__WEBPACK_IMPORTED_MODULE_0___default().encode_uri(\n      params\n    )}`;\n    this.setState({ metadataLoading: true });\n\n    _superset_ui_core__WEBPACK_IMPORTED_MODULE_34__[\"default\"].get({ endpoint }).\n    then((_ref19) => {let { json } = _ref19;\n      const results = this.updateColumns(json);\n      if (results.modified.length) {\n        this.props.addSuccessToast(\n          (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Modified columns: %s', results.modified.join(', '))\n        );\n      }\n      if (results.removed.length) {\n        this.props.addSuccessToast(\n          (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Removed columns: %s', results.removed.join(', '))\n        );\n      }\n      if (results.added.length) {\n        this.props.addSuccessToast(\n          (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('New columns added: %s', results.added.join(', '))\n        );\n      }\n      this.props.addSuccessToast((0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Metadata has been synced'));\n      this.setState({ metadataLoading: false });\n    }).\n    catch((response) =>\n    (0,src_utils_getClientErrorObject__WEBPACK_IMPORTED_MODULE_18__.getClientErrorObject)(response).then((_ref20) => {let { error, statusText } = _ref20;\n      this.props.addDangerToast(\n        error || statusText || (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('An error has occurred')\n      );\n      this.setState({ metadataLoading: false });\n    })\n    );\n  }\n\n  findDuplicates(arr, accessor) {\n    const seen = {};\n    const dups = [];\n    arr.forEach((obj) => {\n      const item = accessor(obj);\n      if (item in seen) {\n        dups.push(item);\n      } else {\n        seen[item] = null;\n      }\n    });\n    return dups;\n  }\n\n  validate(callback) {\n    let errors = [];\n    let dups;\n    const { datasource } = this.state;\n\n    // Looking for duplicate column_name\n    dups = this.findDuplicates(datasource.columns, (obj) => obj.column_name);\n    errors = errors.concat(\n      dups.map((name) => (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Column name [%s] is duplicated', name))\n    );\n\n    // Looking for duplicate metric_name\n    dups = this.findDuplicates(datasource.metrics, (obj) => obj.metric_name);\n    errors = errors.concat(\n      dups.map((name) => (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Metric name [%s] is duplicated', name))\n    );\n\n    // Making sure calculatedColumns have an expression defined\n    const noFilterCalcCols = this.state.calculatedColumns.filter(\n      (col) => !col.expression && !col.json\n    );\n    errors = errors.concat(\n      noFilterCalcCols.map((col) =>\n      (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Calculated column [%s] requires an expression', col.column_name)\n      )\n    );\n\n    // validate currency code\n    try {var _this$state$datasourc;\n      (_this$state$datasourc = this.state.datasource.metrics) == null ? void 0 : _this$state$datasourc.forEach(\n        (metric) => {var _metric$currency;return (\n            ((_metric$currency = metric.currency) == null ? void 0 : _metric$currency.symbol) &&\n            new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: metric.currency.symbol\n            }));}\n      );\n    } catch {\n      errors = errors.concat([(0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Invalid currency code in saved metrics')]);\n    }\n\n    this.setState({ errors }, callback);\n  }\n\n  handleTabSelect(activeTabKey) {\n    this.setState({ activeTabKey });\n  }\n\n  sortMetrics(metrics) {\n    return metrics.sort((_ref21, _ref22) => {let { id: a } = _ref21;let { id: b } = _ref22;return b - a;});\n  }\n\n  renderSettingsFieldset() {\n    const { datasource } = this.state;\n    return (\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Fieldset__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        title: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Basic'),\n        item: datasource,\n        onChange: this.onDatasourceChange },\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"description\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Description'),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextAreaControl__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n          language: \"markdown\",\n          offerEditInModal: false,\n          resize: \"vertical\" }\n        ) }\n\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"default_endpoint\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Default URL'),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n          'Default URL to redirect to when accessing from the dataset list page'\n        ),\n        control: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], { controlId: \"default_endpoint\" }) }\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        inline: true,\n        fieldKey: \"filter_select_enabled\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Autocomplete filters'),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Whether to populate autocomplete filters options'),\n        control: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_CheckboxControl__WEBPACK_IMPORTED_MODULE_19__[\"default\"], null) }\n      ),\n      this.state.isSqla &&\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"fetch_values_predicate\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Autocomplete query predicate'),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n          'When using \"Autocomplete filters\", this can be used to improve performance ' +\n          'of the query fetching the values. Use this option to apply a ' +\n          'predicate (WHERE clause) to the query selecting the distinct ' +\n          'values from the table. Typically the intent would be to limit the scan ' +\n          'by applying a relative time filter on a partitioned or indexed time-related field.'\n        ),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextAreaControl__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n          language: \"sql\",\n          controlId: \"fetch_values_predicate\",\n          minLines: 5,\n          resize: \"vertical\" }\n        ) }\n\n      ),\n\n      this.state.isSqla &&\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"extra\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Extra'),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n          'Extra data to specify table metadata. Currently supports ' +\n          'metadata of the format: `{ \"certification\": { \"certified_by\": ' +\n          '\"Data Platform Team\", \"details\": \"This table is the source of truth.\" ' +\n          '}, \"warning_markdown\": \"This is a warning.\" }`.'\n        ),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextAreaControl__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n          controlId: \"extra\",\n          language: \"json\",\n          offerEditInModal: false,\n          resize: \"vertical\" }\n        ) }\n\n      ),\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(OwnersSelector, {\n        datasource: datasource,\n        onChange: (newOwners) => {\n          this.onDatasourceChange({ ...datasource, owners: newOwners });\n        } }\n      )\n      ));\n\n  }\n\n  renderAdvancedFieldset() {\n    const { datasource } = this.state;\n    return (\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Fieldset__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        title: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Advanced'),\n        item: datasource,\n        onChange: this.onDatasourceChange },\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"cache_timeout\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Cache timeout'),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n          'The duration of time in seconds before the cache is invalidated. Set to -1 to bypass the cache.'\n        ),\n        control: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], { controlId: \"cache_timeout\" }) }\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"offset\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Hours offset'),\n        control: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], { controlId: \"offset\" }),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n          'The number of hours, negative or positive, to shift the time column. This can be used to move UTC time to local time.'\n        ) }\n      ),\n      this.state.isSqla &&\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"template_params\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Template parameters'),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n          'A set of parameters that become available in the query using Jinja templating syntax'\n        ),\n        control: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], { controlId: \"template_params\" }) }\n      ),\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        inline: true,\n        fieldKey: \"normalize_columns\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Normalize column names'),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n          'Allow column names to be changed to case insensitive format, if supported (e.g. Oracle, Snowflake).'\n        ),\n        control: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_CheckboxControl__WEBPACK_IMPORTED_MODULE_19__[\"default\"], { controlId: \"normalize_columns\" }) }\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        inline: true,\n        fieldKey: \"always_filter_main_dttm\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Always filter main datetime column'),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n          `When the secondary temporal columns are filtered, apply the same filter to the main datetime column.`\n        ),\n        control: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_CheckboxControl__WEBPACK_IMPORTED_MODULE_19__[\"default\"], { controlId: \"always_filter_main_dttm\" }) }\n      )\n      ));\n\n  }\n\n  renderSpatialTab() {\n    const { datasource } = this.state;\n    const { spatials, all_cols: allCols } = datasource;\n    return (\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Tabs__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TabPane, {\n        tab: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(CollectionTabTitle, { collection: spatials, title: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Spatial') }),\n        key: 4 },\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_CollectionTable__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n        tableColumns: ['name', 'config'],\n        onChange: this.onDatasourcePropChange.bind(this, 'spatials'),\n        itemGenerator: () => ({\n          name: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('<new spatial>'),\n          type: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('<no type>'),\n          config: null\n        }),\n        collection: spatials,\n        allowDeletes: true,\n        itemRenderers: {\n          name: (d, onChange) =>\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_EditableTitle__WEBPACK_IMPORTED_MODULE_17__[\"default\"], { canEdit: true, title: d, onSaveTitle: onChange }),\n\n          config: (v, onChange) =>\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_SpatialControl__WEBPACK_IMPORTED_MODULE_22__[\"default\"], { value: v, onChange: onChange, choices: allCols })\n\n        } }\n      )\n      ));\n\n  }\n\n  renderSourceFieldset(theme) {var _datasource$database, _datasource$database2, _datasource$database3;\n    const { datasource } = this.state;\n    return (\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", null,\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(EditLockContainer, null,\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"span\", { role: \"button\", tabIndex: 0, onClick: this.onChangeEditMode },\n      this.state.isEditMode ?\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Icons__WEBPACK_IMPORTED_MODULE_24__[\"default\"].LockUnlocked, { iconColor: theme.colors.grayscale.base }) :\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Icons__WEBPACK_IMPORTED_MODULE_24__[\"default\"].LockLocked, { iconColor: theme.colors.grayscale.base })\n\n      ),\n      !this.state.isEditMode &&\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", null, (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Click the lock to make changes.')),\n\n      this.state.isEditMode &&\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", null, (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Click the lock to prevent further changes.'))\n\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", { className: \"m-l-10 m-t-20 m-b-10\" },\n      DATASOURCE_TYPES_ARR.map((type) =>\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Radio__WEBPACK_IMPORTED_MODULE_2__.Radio, {\n        key: type.key,\n        value: type.key,\n        inline: true,\n        onChange: this.onDatasourceTypeChange.bind(this, type.key),\n        checked: this.state.datasourceType === type.key,\n        disabled: !this.state.isEditMode },\n\n      type.label\n      )\n      )\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"hr\", null),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Fieldset__WEBPACK_IMPORTED_MODULE_27__[\"default\"], { item: datasource, onChange: this.onDatasourceChange, compact: true },\n      this.state.datasourceType === DATASOURCE_TYPES.virtual.key &&\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", null,\n      this.state.isSqla &&\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components__WEBPACK_IMPORTED_MODULE_7__.Col, { xs: 24, md: 12 },\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"databaseSelector\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('virtual'),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", { css: _ref23 },\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_DatabaseSelector__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n          db: datasource == null ? void 0 : datasource.database,\n          schema: datasource.schema,\n          onSchemaChange: (schema) =>\n          this.state.isEditMode &&\n          this.onDatasourcePropChange('schema', schema),\n\n          onDbChange: (database) =>\n          this.state.isEditMode &&\n          this.onDatasourcePropChange('database', database),\n\n          formMode: false,\n          handleError: this.props.addDangerToast,\n          readOnly: !this.state.isEditMode }\n        )\n        ) }\n\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", { css: /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.css)({ width: 'calc(100% - 34px)', marginTop: -16 },  false ? 0 : \";label:DatasourceEditor;\",  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9hcHAvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvRGF0YXNvdXJjZS9EYXRhc291cmNlRWRpdG9yLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvbEN5QiIsImZpbGUiOiIvYXBwL3N1cGVyc2V0LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL0RhdGFzb3VyY2UvRGF0YXNvdXJjZUVkaXRvci5qc3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgcmlzb24gZnJvbSAncmlzb24nO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJhZGlvIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvUmFkaW8nO1xuaW1wb3J0IENhcmQgZnJvbSAnc3JjL2NvbXBvbmVudHMvQ2FyZCc7XG5pbXBvcnQgQWxlcnQgZnJvbSAnc3JjL2NvbXBvbmVudHMvQWxlcnQnO1xuaW1wb3J0IEJhZGdlIGZyb20gJ3NyYy9jb21wb25lbnRzL0JhZGdlJztcbmltcG9ydCBzaG9ydGlkIGZyb20gJ3Nob3J0aWQnO1xuaW1wb3J0IHtcbiAgY3NzLFxuICBpc0ZlYXR1cmVFbmFibGVkLFxuICBnZXRDdXJyZW5jeVN5bWJvbCxcbiAgZW5zdXJlSXNBcnJheSxcbiAgRmVhdHVyZUZsYWcsXG4gIHN0eWxlZCxcbiAgU3VwZXJzZXRDbGllbnQsXG4gIHQsXG4gIHdpdGhUaGVtZSxcbn0gZnJvbSAnQHN1cGVyc2V0LXVpL2NvcmUnO1xuaW1wb3J0IHsgU2VsZWN0LCBBc3luY1NlbGVjdCwgUm93LCBDb2wgfSBmcm9tICdzcmMvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBGb3JtTGFiZWwgfSBmcm9tICdzcmMvY29tcG9uZW50cy9Gb3JtJztcbmltcG9ydCBCdXR0b24gZnJvbSAnc3JjL2NvbXBvbmVudHMvQnV0dG9uJztcbmltcG9ydCBUYWJzIGZyb20gJ3NyYy9jb21wb25lbnRzL1RhYnMnO1xuaW1wb3J0IENlcnRpZmllZEJhZGdlIGZyb20gJ3NyYy9jb21wb25lbnRzL0NlcnRpZmllZEJhZGdlJztcbmltcG9ydCBXYXJuaW5nSWNvbldpdGhUb29sdGlwIGZyb20gJ3NyYy9jb21wb25lbnRzL1dhcm5pbmdJY29uV2l0aFRvb2x0aXAnO1xuaW1wb3J0IERhdGFiYXNlU2VsZWN0b3IgZnJvbSAnc3JjL2NvbXBvbmVudHMvRGF0YWJhc2VTZWxlY3Rvcic7XG5pbXBvcnQgTGFiZWwgZnJvbSAnc3JjL2NvbXBvbmVudHMvTGFiZWwnO1xuaW1wb3J0IExvYWRpbmcgZnJvbSAnc3JjL2NvbXBvbmVudHMvTG9hZGluZyc7XG5pbXBvcnQgVGFibGVTZWxlY3RvciBmcm9tICdzcmMvY29tcG9uZW50cy9UYWJsZVNlbGVjdG9yJztcbmltcG9ydCBFZGl0YWJsZVRpdGxlIGZyb20gJ3NyYy9jb21wb25lbnRzL0VkaXRhYmxlVGl0bGUnO1xuaW1wb3J0IHsgZ2V0Q2xpZW50RXJyb3JPYmplY3QgfSBmcm9tICdzcmMvdXRpbHMvZ2V0Q2xpZW50RXJyb3JPYmplY3QnO1xuaW1wb3J0IENoZWNrYm94Q29udHJvbCBmcm9tICdzcmMvZXhwbG9yZS9jb21wb25lbnRzL2NvbnRyb2xzL0NoZWNrYm94Q29udHJvbCc7XG5pbXBvcnQgVGV4dENvbnRyb2wgZnJvbSAnc3JjL2V4cGxvcmUvY29tcG9uZW50cy9jb250cm9scy9UZXh0Q29udHJvbCc7XG5pbXBvcnQgVGV4dEFyZWFDb250cm9sIGZyb20gJ3NyYy9leHBsb3JlL2NvbXBvbmVudHMvY29udHJvbHMvVGV4dEFyZWFDb250cm9sJztcbmltcG9ydCBTcGF0aWFsQ29udHJvbCBmcm9tICdzcmMvZXhwbG9yZS9jb21wb25lbnRzL2NvbnRyb2xzL1NwYXRpYWxDb250cm9sJztcbmltcG9ydCB3aXRoVG9hc3RzIGZyb20gJ3NyYy9jb21wb25lbnRzL01lc3NhZ2VUb2FzdHMvd2l0aFRvYXN0cyc7XG5pbXBvcnQgSWNvbnMgZnJvbSAnc3JjL2NvbXBvbmVudHMvSWNvbnMnO1xuaW1wb3J0IEN1cnJlbmN5Q29udHJvbCBmcm9tICdzcmMvZXhwbG9yZS9jb21wb25lbnRzL2NvbnRyb2xzL0N1cnJlbmN5Q29udHJvbCc7XG5pbXBvcnQgQ29sbGVjdGlvblRhYmxlIGZyb20gJy4vQ29sbGVjdGlvblRhYmxlJztcbmltcG9ydCBGaWVsZHNldCBmcm9tICcuL0ZpZWxkc2V0JztcbmltcG9ydCBGaWVsZCBmcm9tICcuL0ZpZWxkJztcblxuY29uc3QgRGF0YXNvdXJjZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIC5jaGFuZ2Utd2FybmluZyB7XG4gICAgbWFyZ2luOiAxNnB4IDEwcHggMDtcbiAgICBjb2xvcjogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMud2FybmluZy5iYXNlfTtcbiAgfVxuXG4gIC5jaGFuZ2Utd2FybmluZyAuYm9sZCB7XG4gICAgZm9udC13ZWlnaHQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUudHlwb2dyYXBoeS53ZWlnaHRzLmJvbGR9O1xuICB9XG5cbiAgLmZvcm0tZ3JvdXAuaGFzLWZlZWRiYWNrID4gLmhlbHAtYmxvY2sge1xuICAgIG1hcmdpbi10b3A6IDhweDtcbiAgfVxuXG4gIC5mb3JtLWdyb3VwLmZvcm0tZ3JvdXAtbWQge1xuICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgfVxuYDtcblxuY29uc3QgRmxleFJvd0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGRpc3BsYXk6IGZsZXg7XG5cbiAgc3ZnIHtcbiAgICBtYXJnaW4tcmlnaHQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuZ3JpZFVuaXR9cHg7XG4gIH1cbmA7XG5cbmNvbnN0IFN0eWxlZFRhYmxlVGFicyA9IHN0eWxlZChUYWJzKWBcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIC5hbnQtdGFicy1jb250ZW50LWhvbGRlciB7XG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIH1cbmA7XG5cbmNvbnN0IFN0eWxlZEJhZGdlID0gc3R5bGVkKEJhZGdlKWBcbiAgLmFudC1iYWRnZS1jb3VudCB7XG4gICAgbGluZS1oZWlnaHQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuZ3JpZFVuaXQgKiA0fXB4O1xuICAgIGhlaWdodDogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5ncmlkVW5pdCAqIDR9cHg7XG4gICAgbWFyZ2luLWxlZnQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuZ3JpZFVuaXR9cHg7XG4gIH1cbmA7XG5cbmNvbnN0IEVkaXRMb2NrQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgZm9udC1zaXplOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLnR5cG9ncmFwaHkuc2l6ZXMuc31weDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYSB7XG4gICAgcGFkZGluZzogMCAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBDb2x1bW5CdXR0b25XcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICR7KHsgdGhlbWUgfSkgPT4gYG1hcmdpbi1ib3R0b206ICR7dGhlbWUuZ3JpZFVuaXQgKiAyfXB4YH1cbmA7XG5cbmNvbnN0IFN0eWxlZExhYmVsV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHNwYW4ge1xuICAgIG1hcmdpbi1yaWdodDogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5ncmlkVW5pdH1weDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkQ29sdW1uc1RhYldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICAudGFibGUgPiB0Ym9keSA+IHRyID4gdGQge1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cblxuICAuYW50LXRhZyB7XG4gICAgbWFyZ2luLXRvcDogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5ncmlkVW5pdH1weDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkQnV0dG9uV3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuICAkeyh7IHRoZW1lIH0pID0+IGBcbiAgICBtYXJnaW4tdG9wOiAke3RoZW1lLmdyaWRVbml0ICogM31weDtcbiAgICBtYXJnaW4tbGVmdDogJHt0aGVtZS5ncmlkVW5pdCAqIDN9cHg7XG4gIGB9XG5gO1xuXG5jb25zdCBjaGVja2JveEdlbmVyYXRvciA9IChkLCBvbkNoYW5nZSkgPT4gKFxuICA8Q2hlY2tib3hDb250cm9sIHZhbHVlPXtkfSBvbkNoYW5nZT17b25DaGFuZ2V9IC8+XG4pO1xuY29uc3QgREFUQV9UWVBFUyA9IFtcbiAgeyB2YWx1ZTogJ1NUUklORycsIGxhYmVsOiB0KCdTVFJJTkcnKSB9LFxuICB7IHZhbHVlOiAnTlVNRVJJQycsIGxhYmVsOiB0KCdOVU1FUklDJykgfSxcbiAgeyB2YWx1ZTogJ0RBVEVUSU1FJywgbGFiZWw6IHQoJ0RBVEVUSU1FJykgfSxcbiAgeyB2YWx1ZTogJ0JPT0xFQU4nLCBsYWJlbDogdCgnQk9PTEVBTicpIH0sXG5dO1xuXG5jb25zdCBEQVRBU09VUkNFX1RZUEVTX0FSUiA9IFtcbiAgeyBrZXk6ICdwaHlzaWNhbCcsIGxhYmVsOiB0KCdQaHlzaWNhbCAodGFibGUgb3IgdmlldyknKSB9LFxuICB7IGtleTogJ3ZpcnR1YWwnLCBsYWJlbDogdCgnVmlydHVhbCAoU1FMKScpIH0sXG5dO1xuY29uc3QgREFUQVNPVVJDRV9UWVBFUyA9IHt9O1xuREFUQVNPVVJDRV9UWVBFU19BUlIuZm9yRWFjaChvID0+IHtcbiAgREFUQVNPVVJDRV9UWVBFU1tvLmtleV0gPSBvO1xufSk7XG5cbmZ1bmN0aW9uIENvbGxlY3Rpb25UYWJUaXRsZSh7IHRpdGxlLCBjb2xsZWN0aW9uIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3sgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJyB9fVxuICAgICAgZGF0YS10ZXN0PXtgY29sbGVjdGlvbi10YWItJHt0aXRsZX1gfVxuICAgID5cbiAgICAgIHt0aXRsZX17JyAnfVxuICAgICAgPFN0eWxlZEJhZGdlIGNvdW50PXtjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwfSBzaG93WmVybyAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5Db2xsZWN0aW9uVGFiVGl0bGUucHJvcFR5cGVzID0ge1xuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29sbGVjdGlvbjogUHJvcFR5cGVzLmFycmF5LFxufTtcblxuZnVuY3Rpb24gQ29sdW1uQ29sbGVjdGlvblRhYmxlKHtcbiAgY29sdW1ucyxcbiAgZGF0YXNvdXJjZSxcbiAgb25Db2x1bW5zQ2hhbmdlLFxuICBvbkRhdGFzb3VyY2VDaGFuZ2UsXG4gIGVkaXRhYmxlQ29sdW1uTmFtZSxcbiAgc2hvd0V4cHJlc3Npb24sXG4gIGFsbG93QWRkSXRlbSxcbiAgYWxsb3dFZGl0RGF0YVR5cGUsXG4gIGl0ZW1HZW5lcmF0b3IsXG4gIGNvbHVtbkxhYmVsVG9vbHRpcHMsXG59KSB7XG4gIHJldHVybiAoXG4gICAgPENvbGxlY3Rpb25UYWJsZVxuICAgICAgdGFibGVDb2x1bW5zPXtcbiAgICAgICAgaXNGZWF0dXJlRW5hYmxlZChGZWF0dXJlRmxhZy5FTkFCTEVfQURWQU5DRURfREFUQV9UWVBFUylcbiAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgJ2NvbHVtbl9uYW1lJyxcbiAgICAgICAgICAgICAgJ2FkdmFuY2VkX2RhdGFfdHlwZScsXG4gICAgICAgICAgICAgICd0eXBlJyxcbiAgICAgICAgICAgICAgJ2lzX2R0dG0nLFxuICAgICAgICAgICAgICAnbWFpbl9kdHRtX2NvbCcsXG4gICAgICAgICAgICAgICdmaWx0ZXJhYmxlJyxcbiAgICAgICAgICAgICAgJ2dyb3VwYnknLFxuICAgICAgICAgICAgXVxuICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAnY29sdW1uX25hbWUnLFxuICAgICAgICAgICAgICAndHlwZScsXG4gICAgICAgICAgICAgICdpc19kdHRtJyxcbiAgICAgICAgICAgICAgJ21haW5fZHR0bV9jb2wnLFxuICAgICAgICAgICAgICAnZmlsdGVyYWJsZScsXG4gICAgICAgICAgICAgICdncm91cGJ5JyxcbiAgICAgICAgICAgIF1cbiAgICAgIH1cbiAgICAgIHNvcnRDb2x1bW5zPXtcbiAgICAgICAgaXNGZWF0dXJlRW5hYmxlZChGZWF0dXJlRmxhZy5FTkFCTEVfQURWQU5DRURfREFUQV9UWVBFUylcbiAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgJ2NvbHVtbl9uYW1lJyxcbiAgICAgICAgICAgICAgJ2FkdmFuY2VkX2RhdGFfdHlwZScsXG4gICAgICAgICAgICAgICd0eXBlJyxcbiAgICAgICAgICAgICAgJ2lzX2R0dG0nLFxuICAgICAgICAgICAgICAnbWFpbl9kdHRtX2NvbCcsXG4gICAgICAgICAgICAgICdmaWx0ZXJhYmxlJyxcbiAgICAgICAgICAgICAgJ2dyb3VwYnknLFxuICAgICAgICAgICAgXVxuICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAnY29sdW1uX25hbWUnLFxuICAgICAgICAgICAgICAndHlwZScsXG4gICAgICAgICAgICAgICdpc19kdHRtJyxcbiAgICAgICAgICAgICAgJ21haW5fZHR0bV9jb2wnLFxuICAgICAgICAgICAgICAnZmlsdGVyYWJsZScsXG4gICAgICAgICAgICAgICdncm91cGJ5JyxcbiAgICAgICAgICAgIF1cbiAgICAgIH1cbiAgICAgIGFsbG93RGVsZXRlc1xuICAgICAgYWxsb3dBZGRJdGVtPXthbGxvd0FkZEl0ZW19XG4gICAgICBpdGVtR2VuZXJhdG9yPXtpdGVtR2VuZXJhdG9yfVxuICAgICAgY29sbGVjdGlvbj17Y29sdW1uc31cbiAgICAgIGNvbHVtbkxhYmVsVG9vbHRpcHM9e2NvbHVtbkxhYmVsVG9vbHRpcHN9XG4gICAgICBzdGlja3lIZWFkZXJcbiAgICAgIGV4cGFuZEZpZWxkc2V0PXtcbiAgICAgICAgPEZvcm1Db250YWluZXI+XG4gICAgICAgICAgPEZpZWxkc2V0IGNvbXBhY3Q+XG4gICAgICAgICAgICB7c2hvd0V4cHJlc3Npb24gJiYgKFxuICAgICAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgICAgICBmaWVsZEtleT1cImV4cHJlc3Npb25cIlxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdTUUwgZXhwcmVzc2lvbicpfVxuICAgICAgICAgICAgICAgIGNvbnRyb2w9e1xuICAgICAgICAgICAgICAgICAgPFRleHRBcmVhQ29udHJvbFxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZT1cIm1hcmtkb3duXCJcbiAgICAgICAgICAgICAgICAgICAgb2ZmZXJFZGl0SW5Nb2RhbD17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZT1cInZlcnRpY2FsXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgICBmaWVsZEtleT1cInZlcmJvc2VfbmFtZVwiXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdMYWJlbCcpfVxuICAgICAgICAgICAgICBjb250cm9sPXtcbiAgICAgICAgICAgICAgICA8VGV4dENvbnRyb2xcbiAgICAgICAgICAgICAgICAgIGNvbnRyb2xJZD1cInZlcmJvc2VfbmFtZVwiXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dCgnTGFiZWwnKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEZpZWxkXG4gICAgICAgICAgICAgIGZpZWxkS2V5PVwiZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICBsYWJlbD17dCgnRGVzY3JpcHRpb24nKX1cbiAgICAgICAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgICAgICAgPFRleHRDb250cm9sXG4gICAgICAgICAgICAgICAgICBjb250cm9sSWQ9XCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dCgnRGVzY3JpcHRpb24nKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge2FsbG93RWRpdERhdGFUeXBlICYmIChcbiAgICAgICAgICAgICAgPEZpZWxkXG4gICAgICAgICAgICAgICAgZmllbGRLZXk9XCJ0eXBlXCJcbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnRGF0YSB0eXBlJyl9XG4gICAgICAgICAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgICAgIGFyaWFMYWJlbD17dCgnRGF0YSB0eXBlJyl9XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e0RBVEFfVFlQRVN9XG4gICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0eXBlXCJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dOZXdPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIGFsbG93Q2xlYXJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtpc0ZlYXR1cmVFbmFibGVkKEZlYXR1cmVGbGFnLkVOQUJMRV9BRFZBTkNFRF9EQVRBX1RZUEVTKSA/IChcbiAgICAgICAgICAgICAgPEZpZWxkXG4gICAgICAgICAgICAgICAgZmllbGRLZXk9XCJhZHZhbmNlZF9kYXRhX3R5cGVcIlxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdBZHZhbmNlZCBkYXRhIHR5cGUnKX1cbiAgICAgICAgICAgICAgICBjb250cm9sPXtcbiAgICAgICAgICAgICAgICAgIDxUZXh0Q29udHJvbFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sSWQ9XCJhZHZhbmNlZF9kYXRhX3R5cGVcIlxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dCgnQWR2YW5jZWQgRGF0YSB0eXBlJyl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDw+PC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPEZpZWxkXG4gICAgICAgICAgICAgIGZpZWxkS2V5PVwicHl0aG9uX2RhdGVfZm9ybWF0XCJcbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ0RhdGV0aW1lIGZvcm1hdCcpfVxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbj17XG4gICAgICAgICAgICAgICAgLyogTm90ZSB0aGUgZnJhZ21lbnRlZCB0cmFuc2xhdGlvbnMgbWF5IG5vdCB3b3JrLiAqL1xuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICB7dCgnVGhlIHBhdHRlcm4gb2YgdGltZXN0YW1wIGZvcm1hdC4gRm9yIHN0cmluZ3MgdXNlICcpfVxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5weXRob24ub3JnLzIvbGlicmFyeS9kYXRldGltZS5odG1sI3N0cmZ0aW1lLXN0cnB0aW1lLWJlaGF2aW9yXCI+XG4gICAgICAgICAgICAgICAgICAgIHt0KCdQeXRob24gZGF0ZXRpbWUgc3RyaW5nIHBhdHRlcm4nKX1cbiAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgIHt0KCcgZXhwcmVzc2lvbiB3aGljaCBuZWVkcyB0byBhZGhlcmUgdG8gdGhlICcpfVxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxXCI+XG4gICAgICAgICAgICAgICAgICAgIHt0KCdJU08gODYwMScpfVxuICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAge3QoYCBzdGFuZGFyZCB0byBlbnN1cmUgdGhhdCB0aGUgbGV4aWNvZ3JhcGhpY2FsIG9yZGVyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgY29pbmNpZGVzIHdpdGggdGhlIGNocm9ub2xvZ2ljYWwgb3JkZXJpbmcuIElmIHRoZVxuICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcCBmb3JtYXQgZG9lcyBub3QgYWRoZXJlIHRvIHRoZSBJU08gODYwMSBzdGFuZGFyZFxuICAgICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIG5lZWQgdG8gZGVmaW5lIGFuIGV4cHJlc3Npb24gYW5kIHR5cGUgZm9yXG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtaW5nIHRoZSBzdHJpbmcgaW50byBhIGRhdGUgb3IgdGltZXN0YW1wLiBOb3RlXG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5IHRpbWUgem9uZXMgYXJlIG5vdCBzdXBwb3J0ZWQuIElmIHRpbWUgaXMgc3RvcmVkXG4gICAgICAgICAgICAgICAgICAgICAgaW4gZXBvY2ggZm9ybWF0LCBwdXQgXFxgZXBvY2hfc1xcYCBvciBcXGBlcG9jaF9tc1xcYC4gSWYgbm8gcGF0dGVyblxuICAgICAgICAgICAgICAgICAgICAgIGlzIHNwZWNpZmllZCB3ZSBmYWxsIGJhY2sgdG8gdXNpbmcgdGhlIG9wdGlvbmFsIGRlZmF1bHRzIG9uIGEgcGVyXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UvY29sdW1uIG5hbWUgbGV2ZWwgdmlhIHRoZSBleHRyYSBwYXJhbWV0ZXIuYCl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgICAgICAgPFRleHRDb250cm9sXG4gICAgICAgICAgICAgICAgICBjb250cm9sSWQ9XCJweXRob25fZGF0ZV9mb3JtYXRcIlxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCIlWS8lbS8lZFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgICBmaWVsZEtleT1cImNlcnRpZmllZF9ieVwiXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdDZXJ0aWZpZWQgQnknKX1cbiAgICAgICAgICAgICAgZGVzY3JpcHRpb249e3QoJ1BlcnNvbiBvciBncm91cCB0aGF0IGhhcyBjZXJ0aWZpZWQgdGhpcyBtZXRyaWMnKX1cbiAgICAgICAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgICAgICAgPFRleHRDb250cm9sXG4gICAgICAgICAgICAgICAgICBjb250cm9sSWQ9XCJjZXJ0aWZpZWRcIlxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3QoJ0NlcnRpZmllZCBieScpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgICAgZmllbGRLZXk9XCJjZXJ0aWZpY2F0aW9uX2RldGFpbHNcIlxuICAgICAgICAgICAgICBsYWJlbD17dCgnQ2VydGlmaWNhdGlvbiBkZXRhaWxzJyl9XG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXt0KCdEZXRhaWxzIG9mIHRoZSBjZXJ0aWZpY2F0aW9uJyl9XG4gICAgICAgICAgICAgIGNvbnRyb2w9e1xuICAgICAgICAgICAgICAgIDxUZXh0Q29udHJvbFxuICAgICAgICAgICAgICAgICAgY29udHJvbElkPVwiY2VydGlmaWNhdGlvbkRldGFpbHNcIlxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3QoJ0NlcnRpZmljYXRpb24gZGV0YWlscycpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9GaWVsZHNldD5cbiAgICAgICAgPC9Gb3JtQ29udGFpbmVyPlxuICAgICAgfVxuICAgICAgY29sdW1uTGFiZWxzPXtcbiAgICAgICAgaXNGZWF0dXJlRW5hYmxlZChGZWF0dXJlRmxhZy5FTkFCTEVfQURWQU5DRURfREFUQV9UWVBFUylcbiAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgY29sdW1uX25hbWU6IHQoJ0NvbHVtbicpLFxuICAgICAgICAgICAgICBhZHZhbmNlZF9kYXRhX3R5cGU6IHQoJ0FkdmFuY2VkIGRhdGEgdHlwZScpLFxuICAgICAgICAgICAgICB0eXBlOiB0KCdEYXRhIHR5cGUnKSxcbiAgICAgICAgICAgICAgZ3JvdXBieTogdCgnSXMgZGltZW5zaW9uJyksXG4gICAgICAgICAgICAgIGlzX2R0dG06IHQoJ0lzIHRlbXBvcmFsJyksXG4gICAgICAgICAgICAgIG1haW5fZHR0bV9jb2w6IHQoJ0RlZmF1bHQgZGF0ZXRpbWUnKSxcbiAgICAgICAgICAgICAgZmlsdGVyYWJsZTogdCgnSXMgZmlsdGVyYWJsZScpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgICBjb2x1bW5fbmFtZTogdCgnQ29sdW1uJyksXG4gICAgICAgICAgICAgIHR5cGU6IHQoJ0RhdGEgdHlwZScpLFxuICAgICAgICAgICAgICBncm91cGJ5OiB0KCdJcyBkaW1lbnNpb24nKSxcbiAgICAgICAgICAgICAgaXNfZHR0bTogdCgnSXMgdGVtcG9yYWwnKSxcbiAgICAgICAgICAgICAgbWFpbl9kdHRtX2NvbDogdCgnRGVmYXVsdCBkYXRldGltZScpLFxuICAgICAgICAgICAgICBmaWx0ZXJhYmxlOiB0KCdJcyBmaWx0ZXJhYmxlJyksXG4gICAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBvbkNoYW5nZT17b25Db2x1bW5zQ2hhbmdlfVxuICAgICAgaXRlbVJlbmRlcmVycz17XG4gICAgICAgIGlzRmVhdHVyZUVuYWJsZWQoRmVhdHVyZUZsYWcuRU5BQkxFX0FEVkFOQ0VEX0RBVEFfVFlQRVMpXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIGNvbHVtbl9uYW1lOiAodiwgb25JdGVtQ2hhbmdlLCBfLCByZWNvcmQpID0+XG4gICAgICAgICAgICAgICAgZWRpdGFibGVDb2x1bW5OYW1lID8gKFxuICAgICAgICAgICAgICAgICAgPFN0eWxlZExhYmVsV3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAge3JlY29yZC5pc19jZXJ0aWZpZWQgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgIDxDZXJ0aWZpZWRCYWRnZVxuICAgICAgICAgICAgICAgICAgICAgICAgY2VydGlmaWVkQnk9e3JlY29yZC5jZXJ0aWZpZWRfYnl9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzPXtyZWNvcmQuY2VydGlmaWNhdGlvbl9kZXRhaWxzfVxuICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDxFZGl0YWJsZVRpdGxlXG4gICAgICAgICAgICAgICAgICAgICAgY2FuRWRpdFxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXt2fVxuICAgICAgICAgICAgICAgICAgICAgIG9uU2F2ZVRpdGxlPXtvbkl0ZW1DaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L1N0eWxlZExhYmVsV3JhcHBlcj5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgPFN0eWxlZExhYmVsV3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAge3JlY29yZC5pc19jZXJ0aWZpZWQgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgIDxDZXJ0aWZpZWRCYWRnZVxuICAgICAgICAgICAgICAgICAgICAgICAgY2VydGlmaWVkQnk9e3JlY29yZC5jZXJ0aWZpZWRfYnl9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzPXtyZWNvcmQuY2VydGlmaWNhdGlvbl9kZXRhaWxzfVxuICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIHt2fVxuICAgICAgICAgICAgICAgICAgPC9TdHlsZWRMYWJlbFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgbWFpbl9kdHRtX2NvbDogKHZhbHVlLCBfb25JdGVtQ2hhbmdlLCBfbGFiZWwsIHJlY29yZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBkYXRhc291cmNlLm1haW5fZHR0bV9jb2wgPT09IHJlY29yZC5jb2x1bW5fbmFtZTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNhYmxlZCA9ICFjb2x1bW5zLmZpbmQoXG4gICAgICAgICAgICAgICAgICBjb2x1bW4gPT4gY29sdW1uLmNvbHVtbl9uYW1lID09PSByZWNvcmQuY29sdW1uX25hbWUsXG4gICAgICAgICAgICAgICAgKS5pc19kdHRtO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8UmFkaW9cbiAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0PXtgcmFkaW8tZGVmYXVsdC1kdHRtLSR7cmVjb3JkLmNvbHVtbl9uYW1lfWB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2NoZWNrZWR9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eygpID0+XG4gICAgICAgICAgICAgICAgICAgICAgb25EYXRhc291cmNlQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRhdGFzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluX2R0dG1fY29sOiByZWNvcmQuY29sdW1uX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB0eXBlOiBkID0+IChkID8gPExhYmVsPntkfTwvTGFiZWw+IDogbnVsbCksXG4gICAgICAgICAgICAgIGFkdmFuY2VkX2RhdGFfdHlwZTogZCA9PiAoXG4gICAgICAgICAgICAgICAgPExhYmVsIG9uQ2hhbmdlPXtvbkNvbHVtbnNDaGFuZ2V9PntkfTwvTGFiZWw+XG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIGlzX2R0dG06IGNoZWNrYm94R2VuZXJhdG9yLFxuICAgICAgICAgICAgICBmaWx0ZXJhYmxlOiBjaGVja2JveEdlbmVyYXRvcixcbiAgICAgICAgICAgICAgZ3JvdXBieTogY2hlY2tib3hHZW5lcmF0b3IsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiB7XG4gICAgICAgICAgICAgIGNvbHVtbl9uYW1lOiAodiwgb25JdGVtQ2hhbmdlLCBfLCByZWNvcmQpID0+XG4gICAgICAgICAgICAgICAgZWRpdGFibGVDb2x1bW5OYW1lID8gKFxuICAgICAgICAgICAgICAgICAgPFN0eWxlZExhYmVsV3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAge3JlY29yZC5pc19jZXJ0aWZpZWQgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgIDxDZXJ0aWZpZWRCYWRnZVxuICAgICAgICAgICAgICAgICAgICAgICAgY2VydGlmaWVkQnk9e3JlY29yZC5jZXJ0aWZpZWRfYnl9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzPXtyZWNvcmQuY2VydGlmaWNhdGlvbl9kZXRhaWxzfVxuICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0Q29udHJvbCB2YWx1ZT17dn0gb25DaGFuZ2U9e29uSXRlbUNoYW5nZX0gLz5cbiAgICAgICAgICAgICAgICAgIDwvU3R5bGVkTGFiZWxXcmFwcGVyPlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICA8U3R5bGVkTGFiZWxXcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICB7cmVjb3JkLmlzX2NlcnRpZmllZCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPENlcnRpZmllZEJhZGdlXG4gICAgICAgICAgICAgICAgICAgICAgICBjZXJ0aWZpZWRCeT17cmVjb3JkLmNlcnRpZmllZF9ieX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM9e3JlY29yZC5jZXJ0aWZpY2F0aW9uX2RldGFpbHN9XG4gICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAge3Z9XG4gICAgICAgICAgICAgICAgICA8L1N0eWxlZExhYmVsV3JhcHBlcj5cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBtYWluX2R0dG1fY29sOiAodmFsdWUsIF9vbkl0ZW1DaGFuZ2UsIF9sYWJlbCwgcmVjb3JkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IGRhdGFzb3VyY2UubWFpbl9kdHRtX2NvbCA9PT0gcmVjb3JkLmNvbHVtbl9uYW1lO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc2FibGVkID0gIWNvbHVtbnMuZmluZChcbiAgICAgICAgICAgICAgICAgIGNvbHVtbiA9PiBjb2x1bW4uY29sdW1uX25hbWUgPT09IHJlY29yZC5jb2x1bW5fbmFtZSxcbiAgICAgICAgICAgICAgICApLmlzX2R0dG07XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDxSYWRpb1xuICAgICAgICAgICAgICAgICAgICBkYXRhLXRlc3Q9e2ByYWRpby1kZWZhdWx0LWR0dG0tJHtyZWNvcmQuY29sdW1uX25hbWV9YH1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICBvbkRhdGFzb3VyY2VDaGFuZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZGF0YXNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5fZHR0bV9jb2w6IHJlY29yZC5jb2x1bW5fbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHR5cGU6IGQgPT4gKGQgPyA8TGFiZWw+e2R9PC9MYWJlbD4gOiBudWxsKSxcbiAgICAgICAgICAgICAgaXNfZHR0bTogY2hlY2tib3hHZW5lcmF0b3IsXG4gICAgICAgICAgICAgIGZpbHRlcmFibGU6IGNoZWNrYm94R2VuZXJhdG9yLFxuICAgICAgICAgICAgICBncm91cGJ5OiBjaGVja2JveEdlbmVyYXRvcixcbiAgICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAvPlxuICApO1xufVxuQ29sdW1uQ29sbGVjdGlvblRhYmxlLnByb3BUeXBlcyA9IHtcbiAgY29sdW1uczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIGRhdGFzb3VyY2U6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgb25Db2x1bW5zQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkRhdGFzb3VyY2VDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGVkaXRhYmxlQ29sdW1uTmFtZTogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dFeHByZXNzaW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWxsb3dBZGRJdGVtOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWxsb3dFZGl0RGF0YVR5cGU6IFByb3BUeXBlcy5ib29sLFxuICBpdGVtR2VuZXJhdG9yOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5Db2x1bW5Db2xsZWN0aW9uVGFibGUuZGVmYXVsdFByb3BzID0ge1xuICBlZGl0YWJsZUNvbHVtbk5hbWU6IGZhbHNlLFxuICBzaG93RXhwcmVzc2lvbjogZmFsc2UsXG4gIGFsbG93QWRkSXRlbTogZmFsc2UsXG4gIGFsbG93RWRpdERhdGFUeXBlOiBmYWxzZSxcbiAgaXRlbUdlbmVyYXRvcjogKCkgPT4gKHtcbiAgICBjb2x1bW5fbmFtZTogdCgnPG5ldyBjb2x1bW4+JyksXG4gICAgZmlsdGVyYWJsZTogdHJ1ZSxcbiAgICBncm91cGJ5OiB0cnVlLFxuICB9KSxcbn07XG5cbmZ1bmN0aW9uIFN0YWNrZWRGaWVsZCh7IGxhYmVsLCBmb3JtRWxlbWVudCB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxzdHJvbmc+e2xhYmVsfTwvc3Ryb25nPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2Pntmb3JtRWxlbWVudH08L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuU3RhY2tlZEZpZWxkLnByb3BUeXBlcyA9IHtcbiAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZvcm1FbGVtZW50OiBQcm9wVHlwZXMubm9kZSxcbn07XG5cbmZ1bmN0aW9uIEZvcm1Db250YWluZXIoeyBjaGlsZHJlbiB9KSB7XG4gIHJldHVybiA8Q2FyZCBwYWRkZWQ+e2NoaWxkcmVufTwvQ2FyZD47XG59XG5cbkZvcm1Db250YWluZXIucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG59O1xuXG5jb25zdCBwcm9wVHlwZXMgPSB7XG4gIGRhdGFzb3VyY2U6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBhZGRTdWNjZXNzVG9hc3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGFkZERhbmdlclRvYXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzZXRJc0VkaXRpbmc6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICBvbkNoYW5nZTogKCkgPT4ge30sXG4gIHNldElzRWRpdGluZzogKCkgPT4ge30sXG59O1xuXG5mdW5jdGlvbiBPd25lcnNTZWxlY3Rvcih7IGRhdGFzb3VyY2UsIG9uQ2hhbmdlIH0pIHtcbiAgY29uc3QgbG9hZE9wdGlvbnMgPSB1c2VDYWxsYmFjaygoc2VhcmNoID0gJycsIHBhZ2UsIHBhZ2VTaXplKSA9PiB7XG4gICAgY29uc3QgcXVlcnkgPSByaXNvbi5lbmNvZGUoeyBmaWx0ZXI6IHNlYXJjaCwgcGFnZSwgcGFnZV9zaXplOiBwYWdlU2l6ZSB9KTtcbiAgICByZXR1cm4gU3VwZXJzZXRDbGllbnQuZ2V0KHtcbiAgICAgIGVuZHBvaW50OiBgL2FwaS92MS9kYXRhc2V0L3JlbGF0ZWQvb3duZXJzP3E9JHtxdWVyeX1gLFxuICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4gKHtcbiAgICAgIGRhdGE6IHJlc3BvbnNlLmpzb24ucmVzdWx0XG4gICAgICAgIC5maWx0ZXIoaXRlbSA9PiBpdGVtLmV4dHJhLmFjdGl2ZSlcbiAgICAgICAgLm1hcChpdGVtID0+ICh7XG4gICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgbGFiZWw6IGl0ZW0udGV4dCxcbiAgICAgICAgfSkpLFxuICAgICAgdG90YWxDb3VudDogcmVzcG9uc2UuanNvbi5jb3VudCxcbiAgICB9KSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxBc3luY1NlbGVjdFxuICAgICAgYXJpYUxhYmVsPXt0KCdTZWxlY3Qgb3duZXJzJyl9XG4gICAgICBtb2RlPVwibXVsdGlwbGVcIlxuICAgICAgbmFtZT1cIm93bmVyc1wiXG4gICAgICB2YWx1ZT17ZGF0YXNvdXJjZS5vd25lcnN9XG4gICAgICBvcHRpb25zPXtsb2FkT3B0aW9uc31cbiAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgIGhlYWRlcj17PEZvcm1MYWJlbD57dCgnT3duZXJzJyl9PC9Gb3JtTGFiZWw+fVxuICAgICAgYWxsb3dDbGVhclxuICAgIC8+XG4gICk7XG59XG5cbmNsYXNzIERhdGFzb3VyY2VFZGl0b3IgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRhdGFzb3VyY2U6IHtcbiAgICAgICAgLi4ucHJvcHMuZGF0YXNvdXJjZSxcbiAgICAgICAgb3duZXJzOiBwcm9wcy5kYXRhc291cmNlLm93bmVycy5tYXAob3duZXIgPT4gKHtcbiAgICAgICAgICB2YWx1ZTogb3duZXIudmFsdWUgfHwgb3duZXIuaWQsXG4gICAgICAgICAgbGFiZWw6IG93bmVyLmxhYmVsIHx8IGAke293bmVyLmZpcnN0X25hbWV9ICR7b3duZXIubGFzdF9uYW1lfWAsXG4gICAgICAgIH0pKSxcbiAgICAgICAgbWV0cmljczogcHJvcHMuZGF0YXNvdXJjZS5tZXRyaWNzPy5tYXAobWV0cmljID0+IHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjZXJ0aWZpZWRfYnk6IGNlcnRpZmllZEJ5TWV0cmljLFxuICAgICAgICAgICAgY2VydGlmaWNhdGlvbl9kZXRhaWxzOiBjZXJ0aWZpY2F0aW9uRGV0YWlscyxcbiAgICAgICAgICB9ID0gbWV0cmljO1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNlcnRpZmljYXRpb246IHsgZGV0YWlscywgY2VydGlmaWVkX2J5OiBjZXJ0aWZpZWRCeSB9ID0ge30sXG4gICAgICAgICAgICB3YXJuaW5nX21hcmtkb3duOiB3YXJuaW5nTWFya2Rvd24sXG4gICAgICAgICAgfSA9IEpTT04ucGFyc2UobWV0cmljLmV4dHJhIHx8ICd7fScpIHx8IHt9O1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5tZXRyaWMsXG4gICAgICAgICAgICBjZXJ0aWZpY2F0aW9uX2RldGFpbHM6IGNlcnRpZmljYXRpb25EZXRhaWxzIHx8IGRldGFpbHMsXG4gICAgICAgICAgICB3YXJuaW5nX21hcmtkb3duOiB3YXJuaW5nTWFya2Rvd24gfHwgJycsXG4gICAgICAgICAgICBjZXJ0aWZpZWRfYnk6IGNlcnRpZmllZEJ5IHx8IGNlcnRpZmllZEJ5TWV0cmljLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICAgIGVycm9yczogW10sXG4gICAgICBpc1NxbGE6XG4gICAgICAgIHByb3BzLmRhdGFzb3VyY2UuZGF0YXNvdXJjZV90eXBlID09PSAndGFibGUnIHx8XG4gICAgICAgIHByb3BzLmRhdGFzb3VyY2UudHlwZSA9PT0gJ3RhYmxlJyxcbiAgICAgIGlzRWRpdE1vZGU6IGZhbHNlLFxuICAgICAgZGF0YWJhc2VDb2x1bW5zOiBwcm9wcy5kYXRhc291cmNlLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhY29sLmV4cHJlc3Npb24pLFxuICAgICAgY2FsY3VsYXRlZENvbHVtbnM6IHByb3BzLmRhdGFzb3VyY2UuY29sdW1ucy5maWx0ZXIoXG4gICAgICAgIGNvbCA9PiAhIWNvbC5leHByZXNzaW9uLFxuICAgICAgKSxcbiAgICAgIG1ldGFkYXRhTG9hZGluZzogZmFsc2UsXG4gICAgICBhY3RpdmVUYWJLZXk6IDAsXG4gICAgICBkYXRhc291cmNlVHlwZTogcHJvcHMuZGF0YXNvdXJjZS5zcWxcbiAgICAgICAgPyBEQVRBU09VUkNFX1RZUEVTLnZpcnR1YWwua2V5XG4gICAgICAgIDogREFUQVNPVVJDRV9UWVBFUy5waHlzaWNhbC5rZXksXG4gICAgfTtcblxuICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNoYW5nZUVkaXRNb2RlID0gdGhpcy5vbkNoYW5nZUVkaXRNb2RlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkRhdGFzb3VyY2VQcm9wQ2hhbmdlID0gdGhpcy5vbkRhdGFzb3VyY2VQcm9wQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkRhdGFzb3VyY2VDaGFuZ2UgPSB0aGlzLm9uRGF0YXNvdXJjZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMudGFibGVDaGFuZ2VBbmRTeW5jTWV0YWRhdGEgPVxuICAgICAgdGhpcy50YWJsZUNoYW5nZUFuZFN5bmNNZXRhZGF0YS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3luY01ldGFkYXRhID0gdGhpcy5zeW5jTWV0YWRhdGEuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNldENvbHVtbnMgPSB0aGlzLnNldENvbHVtbnMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnZhbGlkYXRlQW5kQ2hhbmdlID0gdGhpcy52YWxpZGF0ZUFuZENoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlVGFiU2VsZWN0ID0gdGhpcy5oYW5kbGVUYWJTZWxlY3QuYmluZCh0aGlzKTtcbiAgICB0aGlzLmN1cnJlbmNpZXMgPSBlbnN1cmVJc0FycmF5KHByb3BzLmN1cnJlbmNpZXMpLm1hcChjdXJyZW5jeUNvZGUgPT4gKHtcbiAgICAgIHZhbHVlOiBjdXJyZW5jeUNvZGUsXG4gICAgICBsYWJlbDogYCR7Z2V0Q3VycmVuY3lTeW1ib2woe1xuICAgICAgICBzeW1ib2w6IGN1cnJlbmN5Q29kZSxcbiAgICAgIH0pfSAoJHtjdXJyZW5jeUNvZGV9KWAsXG4gICAgfSkpO1xuICB9XG5cbiAgb25DaGFuZ2UoKSB7XG4gICAgLy8gRW1wdHlpbmcgU1FMIGlmIFwiUGh5c2ljYWxcIiByYWRpbyBidXR0b24gaXMgc2VsZWN0ZWRcbiAgICAvLyBDdXJyZW50bHkgdGhlIGxvZ2ljIHRvIGtub3cgd2hldGhlciB0aGUgc291cmNlIGlzXG4gICAgLy8gcGh5c2ljYWwgb3IgdmlydHVhbCBpcyBiYXNlZCBvbiB3aGV0aGVyIFNRTCBpcyBlbXB0eSBvciBub3QuXG4gICAgY29uc3QgeyBkYXRhc291cmNlVHlwZSwgZGF0YXNvdXJjZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBzcWwgPVxuICAgICAgZGF0YXNvdXJjZVR5cGUgPT09IERBVEFTT1VSQ0VfVFlQRVMucGh5c2ljYWwua2V5ID8gJycgOiBkYXRhc291cmNlLnNxbDtcbiAgICBjb25zdCBuZXdEYXRhc291cmNlID0ge1xuICAgICAgLi4udGhpcy5zdGF0ZS5kYXRhc291cmNlLFxuICAgICAgc3FsLFxuICAgICAgY29sdW1uczogWy4uLnRoaXMuc3RhdGUuZGF0YWJhc2VDb2x1bW5zLCAuLi50aGlzLnN0YXRlLmNhbGN1bGF0ZWRDb2x1bW5zXSxcbiAgICB9O1xuICAgIHRoaXMucHJvcHMub25DaGFuZ2UobmV3RGF0YXNvdXJjZSwgdGhpcy5zdGF0ZS5lcnJvcnMpO1xuICB9XG5cbiAgb25DaGFuZ2VFZGl0TW9kZSgpIHtcbiAgICB0aGlzLnByb3BzLnNldElzRWRpdGluZyghdGhpcy5zdGF0ZS5pc0VkaXRNb2RlKTtcbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiAoeyBpc0VkaXRNb2RlOiAhcHJldlN0YXRlLmlzRWRpdE1vZGUgfSkpO1xuICB9XG5cbiAgb25EYXRhc291cmNlQ2hhbmdlKGRhdGFzb3VyY2UsIGNhbGxiYWNrID0gdGhpcy52YWxpZGF0ZUFuZENoYW5nZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBkYXRhc291cmNlIH0sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIG9uRGF0YXNvdXJjZVByb3BDaGFuZ2UoYXR0ciwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuOyAvLyBpZiB2YWx1ZSBpcyB1bmRlZmluZWQgZG8gbm90IHVwZGF0ZSBzdGF0ZVxuICAgIGNvbnN0IGRhdGFzb3VyY2UgPSB7IC4uLnRoaXMuc3RhdGUuZGF0YXNvdXJjZSwgW2F0dHJdOiB2YWx1ZSB9O1xuICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICBwcmV2U3RhdGUgPT4gKHtcbiAgICAgICAgZGF0YXNvdXJjZTogeyAuLi5wcmV2U3RhdGUuZGF0YXNvdXJjZSwgW2F0dHJdOiB2YWx1ZSB9LFxuICAgICAgfSksXG4gICAgICBhdHRyID09PSAndGFibGVfbmFtZSdcbiAgICAgICAgPyB0aGlzLm9uRGF0YXNvdXJjZUNoYW5nZShkYXRhc291cmNlLCB0aGlzLnRhYmxlQ2hhbmdlQW5kU3luY01ldGFkYXRhKVxuICAgICAgICA6IHRoaXMub25EYXRhc291cmNlQ2hhbmdlKGRhdGFzb3VyY2UsIHRoaXMudmFsaWRhdGVBbmRDaGFuZ2UpLFxuICAgICk7XG4gIH1cblxuICBvbkRhdGFzb3VyY2VUeXBlQ2hhbmdlKGRhdGFzb3VyY2VUeXBlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRhdGFzb3VyY2VUeXBlIH0pO1xuICB9XG5cbiAgc2V0Q29sdW1ucyhvYmopIHtcbiAgICAvLyB1cGRhdGUgY2FsY3VsYXRlZENvbHVtbnMgb3IgZGF0YWJhc2VDb2x1bW5zXG4gICAgdGhpcy5zZXRTdGF0ZShvYmosIHRoaXMudmFsaWRhdGVBbmRDaGFuZ2UpO1xuICB9XG5cbiAgdmFsaWRhdGVBbmRDaGFuZ2UoKSB7XG4gICAgdGhpcy52YWxpZGF0ZSh0aGlzLm9uQ2hhbmdlKTtcbiAgfVxuXG4gIHRhYmxlQ2hhbmdlQW5kU3luY01ldGFkYXRhKCkge1xuICAgIHRoaXMudmFsaWRhdGUoKCkgPT4ge1xuICAgICAgdGhpcy5zeW5jTWV0YWRhdGEoKTtcbiAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZUNvbHVtbnMoY29scykge1xuICAgIC8vIGNvbHM6IEFycmF5PHtjb2x1bW5fbmFtZTogc3RyaW5nOyBpc19kdHRtOiBib29sZWFuOyB0eXBlOiBzdHJpbmc7fT5cbiAgICBjb25zdCB7IGRhdGFiYXNlQ29sdW1ucyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBkYXRhYmFzZUNvbHVtbk5hbWVzID0gY29scy5tYXAoY29sID0+IGNvbC5jb2x1bW5fbmFtZSk7XG4gICAgY29uc3QgY3VycmVudENvbHMgPSBkYXRhYmFzZUNvbHVtbnMucmVkdWNlKFxuICAgICAgKGFnZywgY29sKSA9PiAoe1xuICAgICAgICAuLi5hZ2csXG4gICAgICAgIFtjb2wuY29sdW1uX25hbWVdOiBjb2wsXG4gICAgICB9KSxcbiAgICAgIHt9LFxuICAgICk7XG4gICAgY29uc3QgZmluYWxDb2x1bW5zID0gW107XG4gICAgY29uc3QgcmVzdWx0cyA9IHtcbiAgICAgIGFkZGVkOiBbXSxcbiAgICAgIG1vZGlmaWVkOiBbXSxcbiAgICAgIHJlbW92ZWQ6IGRhdGFiYXNlQ29sdW1uc1xuICAgICAgICAubWFwKGNvbCA9PiBjb2wuY29sdW1uX25hbWUpXG4gICAgICAgIC5maWx0ZXIoY29sID0+ICFkYXRhYmFzZUNvbHVtbk5hbWVzLmluY2x1ZGVzKGNvbCkpLFxuICAgIH07XG4gICAgY29scy5mb3JFYWNoKGNvbCA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50Q29sID0gY3VycmVudENvbHNbY29sLmNvbHVtbl9uYW1lXTtcbiAgICAgIGlmICghY3VycmVudENvbCkge1xuICAgICAgICAvLyBuZXcgY29sdW1uXG4gICAgICAgIGZpbmFsQ29sdW1ucy5wdXNoKHtcbiAgICAgICAgICBpZDogc2hvcnRpZC5nZW5lcmF0ZSgpLFxuICAgICAgICAgIGNvbHVtbl9uYW1lOiBjb2wuY29sdW1uX25hbWUsXG4gICAgICAgICAgdHlwZTogY29sLnR5cGUsXG4gICAgICAgICAgZ3JvdXBieTogdHJ1ZSxcbiAgICAgICAgICBmaWx0ZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGlzX2R0dG06IGNvbC5pc19kdHRtLFxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0cy5hZGRlZC5wdXNoKGNvbC5jb2x1bW5fbmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBjdXJyZW50Q29sLnR5cGUgIT09IGNvbC50eXBlIHx8XG4gICAgICAgICghY3VycmVudENvbC5pc19kdHRtICYmIGNvbC5pc19kdHRtKVxuICAgICAgKSB7XG4gICAgICAgIC8vIG1vZGlmaWVkIGNvbHVtblxuICAgICAgICBmaW5hbENvbHVtbnMucHVzaCh7XG4gICAgICAgICAgLi4uY3VycmVudENvbCxcbiAgICAgICAgICB0eXBlOiBjb2wudHlwZSxcbiAgICAgICAgICBpc19kdHRtOiBjdXJyZW50Q29sLmlzX2R0dG0gfHwgY29sLmlzX2R0dG0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHRzLm1vZGlmaWVkLnB1c2goY29sLmNvbHVtbl9uYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHVuY2hhbmdlZFxuICAgICAgICBmaW5hbENvbHVtbnMucHVzaChjdXJyZW50Q29sKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoXG4gICAgICByZXN1bHRzLmFkZGVkLmxlbmd0aCB8fFxuICAgICAgcmVzdWx0cy5tb2RpZmllZC5sZW5ndGggfHxcbiAgICAgIHJlc3VsdHMucmVtb3ZlZC5sZW5ndGhcbiAgICApIHtcbiAgICAgIHRoaXMuc2V0Q29sdW1ucyh7IGRhdGFiYXNlQ29sdW1uczogZmluYWxDb2x1bW5zIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIHN5bmNNZXRhZGF0YSgpIHtcbiAgICBjb25zdCB7IGRhdGFzb3VyY2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgZGF0YXNvdXJjZV90eXBlOiBkYXRhc291cmNlLnR5cGUgfHwgZGF0YXNvdXJjZS5kYXRhc291cmNlX3R5cGUsXG4gICAgICBkYXRhYmFzZV9uYW1lOlxuICAgICAgICBkYXRhc291cmNlLmRhdGFiYXNlLmRhdGFiYXNlX25hbWUgfHwgZGF0YXNvdXJjZS5kYXRhYmFzZS5uYW1lLFxuICAgICAgc2NoZW1hX25hbWU6IGRhdGFzb3VyY2Uuc2NoZW1hLFxuICAgICAgdGFibGVfbmFtZTogZGF0YXNvdXJjZS50YWJsZV9uYW1lLFxuICAgICAgbm9ybWFsaXplX2NvbHVtbnM6IGRhdGFzb3VyY2Uubm9ybWFsaXplX2NvbHVtbnMsXG4gICAgICBhbHdheXNfZmlsdGVyX21haW5fZHR0bTogZGF0YXNvdXJjZS5hbHdheXNfZmlsdGVyX21haW5fZHR0bSxcbiAgICB9O1xuICAgIE9iamVjdC5lbnRyaWVzKHBhcmFtcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAvLyByaXNvbiBjYW4ndCBlbmNvZGUgdGhlIHVuZGVmaW5lZCB2YWx1ZVxuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGFyYW1zW2tleV0gPSBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGVuZHBvaW50ID0gYC9kYXRhc291cmNlL2V4dGVybmFsX21ldGFkYXRhX2J5X25hbWUvP3E9JHtyaXNvbi5lbmNvZGVfdXJpKFxuICAgICAgcGFyYW1zLFxuICAgICl9YDtcbiAgICB0aGlzLnNldFN0YXRlKHsgbWV0YWRhdGFMb2FkaW5nOiB0cnVlIH0pO1xuXG4gICAgU3VwZXJzZXRDbGllbnQuZ2V0KHsgZW5kcG9pbnQgfSlcbiAgICAgIC50aGVuKCh7IGpzb24gfSkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHRzID0gdGhpcy51cGRhdGVDb2x1bW5zKGpzb24pO1xuICAgICAgICBpZiAocmVzdWx0cy5tb2RpZmllZC5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnByb3BzLmFkZFN1Y2Nlc3NUb2FzdChcbiAgICAgICAgICAgIHQoJ01vZGlmaWVkIGNvbHVtbnM6ICVzJywgcmVzdWx0cy5tb2RpZmllZC5qb2luKCcsICcpKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHRzLnJlbW92ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5hZGRTdWNjZXNzVG9hc3QoXG4gICAgICAgICAgICB0KCdSZW1vdmVkIGNvbHVtbnM6ICVzJywgcmVzdWx0cy5yZW1vdmVkLmpvaW4oJywgJykpLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdHMuYWRkZWQubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5hZGRTdWNjZXNzVG9hc3QoXG4gICAgICAgICAgICB0KCdOZXcgY29sdW1ucyBhZGRlZDogJXMnLCByZXN1bHRzLmFkZGVkLmpvaW4oJywgJykpLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm9wcy5hZGRTdWNjZXNzVG9hc3QodCgnTWV0YWRhdGEgaGFzIGJlZW4gc3luY2VkJykpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbWV0YWRhdGFMb2FkaW5nOiBmYWxzZSB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2gocmVzcG9uc2UgPT5cbiAgICAgICAgZ2V0Q2xpZW50RXJyb3JPYmplY3QocmVzcG9uc2UpLnRoZW4oKHsgZXJyb3IsIHN0YXR1c1RleHQgfSkgPT4ge1xuICAgICAgICAgIHRoaXMucHJvcHMuYWRkRGFuZ2VyVG9hc3QoXG4gICAgICAgICAgICBlcnJvciB8fCBzdGF0dXNUZXh0IHx8IHQoJ0FuIGVycm9yIGhhcyBvY2N1cnJlZCcpLFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1ldGFkYXRhTG9hZGluZzogZmFsc2UgfSk7XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgfVxuXG4gIGZpbmREdXBsaWNhdGVzKGFyciwgYWNjZXNzb3IpIHtcbiAgICBjb25zdCBzZWVuID0ge307XG4gICAgY29uc3QgZHVwcyA9IFtdO1xuICAgIGFyci5mb3JFYWNoKG9iaiA9PiB7XG4gICAgICBjb25zdCBpdGVtID0gYWNjZXNzb3Iob2JqKTtcbiAgICAgIGlmIChpdGVtIGluIHNlZW4pIHtcbiAgICAgICAgZHVwcy5wdXNoKGl0ZW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VlbltpdGVtXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGR1cHM7XG4gIH1cblxuICB2YWxpZGF0ZShjYWxsYmFjaykge1xuICAgIGxldCBlcnJvcnMgPSBbXTtcbiAgICBsZXQgZHVwcztcbiAgICBjb25zdCB7IGRhdGFzb3VyY2UgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAvLyBMb29raW5nIGZvciBkdXBsaWNhdGUgY29sdW1uX25hbWVcbiAgICBkdXBzID0gdGhpcy5maW5kRHVwbGljYXRlcyhkYXRhc291cmNlLmNvbHVtbnMsIG9iaiA9PiBvYmouY29sdW1uX25hbWUpO1xuICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoXG4gICAgICBkdXBzLm1hcChuYW1lID0+IHQoJ0NvbHVtbiBuYW1lIFslc10gaXMgZHVwbGljYXRlZCcsIG5hbWUpKSxcbiAgICApO1xuXG4gICAgLy8gTG9va2luZyBmb3IgZHVwbGljYXRlIG1ldHJpY19uYW1lXG4gICAgZHVwcyA9IHRoaXMuZmluZER1cGxpY2F0ZXMoZGF0YXNvdXJjZS5tZXRyaWNzLCBvYmogPT4gb2JqLm1ldHJpY19uYW1lKTtcbiAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KFxuICAgICAgZHVwcy5tYXAobmFtZSA9PiB0KCdNZXRyaWMgbmFtZSBbJXNdIGlzIGR1cGxpY2F0ZWQnLCBuYW1lKSksXG4gICAgKTtcblxuICAgIC8vIE1ha2luZyBzdXJlIGNhbGN1bGF0ZWRDb2x1bW5zIGhhdmUgYW4gZXhwcmVzc2lvbiBkZWZpbmVkXG4gICAgY29uc3Qgbm9GaWx0ZXJDYWxjQ29scyA9IHRoaXMuc3RhdGUuY2FsY3VsYXRlZENvbHVtbnMuZmlsdGVyKFxuICAgICAgY29sID0+ICFjb2wuZXhwcmVzc2lvbiAmJiAhY29sLmpzb24sXG4gICAgKTtcbiAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KFxuICAgICAgbm9GaWx0ZXJDYWxjQ29scy5tYXAoY29sID0+XG4gICAgICAgIHQoJ0NhbGN1bGF0ZWQgY29sdW1uIFslc10gcmVxdWlyZXMgYW4gZXhwcmVzc2lvbicsIGNvbC5jb2x1bW5fbmFtZSksXG4gICAgICApLFxuICAgICk7XG5cbiAgICAvLyB2YWxpZGF0ZSBjdXJyZW5jeSBjb2RlXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuc3RhdGUuZGF0YXNvdXJjZS5tZXRyaWNzPy5mb3JFYWNoKFxuICAgICAgICBtZXRyaWMgPT5cbiAgICAgICAgICBtZXRyaWMuY3VycmVuY3k/LnN5bWJvbCAmJlxuICAgICAgICAgIG5ldyBJbnRsLk51bWJlckZvcm1hdCgnZW4tVVMnLCB7XG4gICAgICAgICAgICBzdHlsZTogJ2N1cnJlbmN5JyxcbiAgICAgICAgICAgIGN1cnJlbmN5OiBtZXRyaWMuY3VycmVuY3kuc3ltYm9sLFxuICAgICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoW3QoJ0ludmFsaWQgY3VycmVuY3kgY29kZSBpbiBzYXZlZCBtZXRyaWNzJyldKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JzIH0sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGhhbmRsZVRhYlNlbGVjdChhY3RpdmVUYWJLZXkpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlVGFiS2V5IH0pO1xuICB9XG5cbiAgc29ydE1ldHJpY3MobWV0cmljcykge1xuICAgIHJldHVybiBtZXRyaWNzLnNvcnQoKHsgaWQ6IGEgfSwgeyBpZDogYiB9KSA9PiBiIC0gYSk7XG4gIH1cblxuICByZW5kZXJTZXR0aW5nc0ZpZWxkc2V0KCkge1xuICAgIGNvbnN0IHsgZGF0YXNvdXJjZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPEZpZWxkc2V0XG4gICAgICAgIHRpdGxlPXt0KCdCYXNpYycpfVxuICAgICAgICBpdGVtPXtkYXRhc291cmNlfVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkRhdGFzb3VyY2VDaGFuZ2V9XG4gICAgICA+XG4gICAgICAgIDxGaWVsZFxuICAgICAgICAgIGZpZWxkS2V5PVwiZGVzY3JpcHRpb25cIlxuICAgICAgICAgIGxhYmVsPXt0KCdEZXNjcmlwdGlvbicpfVxuICAgICAgICAgIGNvbnRyb2w9e1xuICAgICAgICAgICAgPFRleHRBcmVhQ29udHJvbFxuICAgICAgICAgICAgICBsYW5ndWFnZT1cIm1hcmtkb3duXCJcbiAgICAgICAgICAgICAgb2ZmZXJFZGl0SW5Nb2RhbD17ZmFsc2V9XG4gICAgICAgICAgICAgIHJlc2l6ZT1cInZlcnRpY2FsXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgfVxuICAgICAgICAvPlxuICAgICAgICA8RmllbGRcbiAgICAgICAgICBmaWVsZEtleT1cImRlZmF1bHRfZW5kcG9pbnRcIlxuICAgICAgICAgIGxhYmVsPXt0KCdEZWZhdWx0IFVSTCcpfVxuICAgICAgICAgIGRlc2NyaXB0aW9uPXt0KFxuICAgICAgICAgICAgJ0RlZmF1bHQgVVJMIHRvIHJlZGlyZWN0IHRvIHdoZW4gYWNjZXNzaW5nIGZyb20gdGhlIGRhdGFzZXQgbGlzdCBwYWdlJyxcbiAgICAgICAgICApfVxuICAgICAgICAgIGNvbnRyb2w9ezxUZXh0Q29udHJvbCBjb250cm9sSWQ9XCJkZWZhdWx0X2VuZHBvaW50XCIgLz59XG4gICAgICAgIC8+XG4gICAgICAgIDxGaWVsZFxuICAgICAgICAgIGlubGluZVxuICAgICAgICAgIGZpZWxkS2V5PVwiZmlsdGVyX3NlbGVjdF9lbmFibGVkXCJcbiAgICAgICAgICBsYWJlbD17dCgnQXV0b2NvbXBsZXRlIGZpbHRlcnMnKX1cbiAgICAgICAgICBkZXNjcmlwdGlvbj17dCgnV2hldGhlciB0byBwb3B1bGF0ZSBhdXRvY29tcGxldGUgZmlsdGVycyBvcHRpb25zJyl9XG4gICAgICAgICAgY29udHJvbD17PENoZWNrYm94Q29udHJvbCAvPn1cbiAgICAgICAgLz5cbiAgICAgICAge3RoaXMuc3RhdGUuaXNTcWxhICYmIChcbiAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgIGZpZWxkS2V5PVwiZmV0Y2hfdmFsdWVzX3ByZWRpY2F0ZVwiXG4gICAgICAgICAgICBsYWJlbD17dCgnQXV0b2NvbXBsZXRlIHF1ZXJ5IHByZWRpY2F0ZScpfVxuICAgICAgICAgICAgZGVzY3JpcHRpb249e3QoXG4gICAgICAgICAgICAgICdXaGVuIHVzaW5nIFwiQXV0b2NvbXBsZXRlIGZpbHRlcnNcIiwgdGhpcyBjYW4gYmUgdXNlZCB0byBpbXByb3ZlIHBlcmZvcm1hbmNlICcgK1xuICAgICAgICAgICAgICAgICdvZiB0aGUgcXVlcnkgZmV0Y2hpbmcgdGhlIHZhbHVlcy4gVXNlIHRoaXMgb3B0aW9uIHRvIGFwcGx5IGEgJyArXG4gICAgICAgICAgICAgICAgJ3ByZWRpY2F0ZSAoV0hFUkUgY2xhdXNlKSB0byB0aGUgcXVlcnkgc2VsZWN0aW5nIHRoZSBkaXN0aW5jdCAnICtcbiAgICAgICAgICAgICAgICAndmFsdWVzIGZyb20gdGhlIHRhYmxlLiBUeXBpY2FsbHkgdGhlIGludGVudCB3b3VsZCBiZSB0byBsaW1pdCB0aGUgc2NhbiAnICtcbiAgICAgICAgICAgICAgICAnYnkgYXBwbHlpbmcgYSByZWxhdGl2ZSB0aW1lIGZpbHRlciBvbiBhIHBhcnRpdGlvbmVkIG9yIGluZGV4ZWQgdGltZS1yZWxhdGVkIGZpZWxkLicsXG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgICAgIDxUZXh0QXJlYUNvbnRyb2xcbiAgICAgICAgICAgICAgICBsYW5ndWFnZT1cInNxbFwiXG4gICAgICAgICAgICAgICAgY29udHJvbElkPVwiZmV0Y2hfdmFsdWVzX3ByZWRpY2F0ZVwiXG4gICAgICAgICAgICAgICAgbWluTGluZXM9ezV9XG4gICAgICAgICAgICAgICAgcmVzaXplPVwidmVydGljYWxcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIHt0aGlzLnN0YXRlLmlzU3FsYSAmJiAoXG4gICAgICAgICAgPEZpZWxkXG4gICAgICAgICAgICBmaWVsZEtleT1cImV4dHJhXCJcbiAgICAgICAgICAgIGxhYmVsPXt0KCdFeHRyYScpfVxuICAgICAgICAgICAgZGVzY3JpcHRpb249e3QoXG4gICAgICAgICAgICAgICdFeHRyYSBkYXRhIHRvIHNwZWNpZnkgdGFibGUgbWV0YWRhdGEuIEN1cnJlbnRseSBzdXBwb3J0cyAnICtcbiAgICAgICAgICAgICAgICAnbWV0YWRhdGEgb2YgdGhlIGZvcm1hdDogYHsgXCJjZXJ0aWZpY2F0aW9uXCI6IHsgXCJjZXJ0aWZpZWRfYnlcIjogJyArXG4gICAgICAgICAgICAgICAgJ1wiRGF0YSBQbGF0Zm9ybSBUZWFtXCIsIFwiZGV0YWlsc1wiOiBcIlRoaXMgdGFibGUgaXMgdGhlIHNvdXJjZSBvZiB0cnV0aC5cIiAnICtcbiAgICAgICAgICAgICAgICAnfSwgXCJ3YXJuaW5nX21hcmtkb3duXCI6IFwiVGhpcyBpcyBhIHdhcm5pbmcuXCIgfWAuJyxcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICBjb250cm9sPXtcbiAgICAgICAgICAgICAgPFRleHRBcmVhQ29udHJvbFxuICAgICAgICAgICAgICAgIGNvbnRyb2xJZD1cImV4dHJhXCJcbiAgICAgICAgICAgICAgICBsYW5ndWFnZT1cImpzb25cIlxuICAgICAgICAgICAgICAgIG9mZmVyRWRpdEluTW9kYWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAgIHJlc2l6ZT1cInZlcnRpY2FsXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICA8T3duZXJzU2VsZWN0b3JcbiAgICAgICAgICBkYXRhc291cmNlPXtkYXRhc291cmNlfVxuICAgICAgICAgIG9uQ2hhbmdlPXtuZXdPd25lcnMgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkRhdGFzb3VyY2VDaGFuZ2UoeyAuLi5kYXRhc291cmNlLCBvd25lcnM6IG5ld093bmVycyB9KTtcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9GaWVsZHNldD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyQWR2YW5jZWRGaWVsZHNldCgpIHtcbiAgICBjb25zdCB7IGRhdGFzb3VyY2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGaWVsZHNldFxuICAgICAgICB0aXRsZT17dCgnQWR2YW5jZWQnKX1cbiAgICAgICAgaXRlbT17ZGF0YXNvdXJjZX1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMub25EYXRhc291cmNlQ2hhbmdlfVxuICAgICAgPlxuICAgICAgICA8RmllbGRcbiAgICAgICAgICBmaWVsZEtleT1cImNhY2hlX3RpbWVvdXRcIlxuICAgICAgICAgIGxhYmVsPXt0KCdDYWNoZSB0aW1lb3V0Jyl9XG4gICAgICAgICAgZGVzY3JpcHRpb249e3QoXG4gICAgICAgICAgICAnVGhlIGR1cmF0aW9uIG9mIHRpbWUgaW4gc2Vjb25kcyBiZWZvcmUgdGhlIGNhY2hlIGlzIGludmFsaWRhdGVkLiBTZXQgdG8gLTEgdG8gYnlwYXNzIHRoZSBjYWNoZS4nLFxuICAgICAgICAgICl9XG4gICAgICAgICAgY29udHJvbD17PFRleHRDb250cm9sIGNvbnRyb2xJZD1cImNhY2hlX3RpbWVvdXRcIiAvPn1cbiAgICAgICAgLz5cbiAgICAgICAgPEZpZWxkXG4gICAgICAgICAgZmllbGRLZXk9XCJvZmZzZXRcIlxuICAgICAgICAgIGxhYmVsPXt0KCdIb3VycyBvZmZzZXQnKX1cbiAgICAgICAgICBjb250cm9sPXs8VGV4dENvbnRyb2wgY29udHJvbElkPVwib2Zmc2V0XCIgLz59XG4gICAgICAgICAgZGVzY3JpcHRpb249e3QoXG4gICAgICAgICAgICAnVGhlIG51bWJlciBvZiBob3VycywgbmVnYXRpdmUgb3IgcG9zaXRpdmUsIHRvIHNoaWZ0IHRoZSB0aW1lIGNvbHVtbi4gVGhpcyBjYW4gYmUgdXNlZCB0byBtb3ZlIFVUQyB0aW1lIHRvIGxvY2FsIHRpbWUuJyxcbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgICB7dGhpcy5zdGF0ZS5pc1NxbGEgJiYgKFxuICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgZmllbGRLZXk9XCJ0ZW1wbGF0ZV9wYXJhbXNcIlxuICAgICAgICAgICAgbGFiZWw9e3QoJ1RlbXBsYXRlIHBhcmFtZXRlcnMnKX1cbiAgICAgICAgICAgIGRlc2NyaXB0aW9uPXt0KFxuICAgICAgICAgICAgICAnQSBzZXQgb2YgcGFyYW1ldGVycyB0aGF0IGJlY29tZSBhdmFpbGFibGUgaW4gdGhlIHF1ZXJ5IHVzaW5nIEppbmphIHRlbXBsYXRpbmcgc3ludGF4JyxcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICBjb250cm9sPXs8VGV4dENvbnRyb2wgY29udHJvbElkPVwidGVtcGxhdGVfcGFyYW1zXCIgLz59XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAgPEZpZWxkXG4gICAgICAgICAgaW5saW5lXG4gICAgICAgICAgZmllbGRLZXk9XCJub3JtYWxpemVfY29sdW1uc1wiXG4gICAgICAgICAgbGFiZWw9e3QoJ05vcm1hbGl6ZSBjb2x1bW4gbmFtZXMnKX1cbiAgICAgICAgICBkZXNjcmlwdGlvbj17dChcbiAgICAgICAgICAgICdBbGxvdyBjb2x1bW4gbmFtZXMgdG8gYmUgY2hhbmdlZCB0byBjYXNlIGluc2Vuc2l0aXZlIGZvcm1hdCwgaWYgc3VwcG9ydGVkIChlLmcuIE9yYWNsZSwgU25vd2ZsYWtlKS4nLFxuICAgICAgICAgICl9XG4gICAgICAgICAgY29udHJvbD17PENoZWNrYm94Q29udHJvbCBjb250cm9sSWQ9XCJub3JtYWxpemVfY29sdW1uc1wiIC8+fVxuICAgICAgICAvPlxuICAgICAgICA8RmllbGRcbiAgICAgICAgICBpbmxpbmVcbiAgICAgICAgICBmaWVsZEtleT1cImFsd2F5c19maWx0ZXJfbWFpbl9kdHRtXCJcbiAgICAgICAgICBsYWJlbD17dCgnQWx3YXlzIGZpbHRlciBtYWluIGRhdGV0aW1lIGNvbHVtbicpfVxuICAgICAgICAgIGRlc2NyaXB0aW9uPXt0KFxuICAgICAgICAgICAgYFdoZW4gdGhlIHNlY29uZGFyeSB0ZW1wb3JhbCBjb2x1bW5zIGFyZSBmaWx0ZXJlZCwgYXBwbHkgdGhlIHNhbWUgZmlsdGVyIHRvIHRoZSBtYWluIGRhdGV0aW1lIGNvbHVtbi5gLFxuICAgICAgICAgICl9XG4gICAgICAgICAgY29udHJvbD17PENoZWNrYm94Q29udHJvbCBjb250cm9sSWQ9XCJhbHdheXNfZmlsdGVyX21haW5fZHR0bVwiIC8+fVxuICAgICAgICAvPlxuICAgICAgPC9GaWVsZHNldD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyU3BhdGlhbFRhYigpIHtcbiAgICBjb25zdCB7IGRhdGFzb3VyY2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBzcGF0aWFscywgYWxsX2NvbHM6IGFsbENvbHMgfSA9IGRhdGFzb3VyY2U7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUYWJzLlRhYlBhbmVcbiAgICAgICAgdGFiPXs8Q29sbGVjdGlvblRhYlRpdGxlIGNvbGxlY3Rpb249e3NwYXRpYWxzfSB0aXRsZT17dCgnU3BhdGlhbCcpfSAvPn1cbiAgICAgICAga2V5PXs0fVxuICAgICAgPlxuICAgICAgICA8Q29sbGVjdGlvblRhYmxlXG4gICAgICAgICAgdGFibGVDb2x1bW5zPXtbJ25hbWUnLCAnY29uZmlnJ119XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25EYXRhc291cmNlUHJvcENoYW5nZS5iaW5kKHRoaXMsICdzcGF0aWFscycpfVxuICAgICAgICAgIGl0ZW1HZW5lcmF0b3I9eygpID0+ICh7XG4gICAgICAgICAgICBuYW1lOiB0KCc8bmV3IHNwYXRpYWw+JyksXG4gICAgICAgICAgICB0eXBlOiB0KCc8bm8gdHlwZT4nKSxcbiAgICAgICAgICAgIGNvbmZpZzogbnVsbCxcbiAgICAgICAgICB9KX1cbiAgICAgICAgICBjb2xsZWN0aW9uPXtzcGF0aWFsc31cbiAgICAgICAgICBhbGxvd0RlbGV0ZXNcbiAgICAgICAgICBpdGVtUmVuZGVyZXJzPXt7XG4gICAgICAgICAgICBuYW1lOiAoZCwgb25DaGFuZ2UpID0+IChcbiAgICAgICAgICAgICAgPEVkaXRhYmxlVGl0bGUgY2FuRWRpdCB0aXRsZT17ZH0gb25TYXZlVGl0bGU9e29uQ2hhbmdlfSAvPlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGNvbmZpZzogKHYsIG9uQ2hhbmdlKSA9PiAoXG4gICAgICAgICAgICAgIDxTcGF0aWFsQ29udHJvbCB2YWx1ZT17dn0gb25DaGFuZ2U9e29uQ2hhbmdlfSBjaG9pY2VzPXthbGxDb2xzfSAvPlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9UYWJzLlRhYlBhbmU+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclNvdXJjZUZpZWxkc2V0KHRoZW1lKSB7XG4gICAgY29uc3QgeyBkYXRhc291cmNlIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8RWRpdExvY2tDb250YWluZXI+XG4gICAgICAgICAgPHNwYW4gcm9sZT1cImJ1dHRvblwiIHRhYkluZGV4PXswfSBvbkNsaWNrPXt0aGlzLm9uQ2hhbmdlRWRpdE1vZGV9PlxuICAgICAgICAgICAge3RoaXMuc3RhdGUuaXNFZGl0TW9kZSA/IChcbiAgICAgICAgICAgICAgPEljb25zLkxvY2tVbmxvY2tlZCBpY29uQ29sb3I9e3RoZW1lLmNvbG9ycy5ncmF5c2NhbGUuYmFzZX0gLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxJY29ucy5Mb2NrTG9ja2VkIGljb25Db2xvcj17dGhlbWUuY29sb3JzLmdyYXlzY2FsZS5iYXNlfSAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgeyF0aGlzLnN0YXRlLmlzRWRpdE1vZGUgJiYgKFxuICAgICAgICAgICAgPGRpdj57dCgnQ2xpY2sgdGhlIGxvY2sgdG8gbWFrZSBjaGFuZ2VzLicpfTwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAge3RoaXMuc3RhdGUuaXNFZGl0TW9kZSAmJiAoXG4gICAgICAgICAgICA8ZGl2Pnt0KCdDbGljayB0aGUgbG9jayB0byBwcmV2ZW50IGZ1cnRoZXIgY2hhbmdlcy4nKX08L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICA8L0VkaXRMb2NrQ29udGFpbmVyPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm0tbC0xMCBtLXQtMjAgbS1iLTEwXCI+XG4gICAgICAgICAge0RBVEFTT1VSQ0VfVFlQRVNfQVJSLm1hcCh0eXBlID0+IChcbiAgICAgICAgICAgIDxSYWRpb1xuICAgICAgICAgICAgICBrZXk9e3R5cGUua2V5fVxuICAgICAgICAgICAgICB2YWx1ZT17dHlwZS5rZXl9XG4gICAgICAgICAgICAgIGlubGluZVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkRhdGFzb3VyY2VUeXBlQ2hhbmdlLmJpbmQodGhpcywgdHlwZS5rZXkpfVxuICAgICAgICAgICAgICBjaGVja2VkPXt0aGlzLnN0YXRlLmRhdGFzb3VyY2VUeXBlID09PSB0eXBlLmtleX1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLmlzRWRpdE1vZGV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0eXBlLmxhYmVsfVxuICAgICAgICAgICAgPC9SYWRpbz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxociAvPlxuICAgICAgICA8RmllbGRzZXQgaXRlbT17ZGF0YXNvdXJjZX0gb25DaGFuZ2U9e3RoaXMub25EYXRhc291cmNlQ2hhbmdlfSBjb21wYWN0PlxuICAgICAgICAgIHt0aGlzLnN0YXRlLmRhdGFzb3VyY2VUeXBlID09PSBEQVRBU09VUkNFX1RZUEVTLnZpcnR1YWwua2V5ICYmIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmlzU3FsYSAmJiAoXG4gICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgIDxDb2wgeHM9ezI0fSBtZD17MTJ9PlxuICAgICAgICAgICAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICBmaWVsZEtleT1cImRhdGFiYXNlU2VsZWN0b3JcIlxuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXt0KCd2aXJ0dWFsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17eyBtYXJnaW5Ub3A6IDggfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxEYXRhYmFzZVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGI9e2RhdGFzb3VyY2U/LmRhdGFiYXNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjaGVtYT17ZGF0YXNvdXJjZS5zY2hlbWF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TY2hlbWFDaGFuZ2U9e3NjaGVtYSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc0VkaXRNb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRGF0YXNvdXJjZVByb3BDaGFuZ2UoJ3NjaGVtYScsIHNjaGVtYSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EYkNoYW5nZT17ZGF0YWJhc2UgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuaXNFZGl0TW9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkRhdGFzb3VyY2VQcm9wQ2hhbmdlKCdkYXRhYmFzZScsIGRhdGFiYXNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtTW9kZT17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlRXJyb3I9e3RoaXMucHJvcHMuYWRkRGFuZ2VyVG9hc3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk9eyF0aGlzLnN0YXRlLmlzRWRpdE1vZGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7IHdpZHRoOiAnY2FsYygxMDAlIC0gMzRweCknLCBtYXJnaW5Ub3A6IC0xNiB9fT5cbiAgICAgICAgICAgICAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkS2V5PVwidGFibGVfbmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17dCgnTmFtZScpfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0Q29udHJvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xJZD1cInRhYmxlX25hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0YWJsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRGF0YXNvdXJjZVByb3BDaGFuZ2UoJ3RhYmxlX25hbWUnLCB0YWJsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dCgnRGF0YXNldCBuYW1lJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLmlzRWRpdE1vZGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgICAgICAgICBmaWVsZEtleT1cInNxbFwiXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdTUUwnKX1cbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb249e3QoXG4gICAgICAgICAgICAgICAgICAgICAgJ1doZW4gc3BlY2lmeWluZyBTUUwsIHRoZSBkYXRhc291cmNlIGFjdHMgYXMgYSB2aWV3LiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTdXBlcnNldCB3aWxsIHVzZSB0aGlzIHN0YXRlbWVudCBhcyBhIHN1YnF1ZXJ5IHdoaWxlIGdyb3VwaW5nIGFuZCBmaWx0ZXJpbmcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnb24gdGhlIGdlbmVyYXRlZCBwYXJlbnQgcXVlcmllcy4nLFxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICBjb250cm9sPXtcbiAgICAgICAgICAgICAgICAgICAgICA8VGV4dEFyZWFDb250cm9sXG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZT1cInNxbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZlckVkaXRJbk1vZGFsPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkxpbmVzPXsyMH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1heExpbmVzPXtJbmZpbml0eX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5PXshdGhpcy5zdGF0ZS5pc0VkaXRNb2RlfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzaXplPVwiYm90aFwiXG4gICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAge3RoaXMuc3RhdGUuZGF0YXNvdXJjZVR5cGUgPT09IERBVEFTT1VSQ0VfVFlQRVMucGh5c2ljYWwua2V5ICYmIChcbiAgICAgICAgICAgIDxDb2wgeHM9ezI0fSBtZD17MTJ9PlxuICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5pc1NxbGEgJiYgKFxuICAgICAgICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgICAgICAgZmllbGRLZXk9XCJ0YWJsZVNlbGVjdG9yXCJcbiAgICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdQaHlzaWNhbCcpfVxuICAgICAgICAgICAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7IG1hcmdpblRvcDogOCB9fT5cbiAgICAgICAgICAgICAgICAgICAgICA8VGFibGVTZWxlY3RvclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRhdGFzb3VyY2UuZGF0YWJhc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlX25hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNvdXJjZS5kYXRhYmFzZT8uZGF0YWJhc2VfbmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzb3VyY2UuZGF0YWJhc2U/Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgZGJJZD17ZGF0YXNvdXJjZS5kYXRhYmFzZT8uaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcj17dGhpcy5wcm9wcy5hZGREYW5nZXJUb2FzdH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNjaGVtYT17ZGF0YXNvdXJjZS5zY2hlbWF9XG4gICAgICAgICAgICAgICAgICAgICAgICBzcWxMYWJNb2RlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlVmFsdWU9e2RhdGFzb3VyY2UudGFibGVfbmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU2NoZW1hQ2hhbmdlPXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc0VkaXRNb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzY2hlbWEgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkRhdGFzb3VyY2VQcm9wQ2hhbmdlKCdzY2hlbWEnLCBzY2hlbWEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRGJDaGFuZ2U9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmlzRWRpdE1vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGRhdGFiYXNlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25EYXRhc291cmNlUHJvcENoYW5nZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YWJhc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uVGFibGVTZWxlY3RDaGFuZ2U9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmlzRWRpdE1vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRhYmxlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25EYXRhc291cmNlUHJvcENoYW5nZSgndGFibGVfbmFtZScsIHRhYmxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkT25seT17IXRoaXMuc3RhdGUuaXNFZGl0TW9kZX1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXt0KFxuICAgICAgICAgICAgICAgICAgICAnVGhlIHBvaW50ZXIgdG8gYSBwaHlzaWNhbCB0YWJsZSAob3IgdmlldykuIEtlZXAgaW4gbWluZCB0aGF0IHRoZSBjaGFydCBpcyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAnYXNzb2NpYXRlZCB0byB0aGlzIFN1cGVyc2V0IGxvZ2ljYWwgdGFibGUsIGFuZCB0aGlzIGxvZ2ljYWwgdGFibGUgcG9pbnRzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICd0aGUgcGh5c2ljYWwgdGFibGUgcmVmZXJlbmNlZCBoZXJlLicsXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICApfVxuICAgICAgICA8L0ZpZWxkc2V0PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckVycm9ycygpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEFsZXJ0XG4gICAgICAgICAgY3NzPXt0aGVtZSA9PiAoeyBtYXJnaW5Cb3R0b206IHRoZW1lLmdyaWRVbml0ICogNCB9KX1cbiAgICAgICAgICB0eXBlPVwiZXJyb3JcIlxuICAgICAgICAgIG1lc3NhZ2U9e1xuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAge3RoaXMuc3RhdGUuZXJyb3JzLm1hcChlcnIgPT4gKFxuICAgICAgICAgICAgICAgIDxkaXYga2V5PXtlcnJ9PntlcnJ9PC9kaXY+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZW5kZXJNZXRyaWNDb2xsZWN0aW9uKCkge1xuICAgIGNvbnN0IHsgZGF0YXNvdXJjZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IG1ldHJpY3MgfSA9IGRhdGFzb3VyY2U7XG4gICAgY29uc3Qgc29ydGVkTWV0cmljcyA9IG1ldHJpY3M/Lmxlbmd0aCA/IHRoaXMuc29ydE1ldHJpY3MobWV0cmljcykgOiBbXTtcbiAgICByZXR1cm4gKFxuICAgICAgPENvbGxlY3Rpb25UYWJsZVxuICAgICAgICB0YWJsZUNvbHVtbnM9e1snbWV0cmljX25hbWUnLCAndmVyYm9zZV9uYW1lJywgJ2V4cHJlc3Npb24nXX1cbiAgICAgICAgc29ydENvbHVtbnM9e1snbWV0cmljX25hbWUnLCAndmVyYm9zZV9uYW1lJywgJ2V4cHJlc3Npb24nXX1cbiAgICAgICAgY29sdW1uTGFiZWxzPXt7XG4gICAgICAgICAgbWV0cmljX25hbWU6IHQoJ01ldHJpYyBLZXknKSxcbiAgICAgICAgICB2ZXJib3NlX25hbWU6IHQoJ0xhYmVsJyksXG4gICAgICAgICAgZXhwcmVzc2lvbjogdCgnU1FMIGV4cHJlc3Npb24nKSxcbiAgICAgICAgfX1cbiAgICAgICAgY29sdW1uTGFiZWxUb29sdGlwcz17e1xuICAgICAgICAgIG1ldHJpY19uYW1lOiB0KFxuICAgICAgICAgICAgJ1RoaXMgZmllbGQgaXMgdXNlZCBhcyBhIHVuaXF1ZSBpZGVudGlmaWVyIHRvIGF0dGFjaCAnICtcbiAgICAgICAgICAgICAgJ3RoZSBtZXRyaWMgdG8gY2hhcnRzLiBJdCBpcyBhbHNvIHVzZWQgYXMgdGhlIGFsaWFzIGluIHRoZSAnICtcbiAgICAgICAgICAgICAgJ1NRTCBxdWVyeS4nLFxuICAgICAgICAgICksXG4gICAgICAgIH19XG4gICAgICAgIGV4cGFuZEZpZWxkc2V0PXtcbiAgICAgICAgICA8Rm9ybUNvbnRhaW5lcj5cbiAgICAgICAgICAgIDxGaWVsZHNldCBjb21wYWN0PlxuICAgICAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgICAgICBmaWVsZEtleT1cImRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnRGVzY3JpcHRpb24nKX1cbiAgICAgICAgICAgICAgICBjb250cm9sPXtcbiAgICAgICAgICAgICAgICAgIDxUZXh0Q29udHJvbFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sSWQ9XCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0KCdEZXNjcmlwdGlvbicpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgICAgIGZpZWxkS2V5PVwiZDNmb3JtYXRcIlxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdEMyBmb3JtYXQnKX1cbiAgICAgICAgICAgICAgICBjb250cm9sPXtcbiAgICAgICAgICAgICAgICAgIDxUZXh0Q29udHJvbCBjb250cm9sSWQ9XCJkM2Zvcm1hdFwiIHBsYWNlaG9sZGVyPVwiJXkvJW0vJWRcIiAvPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPEZpZWxkXG4gICAgICAgICAgICAgICAgZmllbGRLZXk9XCJjdXJyZW5jeVwiXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ01ldHJpYyBjdXJyZW5jeScpfVxuICAgICAgICAgICAgICAgIGNvbnRyb2w9e1xuICAgICAgICAgICAgICAgICAgPEN1cnJlbmN5Q29udHJvbFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeVNlbGVjdE92ZXJyaWRlUHJvcHM9e3tcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdCgnU2VsZWN0IG9yIHR5cGUgY3VycmVuY3kgc3ltYm9sJyksXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIHN5bWJvbFNlbGVjdEFkZGl0aW9uYWxTdHlsZXM9e2Nzc2BcbiAgICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDMwJTtcbiAgICAgICAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RmllbGRcbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnQ2VydGlmaWVkIGJ5Jyl9XG4gICAgICAgICAgICAgICAgZmllbGRLZXk9XCJjZXJ0aWZpZWRfYnlcIlxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXt0KFxuICAgICAgICAgICAgICAgICAgJ1BlcnNvbiBvciBncm91cCB0aGF0IGhhcyBjZXJ0aWZpZWQgdGhpcyBtZXRyaWMnLFxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgICAgICAgICA8VGV4dENvbnRyb2xcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbElkPVwiY2VydGlmaWVkX2J5XCJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3QoJ0NlcnRpZmllZCBieScpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxGaWVsZFxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdDZXJ0aWZpY2F0aW9uIGRldGFpbHMnKX1cbiAgICAgICAgICAgICAgICBmaWVsZEtleT1cImNlcnRpZmljYXRpb25fZGV0YWlsc1wiXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb249e3QoJ0RldGFpbHMgb2YgdGhlIGNlcnRpZmljYXRpb24nKX1cbiAgICAgICAgICAgICAgICBjb250cm9sPXtcbiAgICAgICAgICAgICAgICAgIDxUZXh0Q29udHJvbFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sSWQ9XCJjZXJ0aWZpY2F0aW9uX2RldGFpbHNcIlxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dCgnQ2VydGlmaWNhdGlvbiBkZXRhaWxzJyl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPEZpZWxkXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ1dhcm5pbmcnKX1cbiAgICAgICAgICAgICAgICBmaWVsZEtleT1cIndhcm5pbmdfbWFya2Rvd25cIlxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXt0KCdPcHRpb25hbCB3YXJuaW5nIGFib3V0IHVzZSBvZiB0aGlzIG1ldHJpYycpfVxuICAgICAgICAgICAgICAgIGNvbnRyb2w9e1xuICAgICAgICAgICAgICAgICAgPFRleHRBcmVhQ29udHJvbFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sSWQ9XCJ3YXJuaW5nX21hcmtkb3duXCJcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2U9XCJtYXJrZG93blwiXG4gICAgICAgICAgICAgICAgICAgIG9mZmVyRWRpdEluTW9kYWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICByZXNpemU9XCJ2ZXJ0aWNhbFwiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRmllbGRzZXQ+XG4gICAgICAgICAgPC9Gb3JtQ29udGFpbmVyPlxuICAgICAgICB9XG4gICAgICAgIGNvbGxlY3Rpb249e3NvcnRlZE1ldHJpY3N9XG4gICAgICAgIGFsbG93QWRkSXRlbVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkRhdGFzb3VyY2VQcm9wQ2hhbmdlLmJpbmQodGhpcywgJ21ldHJpY3MnKX1cbiAgICAgICAgaXRlbUdlbmVyYXRvcj17KCkgPT4gKHtcbiAgICAgICAgICBtZXRyaWNfbmFtZTogdCgnPG5ldyBtZXRyaWM+JyksXG4gICAgICAgICAgdmVyYm9zZV9uYW1lOiAnJyxcbiAgICAgICAgICBleHByZXNzaW9uOiAnJyxcbiAgICAgICAgfSl9XG4gICAgICAgIGl0ZW1DZWxsUHJvcHM9e3tcbiAgICAgICAgICBleHByZXNzaW9uOiAoKSA9PiAoe1xuICAgICAgICAgICAgd2lkdGg6ICcyNDBweCcsXG4gICAgICAgICAgfSksXG4gICAgICAgIH19XG4gICAgICAgIGl0ZW1SZW5kZXJlcnM9e3tcbiAgICAgICAgICBtZXRyaWNfbmFtZTogKHYsIG9uQ2hhbmdlLCBfLCByZWNvcmQpID0+IChcbiAgICAgICAgICAgIDxGbGV4Um93Q29udGFpbmVyPlxuICAgICAgICAgICAgICB7cmVjb3JkLmlzX2NlcnRpZmllZCAmJiAoXG4gICAgICAgICAgICAgICAgPENlcnRpZmllZEJhZGdlXG4gICAgICAgICAgICAgICAgICBjZXJ0aWZpZWRCeT17cmVjb3JkLmNlcnRpZmllZF9ieX1cbiAgICAgICAgICAgICAgICAgIGRldGFpbHM9e3JlY29yZC5jZXJ0aWZpY2F0aW9uX2RldGFpbHN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge3JlY29yZC53YXJuaW5nX21hcmtkb3duICYmIChcbiAgICAgICAgICAgICAgICA8V2FybmluZ0ljb25XaXRoVG9vbHRpcFxuICAgICAgICAgICAgICAgICAgd2FybmluZ01hcmtkb3duPXtyZWNvcmQud2FybmluZ19tYXJrZG93bn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8RWRpdGFibGVUaXRsZSBjYW5FZGl0IHRpdGxlPXt2fSBvblNhdmVUaXRsZT17b25DaGFuZ2V9IC8+XG4gICAgICAgICAgICA8L0ZsZXhSb3dDb250YWluZXI+XG4gICAgICAgICAgKSxcbiAgICAgICAgICB2ZXJib3NlX25hbWU6ICh2LCBvbkNoYW5nZSkgPT4gKFxuICAgICAgICAgICAgPFRleHRDb250cm9sIGNhbkVkaXQgdmFsdWU9e3Z9IG9uQ2hhbmdlPXtvbkNoYW5nZX0gLz5cbiAgICAgICAgICApLFxuICAgICAgICAgIGV4cHJlc3Npb246ICh2LCBvbkNoYW5nZSkgPT4gKFxuICAgICAgICAgICAgPFRleHRBcmVhQ29udHJvbFxuICAgICAgICAgICAgICBjYW5FZGl0XG4gICAgICAgICAgICAgIGluaXRpYWxWYWx1ZT17dn1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgICBleHRyYUNsYXNzZXM9e1snZGF0YXNvdXJjZS1zcWwtZXhwcmVzc2lvbiddfVxuICAgICAgICAgICAgICBsYW5ndWFnZT1cInNxbFwiXG4gICAgICAgICAgICAgIG9mZmVyRWRpdEluTW9kYWw9e2ZhbHNlfVxuICAgICAgICAgICAgICBtaW5MaW5lcz17NX1cbiAgICAgICAgICAgICAgdGV4dEFyZWFTdHlsZXM9e3sgbWluV2lkdGg6ICcyMDBweCcsIG1heFdpZHRoOiAnNDUwcHgnIH19XG4gICAgICAgICAgICAgIHJlc2l6ZT1cImJvdGhcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAodiwgb25DaGFuZ2UsIGxhYmVsKSA9PiAoXG4gICAgICAgICAgICA8U3RhY2tlZEZpZWxkXG4gICAgICAgICAgICAgIGxhYmVsPXtsYWJlbH1cbiAgICAgICAgICAgICAgZm9ybUVsZW1lbnQ9ezxUZXh0Q29udHJvbCB2YWx1ZT17dn0gb25DaGFuZ2U9e29uQ2hhbmdlfSAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSxcbiAgICAgICAgICBkM2Zvcm1hdDogKHYsIG9uQ2hhbmdlLCBsYWJlbCkgPT4gKFxuICAgICAgICAgICAgPFN0YWNrZWRGaWVsZFxuICAgICAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgICAgICAgIGZvcm1FbGVtZW50PXs8VGV4dENvbnRyb2wgdmFsdWU9e3Z9IG9uQ2hhbmdlPXtvbkNoYW5nZX0gLz59XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICksXG4gICAgICAgIH19XG4gICAgICAgIGFsbG93RGVsZXRlc1xuICAgICAgICBzdGlja3lIZWFkZXJcbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGRhdGFzb3VyY2UsIGFjdGl2ZVRhYktleSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IG1ldHJpY3MgfSA9IGRhdGFzb3VyY2U7XG4gICAgY29uc3Qgc29ydGVkTWV0cmljcyA9IG1ldHJpY3M/Lmxlbmd0aCA/IHRoaXMuc29ydE1ldHJpY3MobWV0cmljcykgOiBbXTtcbiAgICBjb25zdCB7IHRoZW1lIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxEYXRhc291cmNlQ29udGFpbmVyIGRhdGEtdGVzdD1cImRhdGFzb3VyY2UtZWRpdG9yXCI+XG4gICAgICAgIHt0aGlzLnJlbmRlckVycm9ycygpfVxuICAgICAgICA8QWxlcnRcbiAgICAgICAgICBjc3M9e3RoZW1lID0+ICh7IG1hcmdpbkJvdHRvbTogdGhlbWUuZ3JpZFVuaXQgKiA0IH0pfVxuICAgICAgICAgIHR5cGU9XCJ3YXJuaW5nXCJcbiAgICAgICAgICBtZXNzYWdlPXtcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICAgIDxzdHJvbmc+e3QoJ0JlIGNhcmVmdWwuJyl9IDwvc3Ryb25nPlxuICAgICAgICAgICAgICB7dChcbiAgICAgICAgICAgICAgICAnQ2hhbmdpbmcgdGhlc2Ugc2V0dGluZ3Mgd2lsbCBhZmZlY3QgYWxsIGNoYXJ0cyB1c2luZyB0aGlzIGRhdGFzZXQsIGluY2x1ZGluZyBjaGFydHMgb3duZWQgYnkgb3RoZXIgcGVvcGxlLicsXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICB9XG4gICAgICAgIC8+XG4gICAgICAgIDxTdHlsZWRUYWJsZVRhYnNcbiAgICAgICAgICBmdWxsV2lkdGg9e2ZhbHNlfVxuICAgICAgICAgIGlkPVwidGFibGUtdGFic1wiXG4gICAgICAgICAgZGF0YS10ZXN0PVwiZWRpdC1kYXRhc2V0LXRhYnNcIlxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZVRhYlNlbGVjdH1cbiAgICAgICAgICBkZWZhdWx0QWN0aXZlS2V5PXthY3RpdmVUYWJLZXl9XG4gICAgICAgID5cbiAgICAgICAgICA8VGFicy5UYWJQYW5lIGtleT17MH0gdGFiPXt0KCdTb3VyY2UnKX0+XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJTb3VyY2VGaWVsZHNldCh0aGVtZSl9XG4gICAgICAgICAgPC9UYWJzLlRhYlBhbmU+XG4gICAgICAgICAgPFRhYnMuVGFiUGFuZVxuICAgICAgICAgICAgdGFiPXtcbiAgICAgICAgICAgICAgPENvbGxlY3Rpb25UYWJUaXRsZVxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb249e3NvcnRlZE1ldHJpY3N9XG4gICAgICAgICAgICAgICAgdGl0bGU9e3QoJ01ldHJpY3MnKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleT17MX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJNZXRyaWNDb2xsZWN0aW9uKCl9XG4gICAgICAgICAgPC9UYWJzLlRhYlBhbmU+XG4gICAgICAgICAgPFRhYnMuVGFiUGFuZVxuICAgICAgICAgICAgdGFiPXtcbiAgICAgICAgICAgICAgPENvbGxlY3Rpb25UYWJUaXRsZVxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb249e3RoaXMuc3RhdGUuZGF0YWJhc2VDb2x1bW5zfVxuICAgICAgICAgICAgICAgIHRpdGxlPXt0KCdDb2x1bW5zJyl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXk9ezJ9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFN0eWxlZENvbHVtbnNUYWJXcmFwcGVyPlxuICAgICAgICAgICAgICA8Q29sdW1uQnV0dG9uV3JhcHBlcj5cbiAgICAgICAgICAgICAgICA8U3R5bGVkQnV0dG9uV3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uU2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uU3R5bGU9XCJ0ZXJ0aWFyeVwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuc3luY01ldGFkYXRhfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzeW5jLWZyb20tc291cmNlXCJcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMuc3RhdGUuaXNFZGl0TW9kZX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZGF0YWJhc2VcIiAvPnsnICd9XG4gICAgICAgICAgICAgICAgICAgIHt0KCdTeW5jIGNvbHVtbnMgZnJvbSBzb3VyY2UnKX1cbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvU3R5bGVkQnV0dG9uV3JhcHBlcj5cbiAgICAgICAgICAgICAgPC9Db2x1bW5CdXR0b25XcmFwcGVyPlxuICAgICAgICAgICAgICA8Q29sdW1uQ29sbGVjdGlvblRhYmxlXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29sdW1ucy10YWJsZVwiXG4gICAgICAgICAgICAgICAgY29sdW1ucz17dGhpcy5zdGF0ZS5kYXRhYmFzZUNvbHVtbnN9XG4gICAgICAgICAgICAgICAgZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX1cbiAgICAgICAgICAgICAgICBvbkNvbHVtbnNDaGFuZ2U9e2RhdGFiYXNlQ29sdW1ucyA9PlxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb2x1bW5zKHsgZGF0YWJhc2VDb2x1bW5zIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9uRGF0YXNvdXJjZUNoYW5nZT17dGhpcy5vbkRhdGFzb3VyY2VDaGFuZ2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIHt0aGlzLnN0YXRlLm1ldGFkYXRhTG9hZGluZyAmJiA8TG9hZGluZyAvPn1cbiAgICAgICAgICAgIDwvU3R5bGVkQ29sdW1uc1RhYldyYXBwZXI+XG4gICAgICAgICAgPC9UYWJzLlRhYlBhbmU+XG4gICAgICAgICAgPFRhYnMuVGFiUGFuZVxuICAgICAgICAgICAgdGFiPXtcbiAgICAgICAgICAgICAgPENvbGxlY3Rpb25UYWJUaXRsZVxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb249e3RoaXMuc3RhdGUuY2FsY3VsYXRlZENvbHVtbnN9XG4gICAgICAgICAgICAgICAgdGl0bGU9e3QoJ0NhbGN1bGF0ZWQgY29sdW1ucycpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5PXszfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxTdHlsZWRDb2x1bW5zVGFiV3JhcHBlcj5cbiAgICAgICAgICAgICAgPENvbHVtbkNvbGxlY3Rpb25UYWJsZVxuICAgICAgICAgICAgICAgIGNvbHVtbnM9e3RoaXMuc3RhdGUuY2FsY3VsYXRlZENvbHVtbnN9XG4gICAgICAgICAgICAgICAgb25Db2x1bW5zQ2hhbmdlPXtjYWxjdWxhdGVkQ29sdW1ucyA9PlxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb2x1bW5zKHsgY2FsY3VsYXRlZENvbHVtbnMgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29sdW1uTGFiZWxUb29sdGlwcz17e1xuICAgICAgICAgICAgICAgICAgY29sdW1uX25hbWU6IHQoXG4gICAgICAgICAgICAgICAgICAgICdUaGlzIGZpZWxkIGlzIHVzZWQgYXMgYSB1bmlxdWUgaWRlbnRpZmllciB0byBhdHRhY2ggJyArXG4gICAgICAgICAgICAgICAgICAgICAgJ3RoZSBjYWxjdWxhdGVkIGRpbWVuc2lvbiB0byBjaGFydHMuIEl0IGlzIGFsc28gdXNlZCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAnYXMgdGhlIGFsaWFzIGluIHRoZSBTUUwgcXVlcnkuJyxcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBvbkRhdGFzb3VyY2VDaGFuZ2U9e3RoaXMub25EYXRhc291cmNlQ2hhbmdlfVxuICAgICAgICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgICAgICAgZWRpdGFibGVDb2x1bW5OYW1lXG4gICAgICAgICAgICAgICAgc2hvd0V4cHJlc3Npb25cbiAgICAgICAgICAgICAgICBhbGxvd0FkZEl0ZW1cbiAgICAgICAgICAgICAgICBhbGxvd0VkaXREYXRhVHlwZVxuICAgICAgICAgICAgICAgIGl0ZW1HZW5lcmF0b3I9eygpID0+ICh7XG4gICAgICAgICAgICAgICAgICBjb2x1bW5fbmFtZTogdCgnPG5ldyBjb2x1bW4+JyksXG4gICAgICAgICAgICAgICAgICBmaWx0ZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgZ3JvdXBieTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IHQoJzxlbnRlciBTUUwgZXhwcmVzc2lvbiBoZXJlPicpLFxuICAgICAgICAgICAgICAgICAgX19leHBhbmRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvU3R5bGVkQ29sdW1uc1RhYldyYXBwZXI+XG4gICAgICAgICAgPC9UYWJzLlRhYlBhbmU+XG4gICAgICAgICAgPFRhYnMuVGFiUGFuZSBrZXk9ezR9IHRhYj17dCgnU2V0dGluZ3MnKX0+XG4gICAgICAgICAgICA8Um93IGd1dHRlcj17MTZ9PlxuICAgICAgICAgICAgICA8Q29sIHhzPXsyNH0gbWQ9ezEyfT5cbiAgICAgICAgICAgICAgICA8Rm9ybUNvbnRhaW5lcj57dGhpcy5yZW5kZXJTZXR0aW5nc0ZpZWxkc2V0KCl9PC9Gb3JtQ29udGFpbmVyPlxuICAgICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICAgICAgPENvbCB4cz17MjR9IG1kPXsxMn0+XG4gICAgICAgICAgICAgICAgPEZvcm1Db250YWluZXI+e3RoaXMucmVuZGVyQWR2YW5jZWRGaWVsZHNldCgpfTwvRm9ybUNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPC9Db2w+XG4gICAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgICA8L1RhYnMuVGFiUGFuZT5cbiAgICAgICAgPC9TdHlsZWRUYWJsZVRhYnM+XG4gICAgICA8L0RhdGFzb3VyY2VDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5EYXRhc291cmNlRWRpdG9yLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkRhdGFzb3VyY2VFZGl0b3IucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG5jb25zdCBEYXRhU291cmNlQ29tcG9uZW50ID0gd2l0aFRoZW1lKERhdGFzb3VyY2VFZGl0b3IpO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVG9hc3RzKERhdGFTb3VyY2VDb21wb25lbnQpO1xuIl19 */\") },\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"table_name\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Name'),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n          controlId: \"table_name\",\n          onChange: (table) => {\n            this.onDatasourcePropChange('table_name', table);\n          },\n          placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Dataset name'),\n          disabled: !this.state.isEditMode }\n        ) }\n\n      )\n      )\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"sql\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('SQL'),\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n          'When specifying SQL, the datasource acts as a view. ' +\n          'Superset will use this statement as a subquery while grouping and filtering ' +\n          'on the generated parent queries.'\n        ),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextAreaControl__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n          language: \"sql\",\n          offerEditInModal: false,\n          minLines: 20,\n          maxLines: Infinity,\n          readOnly: !this.state.isEditMode,\n          resize: \"both\" }\n        ) }\n\n      )\n      )\n\n      ),\n\n      this.state.datasourceType === DATASOURCE_TYPES.physical.key &&\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components__WEBPACK_IMPORTED_MODULE_7__.Col, { xs: 24, md: 12 },\n      this.state.isSqla &&\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        fieldKey: \"tableSelector\",\n        label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Physical'),\n        control:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", { css: _ref24 },\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_TableSelector__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n          clearable: false,\n          database: {\n            ...datasource.database,\n            database_name:\n            ((_datasource$database = datasource.database) == null ? void 0 : _datasource$database.database_name) || ((_datasource$database2 =\n            datasource.database) == null ? void 0 : _datasource$database2.name)\n          },\n          dbId: (_datasource$database3 = datasource.database) == null ? void 0 : _datasource$database3.id,\n          handleError: this.props.addDangerToast,\n          schema: datasource.schema,\n          sqlLabMode: false,\n          tableValue: datasource.table_name,\n          onSchemaChange:\n          this.state.isEditMode ?\n          (schema) =>\n          this.onDatasourcePropChange('schema', schema) :\n          undefined,\n\n          onDbChange:\n          this.state.isEditMode ?\n          (database) =>\n          this.onDatasourcePropChange(\n            'database',\n            database\n          ) :\n          undefined,\n\n          onTableSelectChange:\n          this.state.isEditMode ?\n          (table) =>\n          this.onDatasourcePropChange('table_name', table) :\n          undefined,\n\n          readOnly: !this.state.isEditMode }\n        )\n        ),\n\n        description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n          'The pointer to a physical table (or view). Keep in mind that the chart is ' +\n          'associated to this Superset logical table, and this logical table points ' +\n          'the physical table referenced here.'\n        ) }\n      )\n\n      )\n\n      )\n      ));\n\n  }\n\n  renderErrors() {\n    if (this.state.errors.length > 0) {\n      return (\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Alert__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n          css: (theme) => ({ marginBottom: theme.gridUnit * 4 }),\n          type: \"error\",\n          message:\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,\n          this.state.errors.map((err) =>\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"div\", { key: err }, err)\n          )\n          ) }\n\n        ));\n\n    }\n    return null;\n  }\n\n  renderMetricCollection() {\n    const { datasource } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics != null && metrics.length ? this.sortMetrics(metrics) : [];\n    return (\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_CollectionTable__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n        tableColumns: ['metric_name', 'verbose_name', 'expression'],\n        sortColumns: ['metric_name', 'verbose_name', 'expression'],\n        columnLabels: {\n          metric_name: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Metric Key'),\n          verbose_name: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Label'),\n          expression: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('SQL expression')\n        },\n        columnLabelTooltips: {\n          metric_name: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n            'This field is used as a unique identifier to attach ' +\n            'the metric to charts. It is also used as the alias in the ' +\n            'SQL query.'\n          )\n        },\n        expandFieldset:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(FormContainer, null,\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Fieldset__WEBPACK_IMPORTED_MODULE_27__[\"default\"], { compact: true },\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n          fieldKey: \"description\",\n          label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Description'),\n          control:\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n            controlId: \"description\",\n            placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Description') }\n          ) }\n\n        ),\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n          fieldKey: \"d3format\",\n          label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('D3 format'),\n          control:\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], { controlId: \"d3format\", placeholder: \"%y/%m/%d\" }) }\n\n        ),\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n          fieldKey: \"currency\",\n          label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Metric currency'),\n          control:\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_CurrencyControl__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {\n            currencySelectOverrideProps: {\n              placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Select or type currency symbol')\n            },\n            symbolSelectAdditionalStyles: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.css)`\n                      max-width: 30%;\n                    ` }\n          ) }\n\n        ),\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n          label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Certified by'),\n          fieldKey: \"certified_by\",\n          description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n            'Person or group that has certified this metric'\n          ),\n          control:\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n            controlId: \"certified_by\",\n            placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Certified by') }\n          ) }\n\n        ),\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n          label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Certification details'),\n          fieldKey: \"certification_details\",\n          description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Details of the certification'),\n          control:\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n            controlId: \"certification_details\",\n            placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Certification details') }\n          ) }\n\n        ),\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n          label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Warning'),\n          fieldKey: \"warning_markdown\",\n          description: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Optional warning about use of this metric'),\n          control:\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextAreaControl__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n            controlId: \"warning_markdown\",\n            language: \"markdown\",\n            offerEditInModal: false,\n            resize: \"vertical\" }\n          ) }\n\n        )\n        )\n        ),\n\n        collection: sortedMetrics,\n        allowAddItem: true,\n        onChange: this.onDatasourcePropChange.bind(this, 'metrics'),\n        itemGenerator: () => ({\n          metric_name: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('<new metric>'),\n          verbose_name: '',\n          expression: ''\n        }),\n        itemCellProps: {\n          expression: () => ({\n            width: '240px'\n          })\n        },\n        itemRenderers: {\n          metric_name: (v, onChange, _, record) =>\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(FlexRowContainer, null,\n          record.is_certified &&\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_CertifiedBadge__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n            certifiedBy: record.certified_by,\n            details: record.certification_details }\n          ),\n\n          record.warning_markdown &&\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_WarningIconWithTooltip__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n            warningMarkdown: record.warning_markdown }\n          ),\n\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_EditableTitle__WEBPACK_IMPORTED_MODULE_17__[\"default\"], { canEdit: true, title: v, onSaveTitle: onChange })\n          ),\n\n          verbose_name: (v, onChange) =>\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], { canEdit: true, value: v, onChange: onChange }),\n\n          expression: (v, onChange) =>\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextAreaControl__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n            canEdit: true,\n            initialValue: v,\n            onChange: onChange,\n            extraClasses: ['datasource-sql-expression'],\n            language: \"sql\",\n            offerEditInModal: false,\n            minLines: 5,\n            textAreaStyles: { minWidth: '200px', maxWidth: '450px' },\n            resize: \"both\" }\n          ),\n\n          description: (v, onChange, label) =>\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(StackedField, {\n            label: label,\n            formElement: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], { value: v, onChange: onChange }) }\n          ),\n\n          d3format: (v, onChange, label) =>\n          (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(StackedField, {\n            label: label,\n            formElement: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_explore_components_controls_TextControl__WEBPACK_IMPORTED_MODULE_20__[\"default\"], { value: v, onChange: onChange }) }\n          )\n\n        },\n        allowDeletes: true,\n        stickyHeader: true }\n      ));\n\n  }\n\n  render() {\n    const { datasource, activeTabKey } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics != null && metrics.length ? this.sortMetrics(metrics) : [];\n    const { theme } = this.props;\n\n    return (\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(DatasourceContainer, { \"data-test\": \"datasource-editor\" },\n      this.renderErrors(),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Alert__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        css: (theme) => ({ marginBottom: theme.gridUnit * 4 }),\n        type: \"warning\",\n        message:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,\n        ' ',\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"strong\", null, (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Be careful.'), \" \"),\n        (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n          'Changing these settings will affect all charts using this dataset, including charts owned by other people.'\n        )\n        ) }\n\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(StyledTableTabs, {\n        fullWidth: false,\n        id: \"table-tabs\",\n        \"data-test\": \"edit-dataset-tabs\",\n        onChange: this.handleTabSelect,\n        defaultActiveKey: activeTabKey },\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Tabs__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TabPane, { key: 0, tab: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Source') },\n      this.renderSourceFieldset(theme)\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Tabs__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TabPane, {\n        tab:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(CollectionTabTitle, {\n          collection: sortedMetrics,\n          title: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Metrics') }\n        ),\n\n        key: 1 },\n\n      this.renderMetricCollection()\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Tabs__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TabPane, {\n        tab:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(CollectionTabTitle, {\n          collection: this.state.databaseColumns,\n          title: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Columns') }\n        ),\n\n        key: 2 },\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(StyledColumnsTabWrapper, null,\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(ColumnButtonWrapper, null,\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(StyledButtonWrapper, null,\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Button__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n        buttonSize: \"small\",\n        buttonStyle: \"tertiary\",\n        onClick: this.syncMetadata,\n        className: \"sync-from-source\",\n        disabled: this.state.isEditMode },\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(\"i\", { className: \"fa fa-database\" }), ' ',\n      (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Sync columns from source')\n      )\n      )\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(ColumnCollectionTable, {\n        className: \"columns-table\",\n        columns: this.state.databaseColumns,\n        datasource: datasource,\n        onColumnsChange: (databaseColumns) =>\n        this.setColumns({ databaseColumns }),\n\n        onDatasourceChange: this.onDatasourceChange }\n      ),\n      this.state.metadataLoading && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Loading__WEBPACK_IMPORTED_MODULE_15__[\"default\"], null)\n      )\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Tabs__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TabPane, {\n        tab:\n        (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(CollectionTabTitle, {\n          collection: this.state.calculatedColumns,\n          title: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Calculated columns') }\n        ),\n\n        key: 3 },\n\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(StyledColumnsTabWrapper, null,\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(ColumnCollectionTable, {\n        columns: this.state.calculatedColumns,\n        onColumnsChange: (calculatedColumns) =>\n        this.setColumns({ calculatedColumns }),\n\n        columnLabelTooltips: {\n          column_name: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)(\n            'This field is used as a unique identifier to attach ' +\n            'the calculated dimension to charts. It is also used ' +\n            'as the alias in the SQL query.'\n          )\n        },\n        onDatasourceChange: this.onDatasourceChange,\n        datasource: datasource,\n        editableColumnName: true,\n        showExpression: true,\n        allowAddItem: true,\n        allowEditDataType: true,\n        itemGenerator: () => ({\n          column_name: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('<new column>'),\n          filterable: true,\n          groupby: true,\n          expression: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('<enter SQL expression here>'),\n          __expanded: true\n        }) }\n      )\n      )\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components_Tabs__WEBPACK_IMPORTED_MODULE_10__[\"default\"].TabPane, { key: 4, tab: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_31__.t)('Settings') },\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components__WEBPACK_IMPORTED_MODULE_7__.Row, { gutter: 16 },\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components__WEBPACK_IMPORTED_MODULE_7__.Col, { xs: 24, md: 12 },\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(FormContainer, null, this.renderSettingsFieldset())\n      ),\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(src_components__WEBPACK_IMPORTED_MODULE_7__.Col, { xs: 24, md: 12 },\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.jsx)(FormContainer, null, this.renderAdvancedFieldset())\n      )\n      )\n      )\n      )\n      ));\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nDatasourceEditor.defaultProps = defaultProps;\nDatasourceEditor.propTypes = propTypes;\n\nconst DataSourceComponent = (0,_emotion_react__WEBPACK_IMPORTED_MODULE_30__.withTheme)(DatasourceEditor);const _default =\n\n(0,src_components_MessageToasts_withToasts__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(DataSourceComponent);/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_default);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DatasourceContainer, \"DatasourceContainer\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(FlexRowContainer, \"FlexRowContainer\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledTableTabs, \"StyledTableTabs\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledBadge, \"StyledBadge\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(EditLockContainer, \"EditLockContainer\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(ColumnButtonWrapper, \"ColumnButtonWrapper\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledLabelWrapper, \"StyledLabelWrapper\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledColumnsTabWrapper, \"StyledColumnsTabWrapper\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledButtonWrapper, \"StyledButtonWrapper\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(checkboxGenerator, \"checkboxGenerator\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATA_TYPES, \"DATA_TYPES\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATASOURCE_TYPES_ARR, \"DATASOURCE_TYPES_ARR\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATASOURCE_TYPES, \"DATASOURCE_TYPES\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(CollectionTabTitle, \"CollectionTabTitle\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(ColumnCollectionTable, \"ColumnCollectionTable\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StackedField, \"StackedField\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(FormContainer, \"FormContainer\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(OwnersSelector, \"OwnersSelector\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DatasourceEditor, \"DatasourceEditor\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DataSourceComponent, \"DataSourceComponent\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/Datasource/DatasourceEditor.jsx\n");

/***/ }),

/***/ "./src/components/Datasource/utils.js":
/*!********************************************!*\
  !*** ./src/components/Datasource/utils.js ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recurseReactClone: () => (/* binding */ recurseReactClone)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nfunction recurseReactClone(children, type, propExtender) {\n  /**\n   * Clones a React component's children, and injects new props\n   * where the type specified is matched.\n   */\n  return react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, (child) => {\n    let newChild = child;\n    if (child && child.type.name === type.name) {\n      newChild = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, propExtender(child));\n    }\n    if (newChild && newChild.props.children) {\n      newChild = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(newChild, {\n        children: recurseReactClone(\n          newChild.props.children,\n          type,\n          propExtender\n        )\n      });\n    }\n    return newChild;\n  });\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(recurseReactClone, \"recurseReactClone\", \"/app/superset-frontend/src/components/Datasource/utils.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9EYXRhc291cmNlL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlcnNldC8uL3NyYy9jb21wb25lbnRzL0RhdGFzb3VyY2UvdXRpbHMuanM/MDJmZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVjdXJzZVJlYWN0Q2xvbmUoY2hpbGRyZW4sIHR5cGUsIHByb3BFeHRlbmRlcikge1xuICAvKipcbiAgICogQ2xvbmVzIGEgUmVhY3QgY29tcG9uZW50J3MgY2hpbGRyZW4sIGFuZCBpbmplY3RzIG5ldyBwcm9wc1xuICAgKiB3aGVyZSB0aGUgdHlwZSBzcGVjaWZpZWQgaXMgbWF0Y2hlZC5cbiAgICovXG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICBsZXQgbmV3Q2hpbGQgPSBjaGlsZDtcbiAgICBpZiAoY2hpbGQgJiYgY2hpbGQudHlwZS5uYW1lID09PSB0eXBlLm5hbWUpIHtcbiAgICAgIG5ld0NoaWxkID0gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBwcm9wRXh0ZW5kZXIoY2hpbGQpKTtcbiAgICB9XG4gICAgaWYgKG5ld0NoaWxkICYmIG5ld0NoaWxkLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICBuZXdDaGlsZCA9IFJlYWN0LmNsb25lRWxlbWVudChuZXdDaGlsZCwge1xuICAgICAgICBjaGlsZHJlbjogcmVjdXJzZVJlYWN0Q2xvbmUoXG4gICAgICAgICAgbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBwcm9wRXh0ZW5kZXIsXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0NoaWxkO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/Datasource/utils.js\n");

/***/ }),

/***/ "./src/components/Badge/index.tsx":
/*!****************************************!*\
  !*** ./src/components/Badge/index.tsx ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_corejs3_helpers_extends__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime-corejs3/helpers/extends */ \"./node_modules/@babel/runtime-corejs3/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/style/index.tsx\");\n/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd */ \"./node_modules/antd/es/index.js\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\nconst Badge = (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_1__.styled)((\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_ref) => {let { textColor, color, text, ...props } = _ref;return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(antd__WEBPACK_IMPORTED_MODULE_3__.Badge, (0,_babel_runtime_corejs3_helpers_extends__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({ text: text, color: text ? color : undefined }, props));})`\n  & > sup {\n    padding: 0 ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit * 2;}}px;\n    background: ${(_ref3) => {let { theme, color } = _ref3;return color || theme.colors.primary.base;}};\n    color: ${(_ref4) => {let { theme, textColor } = _ref4;return textColor || theme.colors.grayscale.light5;}};\n  }\n`;const _default =\nBadge;/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_default);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Badge, \"Badge\", \"/app/superset-frontend/src/components/Badge/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/Badge/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9CYWRnZS9pbmRleC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTtBQUNBO0FBQ0E7QUFPQTtBQUVBO0FBQUE7O0FBS0E7QUFDQTtBQUNBOztBQUdBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlcnNldC8uL3NyYy9jb21wb25lbnRzL0JhZGdlL2luZGV4LnRzeD9jMzhiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICdAc3VwZXJzZXQtdWkvY29yZSc7XG5pbXBvcnQgeyBCYWRnZSBhcyBBbnRkQmFkZ2UgfSBmcm9tICdhbnRkJztcbmltcG9ydCB7IEJhZGdlUHJvcHMgYXMgQW50ZEJhZGdlUHJvcHMgfSBmcm9tICdhbnRkL2xpYi9iYWRnZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFkZ2VQcm9wcyBleHRlbmRzIEFudGRCYWRnZVByb3BzIHtcbiAgdGV4dENvbG9yPzogc3RyaW5nO1xufVxuXG5jb25zdCBCYWRnZSA9IHN0eWxlZChcbiAgKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICB7IHRleHRDb2xvciwgY29sb3IsIHRleHQsIC4uLnByb3BzIH06IEJhZGdlUHJvcHMsXG4gICkgPT4gPEFudGRCYWRnZSB0ZXh0PXt0ZXh0fSBjb2xvcj17dGV4dCA/IGNvbG9yIDogdW5kZWZpbmVkfSB7Li4ucHJvcHN9IC8+LFxuKWBcbiAgJiA+IHN1cCB7XG4gICAgcGFkZGluZzogMCAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmdyaWRVbml0ICogMn1weDtcbiAgICBiYWNrZ3JvdW5kOiAkeyh7IHRoZW1lLCBjb2xvciB9KSA9PiBjb2xvciB8fCB0aGVtZS5jb2xvcnMucHJpbWFyeS5iYXNlfTtcbiAgICBjb2xvcjogJHsoeyB0aGVtZSwgdGV4dENvbG9yIH0pID0+XG4gICAgICB0ZXh0Q29sb3IgfHwgdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDV9O1xuICB9XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBCYWRnZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/Badge/index.tsx\n");

/***/ }),

/***/ "./src/components/Card/index.tsx":
/*!***************************************!*\
  !*** ./src/components/Card/index.tsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_corejs3_helpers_extends__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime-corejs3/helpers/extends */ \"./node_modules/@babel/runtime-corejs3/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var antd_lib_card__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/card */ \"./node_modules/antd/lib/card/index.js\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nconst Card = (_ref) => {let { padded, ...props } = _ref;return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_1__.jsx)(antd_lib_card__WEBPACK_IMPORTED_MODULE_2__[\"default\"], (0,_babel_runtime_corejs3_helpers_extends__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({}, props, { css: (theme) => ({\n      backgroundColor: theme.colors.grayscale.light4,\n      borderRadius: theme.borderRadius,\n      '.ant-card-body': {\n        padding: padded ? theme.gridUnit * 4 : theme.gridUnit\n      }\n    }) }));};const _default =\nCard;/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_default);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Card, \"Card\", \"/app/superset-frontend/src/components/Card/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/Card/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9DYXJkL2luZGV4LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7QUFFQTtBQU1BO0FBSUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFJQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cGVyc2V0Ly4vc3JjL2NvbXBvbmVudHMvQ2FyZC9pbmRleC50c3g/OGU3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3VwZXJzZXRUaGVtZSB9IGZyb20gJ0BzdXBlcnNldC11aS9jb3JlJztcbmltcG9ydCBBbnRkQ2FyZCwgeyBDYXJkUHJvcHMgYXMgQW50ZENhcmRQcm9wcyB9IGZyb20gJ2FudGQvbGliL2NhcmQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENhcmRQcm9wcyBleHRlbmRzIEFudGRDYXJkUHJvcHMge1xuICBwYWRkZWQ/OiBib29sZWFuO1xufVxuXG5jb25zdCBDYXJkID0gKHsgcGFkZGVkLCAuLi5wcm9wcyB9OiBDYXJkUHJvcHMpID0+IChcbiAgPEFudGRDYXJkXG4gICAgey4uLnByb3BzfVxuICAgIGNzcz17KHRoZW1lOiBTdXBlcnNldFRoZW1lKSA9PiAoe1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMuZ3JheXNjYWxlLmxpZ2h0NCxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuYm9yZGVyUmFkaXVzLFxuICAgICAgJy5hbnQtY2FyZC1ib2R5Jzoge1xuICAgICAgICBwYWRkaW5nOiBwYWRkZWQgPyB0aGVtZS5ncmlkVW5pdCAqIDQgOiB0aGVtZS5ncmlkVW5pdCxcbiAgICAgIH0sXG4gICAgfSl9XG4gIC8+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBDYXJkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/Card/index.tsx\n");

/***/ }),

/***/ "./src/components/CertifiedBadge/index.tsx":
/*!*************************************************!*\
  !*** ./src/components/CertifiedBadge/index.tsx ***!
  \*************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/style/index.tsx\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/translation/TranslatorSingleton.ts\");\n/* harmony import */ var src_components_Icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/components/Icons */ \"./src/components/Icons/index.tsx\");\n/* harmony import */ var src_components_Tooltip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/components/Tooltip */ \"./src/components/Tooltip/index.tsx\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\n\nfunction CertifiedBadge(_ref) {let { certifiedBy, details, size = 'l' } = _ref;\n  const theme = (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_3__.useTheme)();\n  return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.jsx)(src_components_Tooltip__WEBPACK_IMPORTED_MODULE_2__.Tooltip, { id: \"certified-details-tooltip\", title: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n    certifiedBy && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", null,\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"strong\", null, (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_5__.t)('Certified by %s', certifiedBy))\n    ),\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", null, details)\n    ) },\n  (0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.jsx)(src_components_Icons__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Certified, { iconColor: theme.colors.primary.base, iconSize: size })\n  );\n}__signature__(CertifiedBadge, \"useTheme{theme}\", () => [_superset_ui_core__WEBPACK_IMPORTED_MODULE_3__.useTheme]);const _default =\nCertifiedBadge;/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_default);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CertifiedBadge, \"CertifiedBadge\", \"/app/superset-frontend/src/components/CertifiedBadge/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/CertifiedBadge/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9DZXJ0aWZpZWRCYWRnZS9pbmRleC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7QUFDQTtBQUNBO0FBQ0E7QUFRQTtBQUtBO0FBRUE7QUFLQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlcnNldC8uL3NyYy9jb21wb25lbnRzL0NlcnRpZmllZEJhZGdlL2luZGV4LnRzeD9hZTU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB0LCB1c2VUaGVtZSB9IGZyb20gJ0BzdXBlcnNldC11aS9jb3JlJztcbmltcG9ydCBJY29ucywgeyBJY29uVHlwZSB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0ljb25zJztcbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICdzcmMvY29tcG9uZW50cy9Ub29sdGlwJztcblxuZXhwb3J0IGludGVyZmFjZSBDZXJ0aWZpZWRCYWRnZVByb3BzIHtcbiAgY2VydGlmaWVkQnk/OiBzdHJpbmc7XG4gIGRldGFpbHM/OiBzdHJpbmc7XG4gIHNpemU/OiBJY29uVHlwZVsnaWNvblNpemUnXTtcbn1cblxuZnVuY3Rpb24gQ2VydGlmaWVkQmFkZ2Uoe1xuICBjZXJ0aWZpZWRCeSxcbiAgZGV0YWlscyxcbiAgc2l6ZSA9ICdsJyxcbn06IENlcnRpZmllZEJhZGdlUHJvcHMpIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPFRvb2x0aXBcbiAgICAgIGlkPVwiY2VydGlmaWVkLWRldGFpbHMtdG9vbHRpcFwiXG4gICAgICB0aXRsZT17XG4gICAgICAgIDw+XG4gICAgICAgICAge2NlcnRpZmllZEJ5ICYmIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxzdHJvbmc+e3QoJ0NlcnRpZmllZCBieSAlcycsIGNlcnRpZmllZEJ5KX08L3N0cm9uZz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGRpdj57ZGV0YWlsc308L2Rpdj5cbiAgICAgICAgPC8+XG4gICAgICB9XG4gICAgPlxuICAgICAgPEljb25zLkNlcnRpZmllZCBpY29uQ29sb3I9e3RoZW1lLmNvbG9ycy5wcmltYXJ5LmJhc2V9IGljb25TaXplPXtzaXplfSAvPlxuICAgIDwvVG9vbHRpcD5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2VydGlmaWVkQmFkZ2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/CertifiedBadge/index.tsx\n");

/***/ }),

/***/ "./src/components/DatabaseSelector/index.tsx":
/*!***************************************************!*\
  !*** ./src/components/DatabaseSelector/index.tsx ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DatabaseSelector)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/style/index.tsx\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/connection/SupersetClient.ts\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/translation/TranslatorSingleton.ts\");\n/* harmony import */ var rison__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rison */ \"./node_modules/rison/js/rison.js\");\n/* harmony import */ var rison__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rison__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var src_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/components */ \"./src/components/index.ts\");\n/* harmony import */ var src_components_Label__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/components/Label */ \"./src/components/Label/index.tsx\");\n/* harmony import */ var src_components_Form__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/components/Form */ \"./src/components/Form/index.tsx\");\n/* harmony import */ var src_components_RefreshLabel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/components/RefreshLabel */ \"./src/components/RefreshLabel/index.tsx\");\n/* harmony import */ var src_components_MessageToasts_withToasts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/components/MessageToasts/withToasts */ \"./src/components/MessageToasts/withToasts.tsx\");\n/* harmony import */ var src_hooks_apiResources__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/hooks/apiResources */ \"./src/hooks/apiResources/index.ts\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\n\n\n\n\n\n\nconst DatabaseSelectorWrapper = _superset_ui_core__WEBPACK_IMPORTED_MODULE_8__.styled.div`\n  ${(_ref) => {let { theme } = _ref;return `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      width: calc(100% - 30px - ${theme.gridUnit}px);\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `;}}\n`;\nconst LabelStyle = _superset_ui_core__WEBPACK_IMPORTED_MODULE_8__.styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit - 2;}}px;\n\n  .backend {\n    overflow: visible;\n  }\n\n  .name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\nconst SelectLabel = (_ref3) => {let { backend, databaseName } = _ref3;return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(LabelStyle, null,\n  (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(src_components_Label__WEBPACK_IMPORTED_MODULE_3__[\"default\"], { className: \"backend\" }, backend || ''),\n  (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"span\", { className: \"name\", title: databaseName },\n  databaseName\n  )\n  );};\nconst EMPTY_SCHEMA_OPTIONS = [];\nfunction DatabaseSelector(_ref4) {let { db, formMode = false, emptyState, getDbList, handleError, isDatabaseSelectEnabled = true, onDbChange, onEmptyResults, onSchemaChange, readOnly = false, schema, sqlLabMode = false } = _ref4;\n  const [currentDb, setCurrentDb] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  const [currentSchema, setCurrentSchema] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(schema ? { label: schema, value: schema, title: schema } : undefined);\n  const schemaRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(schema);\n  schemaRef.current = schema;\n  const { addSuccessToast } = (0,src_components_MessageToasts_withToasts__WEBPACK_IMPORTED_MODULE_6__.useToasts)();\n  const loadDatabases = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => async (search, page, pageSize) => {\n    const queryParams = rison__WEBPACK_IMPORTED_MODULE_1___default().encode({\n      order_columns: 'database_name',\n      order_direction: 'asc',\n      page,\n      page_size: pageSize,\n      ...(formMode || !sqlLabMode ?\n      { filters: [{ col: 'database_name', opr: 'ct', value: search }] } :\n      {\n        filters: [\n        { col: 'database_name', opr: 'ct', value: search },\n        {\n          col: 'expose_in_sqllab',\n          opr: 'eq',\n          value: true\n        }]\n\n      })\n    });\n    const endpoint = `/api/v1/database/?q=${queryParams}`;\n    return _superset_ui_core__WEBPACK_IMPORTED_MODULE_10__[\"default\"].get({ endpoint }).then((_ref5) => {let { json } = _ref5;\n      const { result } = json;\n      if (getDbList) {\n        getDbList(result);\n      }\n      if (result.length === 0) {\n        if (onEmptyResults)\n        onEmptyResults(search);\n      }\n      const options = result.map((row) => ({\n        label: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(SelectLabel, { backend: row.backend, databaseName: row.database_name }),\n        value: row.id,\n        id: row.id,\n        database_name: row.database_name,\n        backend: row.backend\n      }));\n      return {\n        data: options,\n        totalCount: options.length\n      };\n    });\n  }, [formMode, getDbList, sqlLabMode]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    setCurrentDb((current) => (current == null ? void 0 : current.id) !== (db == null ? void 0 : db.id) ?\n    db ?\n    {\n      label: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(SelectLabel, { backend: db.backend, databaseName: db.database_name }),\n      value: db.id,\n      ...db\n    } :\n    undefined :\n    current);\n  }, [db]);\n  function changeSchema(schema) {\n    setCurrentSchema(schema);\n    if (onSchemaChange && (schema == null ? void 0 : schema.value) !== schemaRef.current) {\n      onSchemaChange(schema == null ? void 0 : schema.value);\n    }\n  }\n  const { data, isFetching: loadingSchemas, refetch } = (0,src_hooks_apiResources__WEBPACK_IMPORTED_MODULE_7__.useSchemas)({\n    dbId: currentDb == null ? void 0 : currentDb.value,\n    onSuccess: (schemas, isFetched) => {\n      if (schemas.length === 1) {\n        changeSchema(schemas[0]);\n      } else\n      if (!schemas.find((schemaOption) => schemaRef.current === schemaOption.value)) {\n        changeSchema(undefined);\n      }\n      if (isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: () => handleError((0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_11__.t)('There was an error loading the schemas'))\n  });\n  const schemaOptions = data || EMPTY_SCHEMA_OPTIONS;\n  function changeDataBase(value, database) {\n    setCurrentDb(database);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n  function renderSelectRow(select, refreshBtn) {\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"div\", { className: \"section\" },\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"span\", { className: \"select\" }, select),\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(\"span\", { className: \"refresh\" }, refreshBtn)\n    );\n  }\n  function renderDatabaseSelect() {\n    return renderSelectRow((0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(src_components__WEBPACK_IMPORTED_MODULE_2__.AsyncSelect, { ariaLabel: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_11__.t)('Select database or type to search databases'), optionFilterProps: ['database_name', 'value'], \"data-test\": \"select-database\", header: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(src_components_Form__WEBPACK_IMPORTED_MODULE_4__.FormLabel, null, (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_11__.t)('Database')), lazyLoading: false, notFoundContent: emptyState, onChange: changeDataBase, value: currentDb, placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_11__.t)('Select database or type to search databases'), disabled: !isDatabaseSelectEnabled || readOnly, options: loadDatabases }), null);\n  }\n  function renderSchemaSelect() {\n    const refreshIcon = !readOnly && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(src_components_RefreshLabel__WEBPACK_IMPORTED_MODULE_5__[\"default\"], { onClick: () => refetch(), tooltipContent: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_11__.t)('Force refresh schema list') });\n    return renderSelectRow((0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(src_components__WEBPACK_IMPORTED_MODULE_2__.Select, { ariaLabel: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_11__.t)('Select schema or type to search schemas'), disabled: !currentDb || readOnly, header: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(src_components_Form__WEBPACK_IMPORTED_MODULE_4__.FormLabel, null, (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_11__.t)('Schema')), labelInValue: true, loading: loadingSchemas, name: \"select-schema\", notFoundContent: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_11__.t)('No compatible schema found'), placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_11__.t)('Select schema or type to search schemas'), onChange: (item) => changeSchema(item), options: schemaOptions, showSearch: true, value: currentSchema }), refreshIcon);\n  }\n  return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_9__.jsx)(DatabaseSelectorWrapper, { \"data-test\": \"DatabaseSelector\" },\n  renderDatabaseSelect(),\n  renderSchemaSelect()\n  );\n}__signature__(DatabaseSelector, \"useState{[currentDb, setCurrentDb]}\\nuseState{[currentSchema, setCurrentSchema](schema ? { label: schema, value: schema, title: schema } : undefined)}\\nuseRef{schemaRef}\\nuseToasts{{ addSuccessToast }}\\nuseMemo{loadDatabases}\\nuseEffect{}\\nuseSchemas{{ data, isFetching: loadingSchemas, refetch, }}\", () => [src_components_MessageToasts_withToasts__WEBPACK_IMPORTED_MODULE_6__.useToasts, src_hooks_apiResources__WEBPACK_IMPORTED_MODULE_7__.useSchemas]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DatabaseSelectorWrapper, \"DatabaseSelectorWrapper\", \"/app/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(LabelStyle, \"LabelStyle\", \"/app/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(SelectLabel, \"SelectLabel\", \"/app/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(EMPTY_SCHEMA_OPTIONS, \"EMPTY_SCHEMA_OPTIONS\", \"/app/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(DatabaseSelector, \"DatabaseSelector\", \"/app/superset-frontend/src/components/DatabaseSelector/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/DatabaseSelector/index.tsx\n");

/***/ }),

/***/ "./src/components/Datasource/CollectionTable.tsx":
/*!*******************************************************!*\
  !*** ./src/components/Datasource/CollectionTable.tsx ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CRUDCollection)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_corejs3_helpers_extends__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @babel/runtime-corejs3/helpers/extends */ \"./node_modules/@babel/runtime-corejs3/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shortid */ \"./node_modules/shortid/index.js\");\n/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(shortid__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _superset_ui_chart_controls__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @superset-ui/chart-controls */ \"./packages/superset-ui-chart-controls/src/components/InfoTooltipWithTrigger.tsx\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/style/index.tsx\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/translation/TranslatorSingleton.ts\");\n/* harmony import */ var src_components_Button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/components/Button */ \"./src/components/Button/index.tsx\");\n/* harmony import */ var src_components_Icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/components/Icons */ \"./src/components/Icons/index.tsx\");\n/* harmony import */ var _Fieldset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Fieldset */ \"./src/components/Datasource/Fieldset.tsx\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"./src/components/Datasource/utils.js\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\n\n\n\n\n\nvar SortOrder;\n(function (SortOrder) {\n  SortOrder[SortOrder[\"asc\"] = 1] = \"asc\";\n  SortOrder[SortOrder[\"desc\"] = 2] = \"desc\";\n  SortOrder[SortOrder[\"unsort\"] = 0] = \"unsort\";\n})(SortOrder || (SortOrder = {}));\nfunction createCollectionArray(collection) {\n  return Object.keys(collection).map((k) => collection[k]);\n}\nfunction createKeyedCollection(arr) {\n  const collectionArray = arr.map((o) => ({\n    ...o,\n    id: o.id || shortid__WEBPACK_IMPORTED_MODULE_1___default().generate()\n  }));\n  const collection = {};\n  collectionArray.forEach((o) => {\n    collection[o.id] = o;\n  });\n  return {\n    collection,\n    collectionArray\n  };\n}\nconst CrudTableWrapper = _superset_ui_core__WEBPACK_IMPORTED_MODULE_6__.styled.div`\n  ${(_ref) => {let { stickyHeader } = _ref;return stickyHeader &&\n  `\n      height: 350px;\n      overflow-y: auto;\n      overflow-x: auto;\n\n      .table {\n        min-width: 800px;\n      }\n      thead th {\n        background: #fff;\n        position: sticky;\n        top: 0;\n        z-index: 9;\n        min\n      }\n    `;}}\n  ${(_ref2) => {let { theme } = _ref2;return `\n    th span {\n      vertical-align: ${theme.gridUnit * -2}px;\n    }\n    .text-right {\n      text-align: right;\n    }\n    .empty-collection {\n      padding: ${theme.gridUnit * 2 + 2}px;\n    }\n    .tiny-cell {\n      width: ${theme.gridUnit + 1}px;\n    }\n    i.fa-caret-down,\n    i.fa-caret-up {\n      width: ${theme.gridUnit + 1}px;\n    }\n    td.expanded {\n      border-top: 0;\n      padding: 0;\n    }\n  `;}}\n`;\nconst CrudButtonWrapper = _superset_ui_core__WEBPACK_IMPORTED_MODULE_6__.styled.div`\n  text-align: right;\n  ${(_ref3) => {let { theme } = _ref3;return `margin-bottom: ${theme.gridUnit * 2}px`;}}\n`;\nconst StyledButtonWrapper = _superset_ui_core__WEBPACK_IMPORTED_MODULE_6__.styled.span`\n  ${(_ref4) => {let { theme } = _ref4;return `\n    margin-top: ${theme.gridUnit * 3}px;\n    margin-left: ${theme.gridUnit * 3}px;\n  `;}}\n`;\nclass CRUDCollection extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n  constructor(props) {\n    super(props);\n    const { collection, collectionArray } = createKeyedCollection(props.collection);\n    this.state = {\n      expandedColumns: {},\n      collection,\n      collectionArray,\n      sortColumn: '',\n      sort: 0\n    };\n    this.renderItem = this.renderItem.bind(this);\n    this.onAddItem = this.onAddItem.bind(this);\n    this.renderExpandableSection = this.renderExpandableSection.bind(this);\n    this.getLabel = this.getLabel.bind(this);\n    this.onFieldsetChange = this.onFieldsetChange.bind(this);\n    this.renderTableBody = this.renderTableBody.bind(this);\n    this.changeCollection = this.changeCollection.bind(this);\n    this.sortColumn = this.sortColumn.bind(this);\n    this.renderSortIcon = this.renderSortIcon.bind(this);\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.collection !== this.props.collection) {\n      const { collection, collectionArray } = createKeyedCollection(nextProps.collection);\n      this.setState({\n        collection,\n        collectionArray\n      });\n    }\n  }\n  onCellChange(id, col, val) {\n    this.changeCollection({\n      ...this.state.collection,\n      [id]: {\n        ...this.state.collection[id],\n        [col]: val\n      }\n    });\n  }\n  onAddItem() {\n    if (this.props.itemGenerator) {\n      let newItem = this.props.itemGenerator();\n      if (!newItem.id) {\n        newItem = { ...newItem, id: shortid__WEBPACK_IMPORTED_MODULE_1___default().generate() };\n      }\n      this.changeCollection(this.state.collection, newItem);\n    }\n  }\n  onFieldsetChange(item) {\n    this.changeCollection({\n      ...this.state.collection,\n      [item.id]: item\n    });\n  }\n  getLabel(col) {\n    const { columnLabels } = this.props;\n    let label = columnLabels != null && columnLabels[col] ? columnLabels[col] : col;\n    if (label.startsWith('__')) {\n      // special label-free columns (ie: caret for expand, delete cross)\n      label = '';\n    }\n    return label;\n  }\n  getTooltip(col) {\n    const { columnLabelTooltips } = this.props;\n    return columnLabelTooltips == null ? void 0 : columnLabelTooltips[col];\n  }\n  changeCollection(collection, newItem) {\n    this.setState({ collection });\n    if (this.props.onChange) {\n      const collectionArray = this.state.collectionArray.\n      map((c) => collection[c.id])\n      // filter out removed items\n      .filter((c) => c !== undefined);\n      if (newItem) {\n        collectionArray.unshift(newItem);\n      }\n      this.props.onChange(collectionArray);\n    }\n  }\n  deleteItem(id) {\n    const newColl = { ...this.state.collection };\n    delete newColl[id];\n    this.changeCollection(newColl);\n  }\n  effectiveTableColumns() {\n    const { tableColumns, allowDeletes, expandFieldset } = this.props;\n    const cols = allowDeletes ?\n    tableColumns.concat(['__actions']) :\n    tableColumns;\n    return expandFieldset ? ['__expand'].concat(cols) : cols;\n  }\n  toggleExpand(id) {\n    this.onCellChange(id, '__expanded', false);\n    this.setState((prevState) => ({\n      expandedColumns: {\n        ...prevState.expandedColumns,\n        [id]: !prevState.expandedColumns[id]\n      }\n    }));\n  }\n  sortColumn(col, sort) {if (sort === void 0) {sort = SortOrder.unsort;}\n    const { sortColumns } = this.props;\n    // default sort logic sorting string, boolean and number\n    const compareSort = (m, n) => {\n      if (typeof m === 'string') {\n        return (m || ' ').localeCompare(n);\n      }\n      return m - n;\n    };\n    return () => {\n      if (sortColumns != null && sortColumns.includes(col)) {\n        // display in unsorted order if no sort specified\n        if (sort === SortOrder.unsort) {\n          const { collection } = createKeyedCollection(this.props.collection);\n          const collectionArray = createCollectionArray(collection);\n          this.setState({\n            collectionArray,\n            sortColumn: '',\n            sort\n          });\n          return;\n        }\n        // newly ordered collection\n        const sorted = [...this.state.collectionArray].sort((a, b) => compareSort(a[col], b[col]));\n        const newCollection = sort === SortOrder.asc ? sorted : sorted.reverse();\n        this.setState((prevState) => ({\n          ...prevState,\n          collectionArray: newCollection,\n          sortColumn: col,\n          sort\n        }));\n      }\n    };\n  }\n  renderSortIcon(col) {\n    if (this.state.sortColumn === col && this.state.sort === SortOrder.asc) {\n      return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(src_components_Icons__WEBPACK_IMPORTED_MODULE_3__[\"default\"].SortAsc, { onClick: this.sortColumn(col, 2) });\n    }\n    if (this.state.sortColumn === col && this.state.sort === SortOrder.desc) {\n      return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(src_components_Icons__WEBPACK_IMPORTED_MODULE_3__[\"default\"].SortDesc, { onClick: this.sortColumn(col, 0) });\n    }\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(src_components_Icons__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Sort, { onClick: this.sortColumn(col, 1) });\n  }\n  renderTH(col, sortColumns) {\n    const tooltip = this.getTooltip(col);\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"th\", { key: col, className: \"no-wrap\" },\n    this.getLabel(col),\n    tooltip && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n    ' ',\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(_superset_ui_chart_controls__WEBPACK_IMPORTED_MODULE_8__.InfoTooltipWithTrigger, { label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_9__.t)('description'), tooltip: tooltip })\n    ),\n    (sortColumns == null ? void 0 : sortColumns.includes(col)) && this.renderSortIcon(col)\n    );\n  }\n  renderHeaderRow() {\n    const cols = this.effectiveTableColumns();\n    const { allowDeletes, expandFieldset, extraButtons, sortColumns } = this.props;\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"thead\", null,\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"tr\", null,\n    expandFieldset && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"th\", { \"aria-label\": \"Expand\", className: \"tiny-cell\" }),\n    cols.map((col) => this.renderTH(col, sortColumns)),\n    extraButtons,\n    allowDeletes && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"th\", { key: \"delete-item\", \"aria-label\": \"Delete\", className: \"tiny-cell\" })\n    )\n    );\n  }\n  renderExpandableSection(item) {\n    const propsGenerator = () => ({ item, onChange: this.onFieldsetChange });\n    return (0,_utils__WEBPACK_IMPORTED_MODULE_5__.recurseReactClone)(this.props.expandFieldset, _Fieldset__WEBPACK_IMPORTED_MODULE_4__[\"default\"], propsGenerator);\n  }\n  getCellProps(record, col) {var _this$props$itemCellP;\n    const cellPropsFn = (_this$props$itemCellP = this.props.itemCellProps) == null ? void 0 : _this$props$itemCellP[col];\n    const val = record[col];\n    return cellPropsFn ? cellPropsFn(val, this.getLabel(col), record) : {};\n  }\n  renderCell(record, col) {var _this$props$itemRende;\n    const renderer = (_this$props$itemRende = this.props.itemRenderers) == null ? void 0 : _this$props$itemRende[col];\n    const val = record[col];\n    const onChange = this.onCellChange.bind(this, record.id, col);\n    return renderer ? renderer(val, onChange, this.getLabel(col), record) : val;\n  }\n  renderItem(record) {\n    const { allowAddItem, allowDeletes, expandFieldset, tableColumns } = this.props;\n    /* eslint-disable no-underscore-dangle */\n    const isExpanded = !!this.state.expandedColumns[record.id] || record.__expanded;\n    let tds = [];\n    if (expandFieldset) {\n      tds.push((0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", { key: \"__expand\", className: \"expand\" },\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"i\", { role: \"button\", \"aria-label\": \"Toggle expand\", tabIndex: 0, className: `fa fa-caret-${isExpanded ? 'down' : 'right'} text-primary pointer`, onClick: this.toggleExpand.bind(this, record.id) })\n      ));\n    }\n    tds = tds.concat(tableColumns.map((col) => (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", (0,_babel_runtime_corejs3_helpers_extends__WEBPACK_IMPORTED_MODULE_10__[\"default\"])({}, this.getCellProps(record, col), { key: col }),\n    this.renderCell(record, col)\n    )));\n    if (allowAddItem) {\n      tds.push((0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", { key: \"add\" }));\n    }\n    if (allowDeletes) {\n      tds.push((0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", { key: \"__actions\", \"data-test\": \"crud-delete-option\", className: \"text-primary\" },\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(src_components_Icons__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Trash, { \"aria-label\": \"Delete item\", className: \"pointer\", \"data-test\": \"crud-delete-icon\", role: \"button\", tabIndex: 0, onClick: this.deleteItem.bind(this, record.id) })\n      ));\n    }\n    const trs = [\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"tr\", { 'data-test': 'table-row', className: \"row\", key: record.id },\n    tds\n    )];\n\n    if (isExpanded) {\n      trs.push((0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"tr\", { className: \"exp\", key: `exp__${record.id}` },\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", { colSpan: this.effectiveTableColumns().length, className: \"expanded\" },\n      (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", null, this.renderExpandableSection(record))\n      )\n      ));\n    }\n    return trs;\n  }\n  renderEmptyCell() {\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"tr\", null,\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", { className: \"empty-collection\" }, this.props.emptyMessage)\n    );\n  }\n  renderTableBody() {\n    const data = this.state.collectionArray;\n    const content = data.length ?\n    data.map((d) => this.renderItem(d)) :\n    this.renderEmptyCell();\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"tbody\", { \"data-test\": \"table-content-rows\" }, content);\n  }\n  render() {\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(CrudButtonWrapper, null,\n    this.props.allowAddItem && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(StyledButtonWrapper, null,\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(src_components_Button__WEBPACK_IMPORTED_MODULE_2__[\"default\"], { buttonSize: \"small\", buttonStyle: \"tertiary\", onClick: this.onAddItem, \"data-test\": \"add-item-button\" },\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"i\", { \"data-test\": \"crud-add-table-item\", className: \"fa fa-plus\" }), ' ',\n    (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_9__.t)('Add item')\n    )\n    )\n    ),\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(CrudTableWrapper, { className: \"CRUD\", stickyHeader: this.props.stickyHeader },\n    (0,_emotion_react__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"table\", { \"data-test\": \"crud-table\", className: \"table\" },\n    this.renderHeaderRow(),\n    this.renderTableBody()\n    )\n    )\n    );\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SortOrder, \"SortOrder\", \"/app/superset-frontend/src/components/Datasource/CollectionTable.tsx\");reactHotLoader.register(createCollectionArray, \"createCollectionArray\", \"/app/superset-frontend/src/components/Datasource/CollectionTable.tsx\");reactHotLoader.register(createKeyedCollection, \"createKeyedCollection\", \"/app/superset-frontend/src/components/Datasource/CollectionTable.tsx\");reactHotLoader.register(CrudTableWrapper, \"CrudTableWrapper\", \"/app/superset-frontend/src/components/Datasource/CollectionTable.tsx\");reactHotLoader.register(CrudButtonWrapper, \"CrudButtonWrapper\", \"/app/superset-frontend/src/components/Datasource/CollectionTable.tsx\");reactHotLoader.register(StyledButtonWrapper, \"StyledButtonWrapper\", \"/app/superset-frontend/src/components/Datasource/CollectionTable.tsx\");reactHotLoader.register(CRUDCollection, \"CRUDCollection\", \"/app/superset-frontend/src/components/Datasource/CollectionTable.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/Datasource/CollectionTable.tsx\n");

/***/ }),

/***/ "./src/components/Datasource/Field.tsx":
/*!*********************************************!*\
  !*** ./src/components/Datasource/Field.tsx ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Field)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var src_components_Tooltip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/components/Tooltip */ \"./src/components/Tooltip/index.tsx\");\n/* harmony import */ var src_components_Form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/components/Form */ \"./src/components/Form/index.tsx\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\n\nconst formItemInlineCss = (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_3__.css)`\n  .ant-form-item-control-input-content {\n    display: flex;\n    flex-direction: row;\n  }\n`;\nfunction Field(_ref) {let { fieldKey, value, label, description = null, control, onChange = () => {}, compact = false, inline } = _ref;\n  const onControlChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newValue) => {\n    onChange(fieldKey, newValue);\n  }, [onChange, fieldKey]);\n  const hookedControl = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(control, {\n    value,\n    onChange: onControlChange\n  });\n  return (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_3__.jsx)(src_components_Form__WEBPACK_IMPORTED_MODULE_2__.FormItem, { label: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_3__.jsx)(src_components_Form__WEBPACK_IMPORTED_MODULE_2__.FormLabel, { className: \"m-r-5\" },\n    label || fieldKey,\n    compact && description && (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_3__.jsx)(src_components_Tooltip__WEBPACK_IMPORTED_MODULE_1__.Tooltip, { id: \"field-descr\", placement: \"right\", title: description },\n    (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"i\", { className: \"fa fa-info-circle m-l-5\" })\n    )\n    ), css: inline && formItemInlineCss },\n  hookedControl,\n  !compact && description && (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", { css: (theme) => ({\n      color: theme.colors.grayscale.base,\n      [inline ? 'marginLeft' : 'marginTop']: theme.gridUnit\n    }) },\n  description\n  )\n  );\n}__signature__(Field, \"useCallback{onControlChange}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(formItemInlineCss, \"formItemInlineCss\", \"/app/superset-frontend/src/components/Datasource/Field.tsx\");reactHotLoader.register(Field, \"Field\", \"/app/superset-frontend/src/components/Datasource/Field.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9EYXRhc291cmNlL0ZpZWxkLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQWFBO0FBVUE7QUFFQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlcnNldC8uL3NyYy9jb21wb25lbnRzL0RhdGFzb3VyY2UvRmllbGQudHN4P2IwNTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzLCBTdXBlcnNldFRoZW1lIH0gZnJvbSAnQHN1cGVyc2V0LXVpL2NvcmUnO1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1Rvb2x0aXAnO1xuaW1wb3J0IHsgRm9ybUl0ZW0sIEZvcm1MYWJlbCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0Zvcm0nO1xuXG5jb25zdCBmb3JtSXRlbUlubGluZUNzcyA9IGNzc2BcbiAgLmFudC1mb3JtLWl0ZW0tY29udHJvbC1pbnB1dC1jb250ZW50IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIH1cbmA7XG5cbmludGVyZmFjZSBGaWVsZFByb3BzPFY+IHtcbiAgZmllbGRLZXk6IHN0cmluZztcbiAgdmFsdWU/OiBWO1xuICBsYWJlbDogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgY29udHJvbDogUmVhY3QuUmVhY3RFbGVtZW50O1xuICBvbkNoYW5nZTogKGZpZWxkS2V5OiBzdHJpbmcsIG5ld1ZhbHVlOiBWKSA9PiB2b2lkO1xuICBjb21wYWN0OiBib29sZWFuO1xuICBpbmxpbmU6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEZpZWxkPFY+KHtcbiAgZmllbGRLZXksXG4gIHZhbHVlLFxuICBsYWJlbCxcbiAgZGVzY3JpcHRpb24gPSBudWxsLFxuICBjb250cm9sLFxuICBvbkNoYW5nZSA9ICgpID0+IHt9LFxuICBjb21wYWN0ID0gZmFsc2UsXG4gIGlubGluZSxcbn06IEZpZWxkUHJvcHM8Vj4pIHtcbiAgY29uc3Qgb25Db250cm9sQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgbmV3VmFsdWUgPT4ge1xuICAgICAgb25DaGFuZ2UoZmllbGRLZXksIG5ld1ZhbHVlKTtcbiAgICB9LFxuICAgIFtvbkNoYW5nZSwgZmllbGRLZXldLFxuICApO1xuXG4gIGNvbnN0IGhvb2tlZENvbnRyb2wgPSBSZWFjdC5jbG9uZUVsZW1lbnQoY29udHJvbCwge1xuICAgIHZhbHVlLFxuICAgIG9uQ2hhbmdlOiBvbkNvbnRyb2xDaGFuZ2UsXG4gIH0pO1xuICByZXR1cm4gKFxuICAgIDxGb3JtSXRlbVxuICAgICAgbGFiZWw9e1xuICAgICAgICA8Rm9ybUxhYmVsIGNsYXNzTmFtZT1cIm0tci01XCI+XG4gICAgICAgICAge2xhYmVsIHx8IGZpZWxkS2V5fVxuICAgICAgICAgIHtjb21wYWN0ICYmIGRlc2NyaXB0aW9uICYmIChcbiAgICAgICAgICAgIDxUb29sdGlwIGlkPVwiZmllbGQtZGVzY3JcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIHRpdGxlPXtkZXNjcmlwdGlvbn0+XG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWluZm8tY2lyY2xlIG0tbC01XCIgLz5cbiAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICApfVxuICAgICAgICA8L0Zvcm1MYWJlbD5cbiAgICAgIH1cbiAgICAgIGNzcz17aW5saW5lICYmIGZvcm1JdGVtSW5saW5lQ3NzfVxuICAgID5cbiAgICAgIHtob29rZWRDb250cm9sfVxuICAgICAgeyFjb21wYWN0ICYmIGRlc2NyaXB0aW9uICYmIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17KHRoZW1lOiBTdXBlcnNldFRoZW1lKSA9PiAoe1xuICAgICAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9ycy5ncmF5c2NhbGUuYmFzZSxcbiAgICAgICAgICAgIFtpbmxpbmUgPyAnbWFyZ2luTGVmdCcgOiAnbWFyZ2luVG9wJ106IHRoZW1lLmdyaWRVbml0LFxuICAgICAgICAgIH0pfVxuICAgICAgICA+XG4gICAgICAgICAge2Rlc2NyaXB0aW9ufVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9Gb3JtSXRlbT5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/Datasource/Field.tsx\n");

/***/ }),

/***/ "./src/components/Datasource/Fieldset.tsx":
/*!************************************************!*\
  !*** ./src/components/Datasource/Fieldset.tsx ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Fieldset)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var src_components_Form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/components/Form */ \"./src/components/Form/index.tsx\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./src/components/Datasource/utils.js\");\n/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Field */ \"./src/components/Datasource/Field.tsx\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\n\nclass Fieldset extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n\n\n\n\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n  onChange(fieldKey, val) {\n    return this.props.onChange({\n      ...this.props.item,\n      [fieldKey]: val\n    });\n  }\n  render() {\n    const { title } = this.props;\n    const propExtender = (field) => ({\n      onChange: this.onChange,\n      value: this.props.item[field.props.fieldKey],\n      compact: this.props.compact\n    });\n    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.jsx)(src_components_Form__WEBPACK_IMPORTED_MODULE_1__.Form, { className: \"CRUD\", layout: \"vertical\" },\n    title && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"legend\", null, title),\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.recurseReactClone)(this.props.children, _Field__WEBPACK_IMPORTED_MODULE_3__[\"default\"], propExtender)\n    );\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}Fieldset.defaultProps = { compact: false, title: null };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Fieldset, \"Fieldset\", \"/app/superset-frontend/src/components/Datasource/Fieldset.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9EYXRhc291cmNlL0ZpZWxkc2V0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBO0FBQ0E7QUFFQTtBQUNBO0FBWUE7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3VwZXJzZXQvLi9zcmMvY29tcG9uZW50cy9EYXRhc291cmNlL0ZpZWxkc2V0LnRzeD85MGI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvRm9ybSc7XG5cbmltcG9ydCB7IHJlY3Vyc2VSZWFjdENsb25lIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgRmllbGQgZnJvbSAnLi9GaWVsZCc7XG5cbmludGVyZmFjZSBGaWVsZHNldFByb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgb25DaGFuZ2U6IEZ1bmN0aW9uO1xuICBpdGVtOiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICB0aXRsZTogUmVhY3QuUmVhY3ROb2RlO1xuICBjb21wYWN0OiBib29sZWFuO1xufVxuXG50eXBlIGZpZWxkS2V5VHlwZSA9IHN0cmluZyB8IG51bWJlcjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmllbGRzZXQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PEZpZWxkc2V0UHJvcHM+IHtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBjb21wYWN0OiBmYWxzZSxcbiAgICB0aXRsZTogbnVsbCxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogRmllbGRzZXRQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uQ2hhbmdlID0gdGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgb25DaGFuZ2UoZmllbGRLZXk6IGZpZWxkS2V5VHlwZSwgdmFsOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNoYW5nZSh7XG4gICAgICAuLi50aGlzLnByb3BzLml0ZW0sXG4gICAgICBbZmllbGRLZXldOiB2YWwsXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0aXRsZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBwcm9wRXh0ZW5kZXIgPSAoZmllbGQ6IHsgcHJvcHM6IHsgZmllbGRLZXk6IGZpZWxkS2V5VHlwZSB9IH0pID0+ICh7XG4gICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZSxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLml0ZW1bZmllbGQucHJvcHMuZmllbGRLZXldLFxuICAgICAgY29tcGFjdDogdGhpcy5wcm9wcy5jb21wYWN0LFxuICAgIH0pO1xuICAgIHJldHVybiAoXG4gICAgICA8Rm9ybSBjbGFzc05hbWU9XCJDUlVEXCIgbGF5b3V0PVwidmVydGljYWxcIj5cbiAgICAgICAge3RpdGxlICYmIDxsZWdlbmQ+e3RpdGxlfTwvbGVnZW5kPn1cbiAgICAgICAge3JlY3Vyc2VSZWFjdENsb25lKHRoaXMucHJvcHMuY2hpbGRyZW4sIEZpZWxkLCBwcm9wRXh0ZW5kZXIpfVxuICAgICAgPC9Gb3JtPlxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/Datasource/Fieldset.tsx\n");

/***/ }),

/***/ "./src/components/EditableTitle/index.tsx":
/*!************************************************!*\
  !*** ./src/components/EditableTitle/index.tsx ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EditableTitle)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_corejs3_helpers_extends__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime-corejs3/helpers/extends */ \"./node_modules/@babel/runtime-corejs3/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-router-dom */ \"./node_modules/react-router-dom/esm/react-router-dom.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/style/index.tsx\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/translation/TranslatorSingleton.ts\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var src_components_Tooltip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/components/Tooltip */ \"./src/components/Tooltip/index.tsx\");\n/* harmony import */ var _CertifiedBadge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CertifiedBadge */ \"./src/components/CertifiedBadge/index.tsx\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\n\n\n\nconst StyledCertifiedBadge = (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_4__.styled)((0,_CertifiedBadge__WEBPACK_IMPORTED_MODULE_3__[\"default\"]))`\n  vertical-align: middle;\n`;\nfunction EditableTitle(_ref)\n\n{let { canEdit = false, editing = false, extraClasses, multiLine = false, noPermitTooltip, onSaveTitle, showTooltip = true, style, title = '', defaultTitle = '', placeholder = '', certifiedBy, certificationDetails, url, // rest is related to title tooltip\n    ...rest } = _ref;const [isEditing, setIsEditing] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(editing);\n  const [currentTitle, setCurrentTitle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(title);\n  const [lastTitle, setLastTitle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(title);\n  const [contentBoundingRect, setContentBoundingRect] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  // Used so we can access the DOM element if a user clicks on this component.\n  const contentRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (title !== currentTitle) {\n      setLastTitle(currentTitle);\n      setCurrentTitle(title);\n    }\n  }, [title]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (isEditing) {\n      contentRef.current.focus();\n      // move cursor and scroll to the end\n      if (contentRef.current.setSelectionRange) {\n        const { length } = contentRef.current.value;\n        contentRef.current.setSelectionRange(length, length);\n        contentRef.current.scrollLeft = contentRef.current.scrollWidth;\n        contentRef.current.scrollTop = contentRef.current.scrollHeight;\n      }\n    }\n  }, [isEditing]);\n  function handleClick() {\n    if (!canEdit || isEditing) {\n      return;\n    }\n    // For multi-line values, save the actual rendered size of the displayed text.\n    // Later, if a textarea is constructed for editing the value, we'll need this.\n    const contentBounding = contentRef.current ?\n    contentRef.current.getBoundingClientRect() :\n    null;\n    setIsEditing(true);\n    setContentBoundingRect(contentBounding);\n  }\n  function handleBlur() {\n    const formattedTitle = currentTitle.trim();\n    if (!canEdit) {\n      return;\n    }\n    setIsEditing(false);\n    if (!formattedTitle.length) {\n      setCurrentTitle(lastTitle);\n      return;\n    }\n    if (lastTitle !== formattedTitle) {\n      setLastTitle(formattedTitle);\n    }\n    if (title !== formattedTitle) {\n      onSaveTitle(formattedTitle);\n    }\n  }\n  // tl;dr when a EditableTitle is being edited, typically the Tab that wraps it has been\n  // clicked and is focused/active. For accessibility, when the focused tab anchor intercepts\n  // the ' ' key (among others, including all arrows) the onChange() doesn't fire. Somehow\n  // keydown is still called so we can detect this and manually add a ' ' to the current title\n  function handleKeyDown(event) {\n    if (event.key === ' ') {\n      event.stopPropagation();\n    }\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleBlur();\n    }\n  }\n  function handleChange(ev) {\n    if (!canEdit) {\n      return;\n    }\n    setCurrentTitle(ev.target.value);\n  }\n  function handleKeyPress(ev) {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      handleBlur();\n    }\n  }\n  let value;\n  value = currentTitle;\n  if (!isEditing && !currentTitle) {\n    value = defaultTitle || title;\n  }\n  // Construct an inline style based on previously-saved height of the rendered label. Only\n  // used in multi-line contexts.\n  const editStyle = isEditing && contentBoundingRect ?\n  { height: `${contentBoundingRect.height}px` } :\n  undefined;\n  // Create a textarea when we're editing a multi-line value, otherwise create an input (which may\n  // be text or a button).\n  let titleComponent = multiLine && isEditing ? (0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"textarea\", { \"data-test\": \"editable-title-input\", ref: contentRef, value: value, className: !title ? 'text-muted' : undefined, onKeyDown: handleKeyDown, onChange: handleChange, onBlur: handleBlur, onClick: handleClick, onKeyPress: handleKeyPress, placeholder: placeholder, style: editStyle }) : (0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"input\", { \"data-test\": \"editable-title-input\", ref: contentRef, type: isEditing ? 'text' : 'button', value: value, className: !title ? 'text-muted' : undefined, onKeyDown: handleKeyDown, onChange: handleChange, onBlur: handleBlur, onClick: handleClick, onKeyPress: handleKeyPress, placeholder: placeholder });\n  if (showTooltip && !isEditing) {\n    titleComponent = (0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.jsx)(src_components_Tooltip__WEBPACK_IMPORTED_MODULE_2__.Tooltip, { id: \"title-tooltip\", title: canEdit ?\n      (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_6__.t)('Click to edit') :\n      noPermitTooltip ||\n      (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_6__.t)(\"You don't have the rights to alter this title.\") },\n    titleComponent\n    );\n  }\n  if (!canEdit) {\n    // don't actually want an input in this case\n    titleComponent = url ? (0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_router_dom__WEBPACK_IMPORTED_MODULE_7__.Link, { to: url, \"data-test\": \"editable-title-input\", css: (theme) => (0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.css)`\n          color: ${theme.colors.grayscale.dark1};\n          text-decoration: none;\n          :hover {\n            text-decoration: underline;\n          }\n        ` },\n    value\n    ) : (0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", { \"data-test\": \"editable-title-input\" }, value);\n  }\n  return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", (0,_babel_runtime_corejs3_helpers_extends__WEBPACK_IMPORTED_MODULE_8__[\"default\"])({ \"data-test\": \"editable-title\", className: classnames__WEBPACK_IMPORTED_MODULE_1___default()('editable-title', extraClasses, canEdit && 'editable-title--editable', isEditing && 'editable-title--editing'), style: style }, rest),\n  certifiedBy && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n  (0,_emotion_react__WEBPACK_IMPORTED_MODULE_5__.jsx)(StyledCertifiedBadge, { certifiedBy: certifiedBy, details: certificationDetails, size: \"xl\" }), ' '\n  ),\n  titleComponent\n  );\n}__signature__(EditableTitle, \"useState{[isEditing, setIsEditing](editing)}\\nuseState{[currentTitle, setCurrentTitle](title)}\\nuseState{[lastTitle, setLastTitle](title)}\\nuseState{[contentBoundingRect, setContentBoundingRect](null)}\\nuseRef{contentRef}\\nuseEffect{}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledCertifiedBadge, \"StyledCertifiedBadge\", \"/app/superset-frontend/src/components/EditableTitle/index.tsx\");reactHotLoader.register(EditableTitle, \"EditableTitle\", \"/app/superset-frontend/src/components/EditableTitle/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/EditableTitle/index.tsx\n");

/***/ }),

/***/ "./src/components/RefreshLabel/index.tsx":
/*!***********************************************!*\
  !*** ./src/components/RefreshLabel/index.tsx ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var src_components_Tooltip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/components/Tooltip */ \"./src/components/Tooltip/index.tsx\");\n/* harmony import */ var src_components_Icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/components/Icons */ \"./src/components/Icons/index.tsx\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\nconst RefreshLabel = (_ref) => {let { onClick, tooltipContent } = _ref;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const IconWithoutRef = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => (0,_emotion_react__WEBPACK_IMPORTED_MODULE_3__.jsx)(src_components_Icons__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Refresh, props));\n  return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_3__.jsx)(src_components_Tooltip__WEBPACK_IMPORTED_MODULE_1__.Tooltip, { title: tooltipContent },\n  (0,_emotion_react__WEBPACK_IMPORTED_MODULE_3__.jsx)(IconWithoutRef, { role: \"button\", onClick: onClick, css: (theme) => ({\n      cursor: 'pointer',\n      color: theme.colors.grayscale.base,\n      '&:hover': { color: theme.colors.primary.base }\n    }) })\n  );\n};const _default =\nRefreshLabel;/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_default);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(RefreshLabel, \"RefreshLabel\", \"/app/superset-frontend/src/components/RefreshLabel/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/RefreshLabel/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9SZWZyZXNoTGFiZWwvaW5kZXgudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTtBQUVBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFJQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXBlcnNldC8uL3NyYy9jb21wb25lbnRzL1JlZnJlc2hMYWJlbC9pbmRleC50c3g/YjI2OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgUmVhY3QsIHsgTW91c2VFdmVudEhhbmRsZXIsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdXBlcnNldFRoZW1lIH0gZnJvbSAnQHN1cGVyc2V0LXVpL2NvcmUnO1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1Rvb2x0aXAnO1xuaW1wb3J0IEljb25zLCB7IEljb25UeXBlIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvSWNvbnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlZnJlc2hMYWJlbFByb3BzIHtcbiAgb25DbGljazogTW91c2VFdmVudEhhbmRsZXI8SFRNTFNwYW5FbGVtZW50PjtcbiAgdG9vbHRpcENvbnRlbnQ6IHN0cmluZztcbn1cblxuY29uc3QgUmVmcmVzaExhYmVsID0gKHsgb25DbGljaywgdG9vbHRpcENvbnRlbnQgfTogUmVmcmVzaExhYmVsUHJvcHMpID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBjb25zdCBJY29uV2l0aG91dFJlZiA9IGZvcndhcmRSZWYoKHByb3BzOiBJY29uVHlwZSwgcmVmOiBhbnkpID0+IChcbiAgICA8SWNvbnMuUmVmcmVzaCB7Li4ucHJvcHN9IC8+XG4gICkpO1xuXG4gIHJldHVybiAoXG4gICAgPFRvb2x0aXAgdGl0bGU9e3Rvb2x0aXBDb250ZW50fT5cbiAgICAgIDxJY29uV2l0aG91dFJlZlxuICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgY3NzPXsodGhlbWU6IFN1cGVyc2V0VGhlbWUpID0+ICh7XG4gICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgY29sb3I6IHRoZW1lLmNvbG9ycy5ncmF5c2NhbGUuYmFzZSxcbiAgICAgICAgICAnJjpob3Zlcic6IHsgY29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LmJhc2UgfSxcbiAgICAgICAgfSl9XG4gICAgICAvPlxuICAgIDwvVG9vbHRpcD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlZnJlc2hMYWJlbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/RefreshLabel/index.tsx\n");

/***/ }),

/***/ "./src/components/TableSelector/index.tsx":
/*!************************************************!*\
  !*** ./src/components/TableSelector/index.tsx ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableOption: () => (/* binding */ TableOption),\n/* harmony export */   TableSelectorMultiple: () => (/* binding */ TableSelectorMultiple),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_corejs3_helpers_extends__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @babel/runtime-corejs3/helpers/extends */ \"./node_modules/@babel/runtime-corejs3/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/style/index.tsx\");\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @superset-ui/core */ \"./packages/superset-ui-core/src/translation/TranslatorSingleton.ts\");\n/* harmony import */ var src_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/components */ \"./src/components/index.ts\");\n/* harmony import */ var src_components_Form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/components/Form */ \"./src/components/Form/index.tsx\");\n/* harmony import */ var src_components_Icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/components/Icons */ \"./src/components/Icons/index.tsx\");\n/* harmony import */ var src_components_DatabaseSelector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/components/DatabaseSelector */ \"./src/components/DatabaseSelector/index.tsx\");\n/* harmony import */ var src_components_RefreshLabel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/components/RefreshLabel */ \"./src/components/RefreshLabel/index.tsx\");\n/* harmony import */ var src_components_CertifiedBadge__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/components/CertifiedBadge */ \"./src/components/CertifiedBadge/index.tsx\");\n/* harmony import */ var src_components_WarningIconWithTooltip__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/components/WarningIconWithTooltip */ \"./src/components/WarningIconWithTooltip/index.tsx\");\n/* harmony import */ var src_components_MessageToasts_withToasts__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/components/MessageToasts/withToasts */ \"./src/components/MessageToasts/withToasts.tsx\");\n/* harmony import */ var src_hooks_apiResources__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/hooks/apiResources */ \"./src/hooks/apiResources/index.ts\");\n/* harmony import */ var src_utils_getClientErrorObject__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/utils/getClientErrorObject */ \"./src/utils/getClientErrorObject.ts\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\nconst REFRESH_WIDTH = 30;\nconst TableSelectorWrapper = _superset_ui_core__WEBPACK_IMPORTED_MODULE_11__.styled.div`\n  ${(_ref) => {let { theme } = _ref;return `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: ${REFRESH_WIDTH}px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n      max-width: calc(100% - ${theme.gridUnit + REFRESH_WIDTH}px)\n    }\n  `;}}\n`;\nconst TableLabel = _superset_ui_core__WEBPACK_IMPORTED_MODULE_11__.styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit;}}px;\n  }\n`;\nconst TableOption = (_ref3) => {let { table } = _ref3;\n  const { value, type, extra } = table;\n  return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(TableLabel, { title: value },\n  type === 'view' ? (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(src_components_Icons__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Eye, { iconSize: \"m\" }) : (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(src_components_Icons__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Table, { iconSize: \"m\" }),\n  (extra == null ? void 0 : extra.certification) && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(src_components_CertifiedBadge__WEBPACK_IMPORTED_MODULE_6__[\"default\"], { certifiedBy: extra.certification.certified_by, details: extra.certification.details, size: \"l\" }),\n  (extra == null ? void 0 : extra.warning_markdown) && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(src_components_WarningIconWithTooltip__WEBPACK_IMPORTED_MODULE_7__[\"default\"], { warningMarkdown: extra.warning_markdown, size: \"l\", marginRight: 4 }),\n  value\n  );\n};\nfunction renderSelectRow(select, refreshBtn) {\n  return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(\"div\", { className: \"section\" },\n  (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(\"span\", { className: \"select\" }, select),\n  (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(\"span\", { className: \"refresh\" }, refreshBtn)\n  );\n}\nconst TableSelector = (_ref4) => {let { database, emptyState, formMode = false, getDbList, handleError, isDatabaseSelectEnabled = true, onDbChange, onSchemaChange, readOnly = false, onEmptyResults, schema, sqlLabMode = true, tableSelectMode = 'single', tableValue = undefined, onTableSelectChange, customTableOptionLabelRenderer } = _ref4;\n  const { addSuccessToast } = (0,src_components_MessageToasts_withToasts__WEBPACK_IMPORTED_MODULE_8__.useToasts)();\n  const [currentSchema, setCurrentSchema] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(schema);\n  const [tableSelectValue, setTableSelectValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);\n  const { data, isFetching: loadingTables, refetch } = (0,src_hooks_apiResources__WEBPACK_IMPORTED_MODULE_9__.useTables)({\n    dbId: database == null ? void 0 : database.id,\n    schema: currentSchema,\n    onSuccess: (data, isFetched) => {\n      if (isFetched) {\n        addSuccessToast((0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_13__.t)('List updated'));\n      }\n    },\n    onError: (err) => {\n      (0,src_utils_getClientErrorObject__WEBPACK_IMPORTED_MODULE_10__.getClientErrorObject)(err).then((clientError) => {\n        handleError((0,src_utils_getClientErrorObject__WEBPACK_IMPORTED_MODULE_10__.getClientErrorMessage)((0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_13__.t)('There was an error loading the tables'), clientError));\n      });\n    }\n  });\n  const tableOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => data ?\n  data.options.map((table) => ({\n    value: table.value,\n    label: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(TableOption, { table: table }),\n    text: table.value,\n    ...(customTableOptionLabelRenderer && {\n      customLabel: customTableOptionLabelRenderer(table)\n    })\n  })) :\n  [], [data, customTableOptionLabelRenderer]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(tableOptions.find((option) => option.value === tableValue));\n    } else\n    {\n      setTableSelectValue((tableOptions == null ? void 0 : tableOptions.filter((option) => option && (tableValue == null ? void 0 : tableValue.includes(option.value)))) || []);\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n  const internalTableChange = (selectedOptions) => {\n    if (currentSchema) {\n      onTableSelectChange == null ? void 0 : onTableSelectChange(Array.isArray(selectedOptions) ?\n      selectedOptions.map((option) => option == null ? void 0 : option.value) :\n      selectedOptions == null ? void 0 : selectedOptions.value, currentSchema);\n    } else\n    {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n  const internalDbChange = (db) => {\n    if (onDbChange) {\n      onDbChange(db);\n    }\n  };\n  const internalSchemaChange = (schema) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n    const value = tableSelectMode === 'single' ? undefined : [];\n    internalTableChange(value);\n  };\n  const handleFilterOption = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (search, option) => {\n    const searchValue = search.trim().toLowerCase();\n    const { value } = option;\n    return value.toLowerCase().includes(searchValue);\n  }, []);\n  function renderTableSelect() {\n    const disabled = currentSchema && !formMode && readOnly || !currentSchema;\n    const header = sqlLabMode ? (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(src_components_Form__WEBPACK_IMPORTED_MODULE_2__.FormLabel, null, (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_13__.t)('See table schema')) : (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(src_components_Form__WEBPACK_IMPORTED_MODULE_2__.FormLabel, null, (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_13__.t)('Table'));\n    const select = (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(src_components__WEBPACK_IMPORTED_MODULE_1__.Select, { ariaLabel: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_13__.t)('Select table or type to search tables'), disabled: disabled, filterOption: handleFilterOption, header: header, labelInValue: true, loading: loadingTables, name: \"select-table\", onChange: (options) => internalTableChange(options), options: tableOptions, placeholder: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_13__.t)('Select table or type to search tables'), showSearch: true, mode: tableSelectMode, value: tableSelectValue, allowClear: tableSelectMode === 'multiple', allowSelectAll: false });\n    const refreshLabel = !readOnly && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(src_components_RefreshLabel__WEBPACK_IMPORTED_MODULE_5__[\"default\"], { onClick: () => refetch(), tooltipContent: (0,_superset_ui_core__WEBPACK_IMPORTED_MODULE_13__.t)('Force refresh table list') });\n    return renderSelectRow(select, refreshLabel);\n  }\n  return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(TableSelectorWrapper, null,\n  (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(src_components_DatabaseSelector__WEBPACK_IMPORTED_MODULE_4__[\"default\"], { db: database, emptyState: emptyState, formMode: formMode, getDbList: getDbList, handleError: handleError, onDbChange: readOnly ? undefined : internalDbChange, onEmptyResults: onEmptyResults, onSchemaChange: readOnly ? undefined : internalSchemaChange, schema: currentSchema, sqlLabMode: sqlLabMode, isDatabaseSelectEnabled: isDatabaseSelectEnabled && !readOnly, readOnly: readOnly }),\n  sqlLabMode && !formMode && (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(\"div\", { className: \"divider\" }),\n  renderTableSelect()\n  );\n};__signature__(TableSelector, \"useToasts{{ addSuccessToast }}\\nuseState{[currentSchema, setCurrentSchema](schema)}\\nuseState{[tableSelectValue, setTableSelectValue](undefined)}\\nuseTables{{ data, isFetching: loadingTables, refetch, }}\\nuseMemo{tableOptions}\\nuseEffect{}\\nuseEffect{}\\nuseMemo{handleFilterOption}\", () => [src_components_MessageToasts_withToasts__WEBPACK_IMPORTED_MODULE_8__.useToasts, src_hooks_apiResources__WEBPACK_IMPORTED_MODULE_9__.useTables]);\nconst TableSelectorMultiple = (props) => (0,_emotion_react__WEBPACK_IMPORTED_MODULE_12__.jsx)(TableSelector, (0,_babel_runtime_corejs3_helpers_extends__WEBPACK_IMPORTED_MODULE_14__[\"default\"])({ tableSelectMode: \"multiple\" }, props));const _default =\nTableSelector;/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_default);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(REFRESH_WIDTH, \"REFRESH_WIDTH\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableSelectorWrapper, \"TableSelectorWrapper\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableLabel, \"TableLabel\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableOption, \"TableOption\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(renderSelectRow, \"renderSelectRow\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableSelector, \"TableSelector\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableSelectorMultiple, \"TableSelectorMultiple\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/TableSelector/index.tsx\n");

/***/ }),

/***/ "./src/hooks/apiResources/charts.ts":
/*!******************************************!*\
  !*** ./src/hooks/apiResources/charts.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChartOwnerNames: () => (/* binding */ useChartOwnerNames)\n/* harmony export */ });\n/* harmony import */ var rison__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rison */ \"./node_modules/rison/js/rison.js\");\n/* harmony import */ var rison__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rison__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _apiResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apiResources */ \"./src/hooks/apiResources/apiResources.ts\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nfunction extractOwnerNames(_ref) {let { owners } = _ref;\n  if (!owners)\n  return null;\n  return owners.map((owner) => `${owner.first_name} ${owner.last_name}`);\n}\nconst ownerNamesQuery = rison__WEBPACK_IMPORTED_MODULE_0___default().encode({\n  columns: ['owners.first_name', 'owners.last_name'],\n  keys: ['none']\n});\nfunction useChartOwnerNames(chartId) {\n  return (0,_apiResources__WEBPACK_IMPORTED_MODULE_1__.useTransformedResource)((0,_apiResources__WEBPACK_IMPORTED_MODULE_1__.useApiV1Resource)(`/api/v1/chart/${chartId}?q=${ownerNamesQuery}`), extractOwnerNames);\n}__signature__(useChartOwnerNames, \"useTransformedResource{}\\nuseApiV1Resource{}\", () => [_apiResources__WEBPACK_IMPORTED_MODULE_1__.useTransformedResource, _apiResources__WEBPACK_IMPORTED_MODULE_1__.useApiV1Resource]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(extractOwnerNames, \"extractOwnerNames\", \"/app/superset-frontend/src/hooks/apiResources/charts.ts\");reactHotLoader.register(ownerNamesQuery, \"ownerNamesQuery\", \"/app/superset-frontend/src/hooks/apiResources/charts.ts\");reactHotLoader.register(useChartOwnerNames, \"useChartOwnerNames\", \"/app/superset-frontend/src/hooks/apiResources/charts.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaG9va3MvYXBpUmVzb3VyY2VzL2NoYXJ0cy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUlBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3VwZXJzZXQvLi9zcmMvaG9va3MvYXBpUmVzb3VyY2VzL2NoYXJ0cy50cz85ZGMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHJpc29uIGZyb20gJ3Jpc29uJztcbmltcG9ydCBDaGFydCBmcm9tICdzcmMvdHlwZXMvQ2hhcnQnO1xuaW1wb3J0IHsgdXNlQXBpVjFSZXNvdXJjZSwgdXNlVHJhbnNmb3JtZWRSZXNvdXJjZSB9IGZyb20gJy4vYXBpUmVzb3VyY2VzJztcblxuZnVuY3Rpb24gZXh0cmFjdE93bmVyTmFtZXMoeyBvd25lcnMgfTogQ2hhcnQpIHtcbiAgaWYgKCFvd25lcnMpIHJldHVybiBudWxsO1xuICByZXR1cm4gb3duZXJzLm1hcChvd25lciA9PiBgJHtvd25lci5maXJzdF9uYW1lfSAke293bmVyLmxhc3RfbmFtZX1gKTtcbn1cblxuY29uc3Qgb3duZXJOYW1lc1F1ZXJ5ID0gcmlzb24uZW5jb2RlKHtcbiAgY29sdW1uczogWydvd25lcnMuZmlyc3RfbmFtZScsICdvd25lcnMubGFzdF9uYW1lJ10sXG4gIGtleXM6IFsnbm9uZSddLFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VDaGFydE93bmVyTmFtZXMoY2hhcnRJZDogc3RyaW5nKSB7XG4gIHJldHVybiB1c2VUcmFuc2Zvcm1lZFJlc291cmNlKFxuICAgIHVzZUFwaVYxUmVzb3VyY2U8Q2hhcnQ+KGAvYXBpL3YxL2NoYXJ0LyR7Y2hhcnRJZH0/cT0ke293bmVyTmFtZXNRdWVyeX1gKSxcbiAgICBleHRyYWN0T3duZXJOYW1lcyxcbiAgKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/hooks/apiResources/charts.ts\n");

/***/ }),

/***/ "./src/hooks/apiResources/dashboards.ts":
/*!**********************************************!*\
  !*** ./src/hooks/apiResources/dashboards.ts ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDashboard: () => (/* binding */ useDashboard),\n/* harmony export */   useDashboardCharts: () => (/* binding */ useDashboardCharts),\n/* harmony export */   useDashboardDatasets: () => (/* binding */ useDashboardDatasets)\n/* harmony export */ });\n/* unused harmony export useEmbeddedDashboard */\n/* harmony import */ var _apiResources__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./apiResources */ \"./src/hooks/apiResources/apiResources.ts\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nconst useDashboard = (idOrSlug) => (0,_apiResources__WEBPACK_IMPORTED_MODULE_0__.useTransformedResource)((0,_apiResources__WEBPACK_IMPORTED_MODULE_0__.useApiV1Resource)(`/api/v1/dashboard/${idOrSlug}`), (dashboard) => ({\n  ...dashboard,\n  // TODO: load these at the API level\n  metadata: dashboard.json_metadata && JSON.parse(dashboard.json_metadata) || {},\n  position_data: dashboard.position_json && JSON.parse(dashboard.position_json),\n  owners: dashboard.owners || []\n}));\n// gets the chart definitions for a dashboard\n__signature__(useDashboard, \"useTransformedResource{}\\nuseApiV1Resource{}\", () => [_apiResources__WEBPACK_IMPORTED_MODULE_0__.useTransformedResource, _apiResources__WEBPACK_IMPORTED_MODULE_0__.useApiV1Resource]);const useDashboardCharts = (idOrSlug) => (0,_apiResources__WEBPACK_IMPORTED_MODULE_0__.useApiV1Resource)(`/api/v1/dashboard/${idOrSlug}/charts`);\n// gets the datasets for a dashboard\n// important: this endpoint only returns the fields in the dataset\n// that are necessary for rendering the given dashboard\n__signature__(useDashboardCharts, \"useApiV1Resource{}\", () => [_apiResources__WEBPACK_IMPORTED_MODULE_0__.useApiV1Resource]);const useDashboardDatasets = (idOrSlug) => (0,_apiResources__WEBPACK_IMPORTED_MODULE_0__.useApiV1Resource)(`/api/v1/dashboard/${idOrSlug}/datasets`);__signature__(useDashboardDatasets, \"useApiV1Resource{}\", () => [_apiResources__WEBPACK_IMPORTED_MODULE_0__.useApiV1Resource]);\nconst useEmbeddedDashboard = (idOrSlug) => (0,_apiResources__WEBPACK_IMPORTED_MODULE_0__.useApiV1Resource)(`/api/v1/dashboard/${idOrSlug}/embedded`);__signature__(useEmbeddedDashboard, \"useApiV1Resource{}\", () => [_apiResources__WEBPACK_IMPORTED_MODULE_0__.useApiV1Resource]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(useDashboard, \"useDashboard\", \"/app/superset-frontend/src/hooks/apiResources/dashboards.ts\");reactHotLoader.register(useDashboardCharts, \"useDashboardCharts\", \"/app/superset-frontend/src/hooks/apiResources/dashboards.ts\");reactHotLoader.register(useDashboardDatasets, \"useDashboardDatasets\", \"/app/superset-frontend/src/hooks/apiResources/dashboards.ts\");reactHotLoader.register(useEmbeddedDashboard, \"useEmbeddedDashboard\", \"/app/superset-frontend/src/hooks/apiResources/dashboards.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaG9va3MvYXBpUmVzb3VyY2VzL2Rhc2hib2FyZHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFJQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cGVyc2V0Ly4vc3JjL2hvb2tzL2FwaVJlc291cmNlcy9kYXNoYm9hcmRzLnRzP2JjMTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEYXNoYm9hcmQsIERhdGFzb3VyY2UsIEVtYmVkZGVkRGFzaGJvYXJkIH0gZnJvbSAnc3JjL2Rhc2hib2FyZC90eXBlcyc7XG5pbXBvcnQgeyBDaGFydCB9IGZyb20gJ3NyYy90eXBlcy9DaGFydCc7XG5pbXBvcnQgeyB1c2VBcGlWMVJlc291cmNlLCB1c2VUcmFuc2Zvcm1lZFJlc291cmNlIH0gZnJvbSAnLi9hcGlSZXNvdXJjZXMnO1xuXG5leHBvcnQgY29uc3QgdXNlRGFzaGJvYXJkID0gKGlkT3JTbHVnOiBzdHJpbmcgfCBudW1iZXIpID0+XG4gIHVzZVRyYW5zZm9ybWVkUmVzb3VyY2UoXG4gICAgdXNlQXBpVjFSZXNvdXJjZTxEYXNoYm9hcmQ+KGAvYXBpL3YxL2Rhc2hib2FyZC8ke2lkT3JTbHVnfWApLFxuICAgIGRhc2hib2FyZCA9PiAoe1xuICAgICAgLi4uZGFzaGJvYXJkLFxuICAgICAgLy8gVE9ETzogbG9hZCB0aGVzZSBhdCB0aGUgQVBJIGxldmVsXG4gICAgICBtZXRhZGF0YTpcbiAgICAgICAgKGRhc2hib2FyZC5qc29uX21ldGFkYXRhICYmIEpTT04ucGFyc2UoZGFzaGJvYXJkLmpzb25fbWV0YWRhdGEpKSB8fCB7fSxcbiAgICAgIHBvc2l0aW9uX2RhdGE6XG4gICAgICAgIGRhc2hib2FyZC5wb3NpdGlvbl9qc29uICYmIEpTT04ucGFyc2UoZGFzaGJvYXJkLnBvc2l0aW9uX2pzb24pLFxuICAgICAgb3duZXJzOiBkYXNoYm9hcmQub3duZXJzIHx8IFtdLFxuICAgIH0pLFxuICApO1xuXG4vLyBnZXRzIHRoZSBjaGFydCBkZWZpbml0aW9ucyBmb3IgYSBkYXNoYm9hcmRcbmV4cG9ydCBjb25zdCB1c2VEYXNoYm9hcmRDaGFydHMgPSAoaWRPclNsdWc6IHN0cmluZyB8IG51bWJlcikgPT5cbiAgdXNlQXBpVjFSZXNvdXJjZTxDaGFydFtdPihgL2FwaS92MS9kYXNoYm9hcmQvJHtpZE9yU2x1Z30vY2hhcnRzYCk7XG5cbi8vIGdldHMgdGhlIGRhdGFzZXRzIGZvciBhIGRhc2hib2FyZFxuLy8gaW1wb3J0YW50OiB0aGlzIGVuZHBvaW50IG9ubHkgcmV0dXJucyB0aGUgZmllbGRzIGluIHRoZSBkYXRhc2V0XG4vLyB0aGF0IGFyZSBuZWNlc3NhcnkgZm9yIHJlbmRlcmluZyB0aGUgZ2l2ZW4gZGFzaGJvYXJkXG5leHBvcnQgY29uc3QgdXNlRGFzaGJvYXJkRGF0YXNldHMgPSAoaWRPclNsdWc6IHN0cmluZyB8IG51bWJlcikgPT5cbiAgdXNlQXBpVjFSZXNvdXJjZTxEYXRhc291cmNlW10+KGAvYXBpL3YxL2Rhc2hib2FyZC8ke2lkT3JTbHVnfS9kYXRhc2V0c2ApO1xuXG5leHBvcnQgY29uc3QgdXNlRW1iZWRkZWREYXNoYm9hcmQgPSAoaWRPclNsdWc6IHN0cmluZyB8IG51bWJlcikgPT5cbiAgdXNlQXBpVjFSZXNvdXJjZTxFbWJlZGRlZERhc2hib2FyZD4oYC9hcGkvdjEvZGFzaGJvYXJkLyR7aWRPclNsdWd9L2VtYmVkZGVkYCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/hooks/apiResources/dashboards.ts\n");

/***/ }),

/***/ "./src/hooks/apiResources/index.ts":
/*!*****************************************!*\
  !*** ./src/hooks/apiResources/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   schemaEndpoints: () => (/* reexport safe */ _schemas__WEBPACK_IMPORTED_MODULE_5__.schemaEndpoints),\n/* harmony export */   skipToken: () => (/* reexport safe */ _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__.skipToken),\n/* harmony export */   tableEndpoints: () => (/* reexport safe */ _tables__WEBPACK_IMPORTED_MODULE_4__.tableEndpoints),\n/* harmony export */   useChartOwnerNames: () => (/* reexport safe */ _charts__WEBPACK_IMPORTED_MODULE_2__.useChartOwnerNames),\n/* harmony export */   useDashboard: () => (/* reexport safe */ _dashboards__WEBPACK_IMPORTED_MODULE_3__.useDashboard),\n/* harmony export */   useDashboardCharts: () => (/* reexport safe */ _dashboards__WEBPACK_IMPORTED_MODULE_3__.useDashboardCharts),\n/* harmony export */   useDashboardDatasets: () => (/* reexport safe */ _dashboards__WEBPACK_IMPORTED_MODULE_3__.useDashboardDatasets),\n/* harmony export */   useQueryValidationsQuery: () => (/* reexport safe */ _queryValidations__WEBPACK_IMPORTED_MODULE_6__.useQueryValidationsQuery),\n/* harmony export */   useSchemas: () => (/* reexport safe */ _schemas__WEBPACK_IMPORTED_MODULE_5__.useSchemas),\n/* harmony export */   useTableExtendedMetadataQuery: () => (/* reexport safe */ _tables__WEBPACK_IMPORTED_MODULE_4__.useTableExtendedMetadataQuery),\n/* harmony export */   useTableMetadataQuery: () => (/* reexport safe */ _tables__WEBPACK_IMPORTED_MODULE_4__.useTableMetadataQuery),\n/* harmony export */   useTables: () => (/* reexport safe */ _tables__WEBPACK_IMPORTED_MODULE_4__.useTables)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @reduxjs/toolkit/query/react */ \"./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.esm.js\");\n/* harmony import */ var _apiResources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apiResources */ \"./src/hooks/apiResources/apiResources.ts\");\n/* harmony import */ var _charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./charts */ \"./src/hooks/apiResources/charts.ts\");\n/* harmony import */ var _dashboards__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dashboards */ \"./src/hooks/apiResources/dashboards.ts\");\n/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tables */ \"./src/hooks/apiResources/tables.ts\");\n/* harmony import */ var _schemas__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./schemas */ \"./src/hooks/apiResources/schemas.ts\");\n/* harmony import */ var _queryValidations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./queryValidations */ \"./src/hooks/apiResources/queryValidations.ts\");\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n// A central catalog of API Resource hooks.\n// Add new API hooks here, organized under\n// different files for different resource types.\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaG9va3MvYXBpUmVzb3VyY2VzL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3VwZXJzZXQvLi9zcmMvaG9va3MvYXBpUmVzb3VyY2VzL2luZGV4LnRzP2EwZDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IHsgc2tpcFRva2VuIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdC9xdWVyeS9yZWFjdCc7XG5leHBvcnQge1xuICB1c2VBcGlSZXNvdXJjZUZ1bGxCb2R5LFxuICB1c2VBcGlWMVJlc291cmNlLFxuICB1c2VUcmFuc2Zvcm1lZFJlc291cmNlLFxufSBmcm9tICcuL2FwaVJlc291cmNlcyc7XG5cbi8vIEEgY2VudHJhbCBjYXRhbG9nIG9mIEFQSSBSZXNvdXJjZSBob29rcy5cbi8vIEFkZCBuZXcgQVBJIGhvb2tzIGhlcmUsIG9yZ2FuaXplZCB1bmRlclxuLy8gZGlmZmVyZW50IGZpbGVzIGZvciBkaWZmZXJlbnQgcmVzb3VyY2UgdHlwZXMuXG5leHBvcnQgKiBmcm9tICcuL2NoYXJ0cyc7XG5leHBvcnQgKiBmcm9tICcuL2Rhc2hib2FyZHMnO1xuZXhwb3J0ICogZnJvbSAnLi90YWJsZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9zY2hlbWFzJztcbmV4cG9ydCAqIGZyb20gJy4vcXVlcnlWYWxpZGF0aW9ucyc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/hooks/apiResources/index.ts\n");

/***/ }),

/***/ "./src/hooks/apiResources/queryValidations.ts":
/*!****************************************************!*\
  !*** ./src/hooks/apiResources/queryValidations.ts ***!
  \****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useQueryValidationsQuery: () => (/* binding */ useQueryValidationsQuery)\n/* harmony export */ });\n/* harmony import */ var _queryApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queryApi */ \"./src/hooks/apiResources/queryApi.ts\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nconst queryValidationApi = _queryApi__WEBPACK_IMPORTED_MODULE_0__.api.injectEndpoints({\n  endpoints: (builder) => ({\n    queryValidations: builder.query({\n      providesTags: ['QueryValidations'],\n      query: (_ref) => {let { dbId, schema, sql, templateParams } = _ref;\n        let template_params = templateParams;\n        try {\n          template_params = JSON.parse(templateParams || '');\n        }\n        catch (e) {\n          template_params = undefined;\n        }\n        const postPayload = {\n          schema,\n          sql,\n          ...(template_params && { template_params })\n        };\n        return {\n          method: 'post',\n          endpoint: `/api/v1/database/${dbId}/validate_sql/`,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(postPayload),\n          transformResponse: (_ref2) => {let { json } = _ref2;return json.result;}\n        };\n      }\n    })\n  })\n});\nconst { useQueryValidationsQuery } = queryValidationApi;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(queryValidationApi, \"queryValidationApi\", \"/app/superset-frontend/src/hooks/apiResources/queryValidations.ts\");reactHotLoader.register(useQueryValidationsQuery, \"useQueryValidationsQuery\", \"/app/superset-frontend/src/hooks/apiResources/queryValidations.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaG9va3MvYXBpUmVzb3VyY2VzL3F1ZXJ5VmFsaWRhdGlvbnMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBO0FBZ0JBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3VwZXJzZXQvLi9zcmMvaG9va3MvYXBpUmVzb3VyY2VzL3F1ZXJ5VmFsaWRhdGlvbnMudHM/OGE3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBhcGksIEpzb25SZXNwb25zZSB9IGZyb20gJy4vcXVlcnlBcGknO1xuXG5leHBvcnQgdHlwZSBGZXRjaFZhbGlkYXRpb25RdWVyeVBhcmFtcyA9IHtcbiAgZGJJZD86IHN0cmluZyB8IG51bWJlcjtcbiAgc2NoZW1hPzogc3RyaW5nO1xuICBzcWw6IHN0cmluZztcbiAgdGVtcGxhdGVQYXJhbXM/OiBzdHJpbmc7XG59O1xuXG50eXBlIFZhbGlkYXRpb25SZXN1bHQgPSB7XG4gIGVuZF9jb2x1bW46IG51bWJlciB8IG51bGw7XG4gIGxpbmVfbnVtYmVyOiBudW1iZXIgfCBudWxsO1xuICBtZXNzYWdlOiBzdHJpbmcgfCBudWxsO1xuICBzdGFydF9jb2x1bW46IG51bWJlciB8IG51bGw7XG59O1xuXG5jb25zdCBxdWVyeVZhbGlkYXRpb25BcGkgPSBhcGkuaW5qZWN0RW5kcG9pbnRzKHtcbiAgZW5kcG9pbnRzOiBidWlsZGVyID0+ICh7XG4gICAgcXVlcnlWYWxpZGF0aW9uczogYnVpbGRlci5xdWVyeTxcbiAgICAgIFZhbGlkYXRpb25SZXN1bHRbXSxcbiAgICAgIEZldGNoVmFsaWRhdGlvblF1ZXJ5UGFyYW1zXG4gICAgPih7XG4gICAgICBwcm92aWRlc1RhZ3M6IFsnUXVlcnlWYWxpZGF0aW9ucyddLFxuICAgICAgcXVlcnk6ICh7IGRiSWQsIHNjaGVtYSwgc3FsLCB0ZW1wbGF0ZVBhcmFtcyB9KSA9PiB7XG4gICAgICAgIGxldCB0ZW1wbGF0ZV9wYXJhbXMgPSB0ZW1wbGF0ZVBhcmFtcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0ZW1wbGF0ZV9wYXJhbXMgPSBKU09OLnBhcnNlKHRlbXBsYXRlUGFyYW1zIHx8ICcnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRlbXBsYXRlX3BhcmFtcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwb3N0UGF5bG9hZCA9IHtcbiAgICAgICAgICBzY2hlbWEsXG4gICAgICAgICAgc3FsLFxuICAgICAgICAgIC4uLih0ZW1wbGF0ZV9wYXJhbXMgJiYgeyB0ZW1wbGF0ZV9wYXJhbXMgfSksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgZW5kcG9pbnQ6IGAvYXBpL3YxL2RhdGFiYXNlLyR7ZGJJZH0vdmFsaWRhdGVfc3FsL2AsXG4gICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocG9zdFBheWxvYWQpLFxuICAgICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiAoeyBqc29uIH06IEpzb25SZXNwb25zZSkgPT4ganNvbi5yZXN1bHQsXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgIH0pLFxuICB9KSxcbn0pO1xuXG5leHBvcnQgY29uc3QgeyB1c2VRdWVyeVZhbGlkYXRpb25zUXVlcnkgfSA9IHF1ZXJ5VmFsaWRhdGlvbkFwaTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/hooks/apiResources/queryValidations.ts\n");

/***/ })

}]);